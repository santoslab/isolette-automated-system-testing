package RTS.system_tests.rts1

import org.sireum._
import RTS._

// Do not edit this file as it will be overwritten if SystemTestArtifactGen is rerun

object Actuation_Subsystem_Inputs_Container_Profile {

  // a call to next may result in an AssertionError which is an indication that
  // SlangCheck was unable to satisfy a field's filter.  Consider using
  // nextH instead
  def next(profile: Actuation_Subsystem_Inputs_Container_Profile): Actuation_Subsystem_Inputs_Container = {
    return Actuation_Subsystem_Inputs_Container (
      au1_temp_coincidenceLogic_channel1 = profile.au1_temp_coincidenceLogic_channel1.nextB(),
      au1_temp_coincidenceLogic_channel2 = profile.au1_temp_coincidenceLogic_channel2.nextB(),
      au1_temp_coincidenceLogic_channel3 = profile.au1_temp_coincidenceLogic_channel3.nextB(),
      au1_temp_coincidenceLogic_channel4 = profile.au1_temp_coincidenceLogic_channel4.nextB(),
      au1_press_coincidenceLogic_channel1 = profile.au1_press_coincidenceLogic_channel1.nextB(),
      au1_press_coincidenceLogic_channel2 = profile.au1_press_coincidenceLogic_channel2.nextB(),
      au1_press_coincidenceLogic_channel3 = profile.au1_press_coincidenceLogic_channel3.nextB(),
      au1_press_coincidenceLogic_channel4 = profile.au1_press_coincidenceLogic_channel4.nextB(),
      au1_satlogic_coincidenceLogic_channel1 = profile.au1_satlogic_coincidenceLogic_channel1.nextB(),
      au1_satlogic_coincidenceLogic_channel2 = profile.au1_satlogic_coincidenceLogic_channel2.nextB(),
      au1_satlogic_coincidenceLogic_channel3 = profile.au1_satlogic_coincidenceLogic_channel3.nextB(),
      au1_satlogic_coincidenceLogic_channel4 = profile.au1_satlogic_coincidenceLogic_channel4.nextB(),
      au2_temp_coincidenceLogic_channel1 = profile.au2_temp_coincidenceLogic_channel1.nextB(),
      au2_temp_coincidenceLogic_channel2 = profile.au2_temp_coincidenceLogic_channel2.nextB(),
      au2_temp_coincidenceLogic_channel3 = profile.au2_temp_coincidenceLogic_channel3.nextB(),
      au2_temp_coincidenceLogic_channel4 = profile.au2_temp_coincidenceLogic_channel4.nextB(),
      au2_press_coincidenceLogic_channel1 = profile.au2_press_coincidenceLogic_channel1.nextB(),
      au2_press_coincidenceLogic_channel2 = profile.au2_press_coincidenceLogic_channel2.nextB(),
      au2_press_coincidenceLogic_channel3 = profile.au2_press_coincidenceLogic_channel3.nextB(),
      au2_press_coincidenceLogic_channel4 = profile.au2_press_coincidenceLogic_channel4.nextB(),
      au2_satlogic_coincidenceLogic_channel1 = profile.au2_satlogic_coincidenceLogic_channel1.nextB(),
      au2_satlogic_coincidenceLogic_channel2 = profile.au2_satlogic_coincidenceLogic_channel2.nextB(),
      au2_satlogic_coincidenceLogic_channel3 = profile.au2_satlogic_coincidenceLogic_channel3.nextB(),
      au2_satlogic_coincidenceLogic_channel4 = profile.au2_satlogic_coincidenceLogic_channel4.nextB(),
      tempPressManualActuatorInput = profile.tempPressManualActuatorInput.nextB(),
      satManualActuatorInput = profile.satManualActuatorInput.nextB()
    )
  }

  // nextH will return None() if SlangCheck is unable to satisfy a field's filter
  def nextH(profile: Actuation_Subsystem_Inputs_Container_Profile): Option[Actuation_Subsystem_Inputs_Container] = {
    try {
      return Some(Actuation_Subsystem_Inputs_Container (
        au1_temp_coincidenceLogic_channel1 = profile.au1_temp_coincidenceLogic_channel1.nextB(),
        au1_temp_coincidenceLogic_channel2 = profile.au1_temp_coincidenceLogic_channel2.nextB(),
        au1_temp_coincidenceLogic_channel3 = profile.au1_temp_coincidenceLogic_channel3.nextB(),
        au1_temp_coincidenceLogic_channel4 = profile.au1_temp_coincidenceLogic_channel4.nextB(),
        au1_press_coincidenceLogic_channel1 = profile.au1_press_coincidenceLogic_channel1.nextB(),
        au1_press_coincidenceLogic_channel2 = profile.au1_press_coincidenceLogic_channel2.nextB(),
        au1_press_coincidenceLogic_channel3 = profile.au1_press_coincidenceLogic_channel3.nextB(),
        au1_press_coincidenceLogic_channel4 = profile.au1_press_coincidenceLogic_channel4.nextB(),
        au1_satlogic_coincidenceLogic_channel1 = profile.au1_satlogic_coincidenceLogic_channel1.nextB(),
        au1_satlogic_coincidenceLogic_channel2 = profile.au1_satlogic_coincidenceLogic_channel2.nextB(),
        au1_satlogic_coincidenceLogic_channel3 = profile.au1_satlogic_coincidenceLogic_channel3.nextB(),
        au1_satlogic_coincidenceLogic_channel4 = profile.au1_satlogic_coincidenceLogic_channel4.nextB(),
        au2_temp_coincidenceLogic_channel1 = profile.au2_temp_coincidenceLogic_channel1.nextB(),
        au2_temp_coincidenceLogic_channel2 = profile.au2_temp_coincidenceLogic_channel2.nextB(),
        au2_temp_coincidenceLogic_channel3 = profile.au2_temp_coincidenceLogic_channel3.nextB(),
        au2_temp_coincidenceLogic_channel4 = profile.au2_temp_coincidenceLogic_channel4.nextB(),
        au2_press_coincidenceLogic_channel1 = profile.au2_press_coincidenceLogic_channel1.nextB(),
        au2_press_coincidenceLogic_channel2 = profile.au2_press_coincidenceLogic_channel2.nextB(),
        au2_press_coincidenceLogic_channel3 = profile.au2_press_coincidenceLogic_channel3.nextB(),
        au2_press_coincidenceLogic_channel4 = profile.au2_press_coincidenceLogic_channel4.nextB(),
        au2_satlogic_coincidenceLogic_channel1 = profile.au2_satlogic_coincidenceLogic_channel1.nextB(),
        au2_satlogic_coincidenceLogic_channel2 = profile.au2_satlogic_coincidenceLogic_channel2.nextB(),
        au2_satlogic_coincidenceLogic_channel3 = profile.au2_satlogic_coincidenceLogic_channel3.nextB(),
        au2_satlogic_coincidenceLogic_channel4 = profile.au2_satlogic_coincidenceLogic_channel4.nextB(),
        tempPressManualActuatorInput = profile.tempPressManualActuatorInput.nextB(),
        satManualActuatorInput = profile.satManualActuatorInput.nextB()))
    } catch {
      case e: AssertionError =>
        // SlangCheck was unable to satisfy a datatype's filter
        return None()
    }
  }

  def getDefaultProfile: Actuation_Subsystem_Inputs_Container_Profile = {
    return Actuation_Subsystem_Inputs_Container_Profile (
      name = "Default Actuation_Subsystem_Inputs_Container_Profile Profile",
      numTests = 100,
      numTestVectorGenRetries = 100,

      au1_temp_coincidenceLogic_channel1 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_temp_coincidenceLogic_channel2 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_temp_coincidenceLogic_channel3 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_temp_coincidenceLogic_channel4 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_press_coincidenceLogic_channel1 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_press_coincidenceLogic_channel2 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_press_coincidenceLogic_channel3 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_press_coincidenceLogic_channel4 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_satlogic_coincidenceLogic_channel1 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_satlogic_coincidenceLogic_channel2 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_satlogic_coincidenceLogic_channel3 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au1_satlogic_coincidenceLogic_channel4 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_temp_coincidenceLogic_channel1 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_temp_coincidenceLogic_channel2 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_temp_coincidenceLogic_channel3 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_temp_coincidenceLogic_channel4 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_press_coincidenceLogic_channel1 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_press_coincidenceLogic_channel2 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_press_coincidenceLogic_channel3 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_press_coincidenceLogic_channel4 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_satlogic_coincidenceLogic_channel1 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_satlogic_coincidenceLogic_channel2 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_satlogic_coincidenceLogic_channel3 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      au2_satlogic_coincidenceLogic_channel4 = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      tempPressManualActuatorInput = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib,
      satManualActuatorInput = Actuation_Subsystem_Inputs_Container_Util.freshRandomLib
    )
  }
}

case class Actuation_Subsystem_Inputs_Container_Profile (
  var name: String,
  var numTests: Z,
  var numTestVectorGenRetries: Z,

  var au1_temp_coincidenceLogic_channel1 : RandomLib,
  var au1_temp_coincidenceLogic_channel2 : RandomLib,
  var au1_temp_coincidenceLogic_channel3 : RandomLib,
  var au1_temp_coincidenceLogic_channel4 : RandomLib,
  var au1_press_coincidenceLogic_channel1 : RandomLib,
  var au1_press_coincidenceLogic_channel2 : RandomLib,
  var au1_press_coincidenceLogic_channel3 : RandomLib,
  var au1_press_coincidenceLogic_channel4 : RandomLib,
  var au1_satlogic_coincidenceLogic_channel1 : RandomLib,
  var au1_satlogic_coincidenceLogic_channel2 : RandomLib,
  var au1_satlogic_coincidenceLogic_channel3 : RandomLib,
  var au1_satlogic_coincidenceLogic_channel4 : RandomLib,
  var au2_temp_coincidenceLogic_channel1 : RandomLib,
  var au2_temp_coincidenceLogic_channel2 : RandomLib,
  var au2_temp_coincidenceLogic_channel3 : RandomLib,
  var au2_temp_coincidenceLogic_channel4 : RandomLib,
  var au2_press_coincidenceLogic_channel1 : RandomLib,
  var au2_press_coincidenceLogic_channel2 : RandomLib,
  var au2_press_coincidenceLogic_channel3 : RandomLib,
  var au2_press_coincidenceLogic_channel4 : RandomLib,
  var au2_satlogic_coincidenceLogic_channel1 : RandomLib,
  var au2_satlogic_coincidenceLogic_channel2 : RandomLib,
  var au2_satlogic_coincidenceLogic_channel3 : RandomLib,
  var au2_satlogic_coincidenceLogic_channel4 : RandomLib,
  var tempPressManualActuatorInput : RandomLib,
  var satManualActuatorInput : RandomLib) extends org.sireum.$internal.MutableMarker {

  override def $clonable: Boolean = F

  override def $clonable_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $owned: Boolean = F

  override def $owned_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $clone: org.sireum.$internal.MutableMarker = this
}
