// #Sireum

package bc.BoilerControl

import org.sireum._
import art._
import bc.SystemTestSuiteSlang.runtimeMonitorStream
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object OperatorDesk_i_bcproc_desk_SystemTestAPI {
  /** helper method to set the values of all incoming ports and state variables
    * @param In_isLevelBroken pre-state state variable
    * @param In_isPumpBroken0 pre-state state variable
    * @param In_isPumpBroken1 pre-state state variable
    * @param In_isPumpBroken2 pre-state state variable
    * @param In_isPumpBroken3 pre-state state variable
    * @param In_isPumpControlBroken0 pre-state state variable
    * @param In_isPumpControlBroken1 pre-state state variable
    * @param In_isPumpControlBroken2 pre-state state variable
    * @param In_isPumpControlBroken3 pre-state state variable
    * @param In_isSteamBroken pre-state state variable
    * @param api_levelFail incoming event port
    * @param api_levelRepairAck incoming event port
    * @param api_pumpControlFail0 incoming event port
    * @param api_pumpControlFail1 incoming event port
    * @param api_pumpControlFail2 incoming event port
    * @param api_pumpControlFail3 incoming event port
    * @param api_pumpControlRepairAck0 incoming event port
    * @param api_pumpControlRepairAck1 incoming event port
    * @param api_pumpControlRepairAck2 incoming event port
    * @param api_pumpControlRepairAck3 incoming event port
    * @param api_pumpFail0 incoming event port
    * @param api_pumpFail1 incoming event port
    * @param api_pumpFail2 incoming event port
    * @param api_pumpFail3 incoming event port
    * @param api_pumpRepairAck0 incoming event port
    * @param api_pumpRepairAck1 incoming event port
    * @param api_pumpRepairAck2 incoming event port
    * @param api_pumpRepairAck3 incoming event port
    * @param api_steamFail incoming event port
    * @param api_steamRepairAck incoming event port
    * @param api_opMode incoming event data port
    */
  def put_concrete_inputs(In_isLevelBroken: Base_Types.Boolean,
                          In_isPumpBroken0: Base_Types.Boolean,
                          In_isPumpBroken1: Base_Types.Boolean,
                          In_isPumpBroken2: Base_Types.Boolean,
                          In_isPumpBroken3: Base_Types.Boolean,
                          In_isPumpControlBroken0: Base_Types.Boolean,
                          In_isPumpControlBroken1: Base_Types.Boolean,
                          In_isPumpControlBroken2: Base_Types.Boolean,
                          In_isPumpControlBroken3: Base_Types.Boolean,
                          In_isSteamBroken: Base_Types.Boolean,
                          api_levelFail: Option[art.Empty],
                          api_levelRepairAck: Option[art.Empty],
                          api_pumpControlFail0: Option[art.Empty],
                          api_pumpControlFail1: Option[art.Empty],
                          api_pumpControlFail2: Option[art.Empty],
                          api_pumpControlFail3: Option[art.Empty],
                          api_pumpControlRepairAck0: Option[art.Empty],
                          api_pumpControlRepairAck1: Option[art.Empty],
                          api_pumpControlRepairAck2: Option[art.Empty],
                          api_pumpControlRepairAck3: Option[art.Empty],
                          api_pumpFail0: Option[art.Empty],
                          api_pumpFail1: Option[art.Empty],
                          api_pumpFail2: Option[art.Empty],
                          api_pumpFail3: Option[art.Empty],
                          api_pumpRepairAck0: Option[art.Empty],
                          api_pumpRepairAck1: Option[art.Empty],
                          api_pumpRepairAck2: Option[art.Empty],
                          api_pumpRepairAck3: Option[art.Empty],
                          api_steamFail: Option[art.Empty],
                          api_steamRepairAck: Option[art.Empty],
                          api_opMode: Option[BoilerControl.OpMode.Type]): Unit = {
    put_In_isLevelBroken(In_isLevelBroken)
    put_In_isPumpBroken0(In_isPumpBroken0)
    put_In_isPumpBroken1(In_isPumpBroken1)
    put_In_isPumpBroken2(In_isPumpBroken2)
    put_In_isPumpBroken3(In_isPumpBroken3)
    put_In_isPumpControlBroken0(In_isPumpControlBroken0)
    put_In_isPumpControlBroken1(In_isPumpControlBroken1)
    put_In_isPumpControlBroken2(In_isPumpControlBroken2)
    put_In_isPumpControlBroken3(In_isPumpControlBroken3)
    put_In_isSteamBroken(In_isSteamBroken)
    put_levelFail(api_levelFail)
    put_levelRepairAck(api_levelRepairAck)
    put_pumpControlFail0(api_pumpControlFail0)
    put_pumpControlFail1(api_pumpControlFail1)
    put_pumpControlFail2(api_pumpControlFail2)
    put_pumpControlFail3(api_pumpControlFail3)
    put_pumpControlRepairAck0(api_pumpControlRepairAck0)
    put_pumpControlRepairAck1(api_pumpControlRepairAck1)
    put_pumpControlRepairAck2(api_pumpControlRepairAck2)
    put_pumpControlRepairAck3(api_pumpControlRepairAck3)
    put_pumpFail0(api_pumpFail0)
    put_pumpFail1(api_pumpFail1)
    put_pumpFail2(api_pumpFail2)
    put_pumpFail3(api_pumpFail3)
    put_pumpRepairAck0(api_pumpRepairAck0)
    put_pumpRepairAck1(api_pumpRepairAck1)
    put_pumpRepairAck2(api_pumpRepairAck2)
    put_pumpRepairAck3(api_pumpRepairAck3)
    put_steamFail(api_steamFail)
    put_steamRepairAck(api_steamRepairAck)
    put_opMode(api_opMode)
  }

  // setter for state variable
  def put_In_isLevelBroken(value: Base_Types.Boolean): Unit = {
    OperatorDesk_i_bcproc_desk.isLevelBroken = value
  }

  // setter for state variable
  def put_In_isPumpBroken0(value: Base_Types.Boolean): Unit = {
    OperatorDesk_i_bcproc_desk.isPumpBroken0 = value
  }

  // setter for state variable
  def put_In_isPumpBroken1(value: Base_Types.Boolean): Unit = {
    OperatorDesk_i_bcproc_desk.isPumpBroken1 = value
  }

  // setter for state variable
  def put_In_isPumpBroken2(value: Base_Types.Boolean): Unit = {
    OperatorDesk_i_bcproc_desk.isPumpBroken2 = value
  }

  // setter for state variable
  def put_In_isPumpBroken3(value: Base_Types.Boolean): Unit = {
    OperatorDesk_i_bcproc_desk.isPumpBroken3 = value
  }

  // setter for state variable
  def put_In_isPumpControlBroken0(value: Base_Types.Boolean): Unit = {
    OperatorDesk_i_bcproc_desk.isPumpControlBroken0 = value
  }

  // setter for state variable
  def put_In_isPumpControlBroken1(value: Base_Types.Boolean): Unit = {
    OperatorDesk_i_bcproc_desk.isPumpControlBroken1 = value
  }

  // setter for state variable
  def put_In_isPumpControlBroken2(value: Base_Types.Boolean): Unit = {
    OperatorDesk_i_bcproc_desk.isPumpControlBroken2 = value
  }

  // setter for state variable
  def put_In_isPumpControlBroken3(value: Base_Types.Boolean): Unit = {
    OperatorDesk_i_bcproc_desk.isPumpControlBroken3 = value
  }

  // setter for state variable
  def put_In_isSteamBroken(value: Base_Types.Boolean): Unit = {
    OperatorDesk_i_bcproc_desk.isSteamBroken = value
  }

  // setter for incoming event  port
  def put_levelFail(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.levelFail_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_levelRepairAck(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.levelRepairAck_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlFail0(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFail0_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlFail1(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFail1_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlFail2(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFail2_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlFail3(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFail3_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlRepairAck0(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepairAck0_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlRepairAck1(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepairAck1_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlRepairAck2(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepairAck2_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlRepairAck3(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepairAck3_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpFail0(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFail0_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpFail1(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFail1_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpFail2(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFail2_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpFail3(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFail3_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpRepairAck0(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepairAck0_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpRepairAck1(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepairAck1_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpRepairAck2(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepairAck2_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpRepairAck3(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepairAck3_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_steamFail(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.steamFail_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_steamRepairAck(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.steamRepairAck_Id, v)
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_opMode(value: Option[BoilerControl.OpMode.Type]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.opMode_Id, BoilerControl.OpMode_Payload(v))
      case _ =>
    }
  }

  def fetchContainer(): bc.BoilerControl.OperatorDesk_i_bcproc_desk_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.BoilerControlSystem_i_Instance_bcproc_desk.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.BoilerControlSystem_i_Instance_bcproc_desk.id).get
      return postContainer_.asInstanceOf[bc.BoilerControl.OperatorDesk_i_bcproc_desk_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.BoilerControlSystem_i_Instance_bcproc_desk.name}")
      halt(s"No post state recorded for ${Arch.BoilerControlSystem_i_Instance_bcproc_desk.name}")
    }
  }

  def check_concrete_outputs(isLevelBroken: Base_Types.Boolean,
                             isPumpBroken0: Base_Types.Boolean,
                             isPumpBroken1: Base_Types.Boolean,
                             isPumpBroken2: Base_Types.Boolean,
                             isPumpBroken3: Base_Types.Boolean,
                             isPumpControlBroken0: Base_Types.Boolean,
                             isPumpControlBroken1: Base_Types.Boolean,
                             isPumpControlBroken2: Base_Types.Boolean,
                             isPumpControlBroken3: Base_Types.Boolean,
                             isSteamBroken: Base_Types.Boolean,
                             api_levelFailAck: Option[art.Empty],
                             api_levelRepair: Option[art.Empty],
                             api_pumpControlFailAck0: Option[art.Empty],
                             api_pumpControlFailAck1: Option[art.Empty],
                             api_pumpControlFailAck2: Option[art.Empty],
                             api_pumpControlFailAck3: Option[art.Empty],
                             api_pumpControlRepair0: Option[art.Empty],
                             api_pumpControlRepair1: Option[art.Empty],
                             api_pumpControlRepair2: Option[art.Empty],
                             api_pumpControlRepair3: Option[art.Empty],
                             api_pumpFailAck0: Option[art.Empty],
                             api_pumpFailAck1: Option[art.Empty],
                             api_pumpFailAck2: Option[art.Empty],
                             api_pumpFailAck3: Option[art.Empty],
                             api_pumpRepair0: Option[art.Empty],
                             api_pumpRepair1: Option[art.Empty],
                             api_pumpRepair2: Option[art.Empty],
                             api_pumpRepair3: Option[art.Empty],
                             api_steamFailAck: Option[art.Empty],
                             api_steamRepair: Option[art.Empty],
                             api_stop: Option[art.Empty]): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_isLevelBroken = get_isLevelBroken()
    if (isLevelBroken != actual_isLevelBroken) {
      failureReasons = failureReasons :+ st"'isLevelBroken' did not match expected.  Expected: $isLevelBroken, Actual: $actual_isLevelBroken"
    }
    val actual_isPumpBroken0 = get_isPumpBroken0()
    if (isPumpBroken0 != actual_isPumpBroken0) {
      failureReasons = failureReasons :+ st"'isPumpBroken0' did not match expected.  Expected: $isPumpBroken0, Actual: $actual_isPumpBroken0"
    }
    val actual_isPumpBroken1 = get_isPumpBroken1()
    if (isPumpBroken1 != actual_isPumpBroken1) {
      failureReasons = failureReasons :+ st"'isPumpBroken1' did not match expected.  Expected: $isPumpBroken1, Actual: $actual_isPumpBroken1"
    }
    val actual_isPumpBroken2 = get_isPumpBroken2()
    if (isPumpBroken2 != actual_isPumpBroken2) {
      failureReasons = failureReasons :+ st"'isPumpBroken2' did not match expected.  Expected: $isPumpBroken2, Actual: $actual_isPumpBroken2"
    }
    val actual_isPumpBroken3 = get_isPumpBroken3()
    if (isPumpBroken3 != actual_isPumpBroken3) {
      failureReasons = failureReasons :+ st"'isPumpBroken3' did not match expected.  Expected: $isPumpBroken3, Actual: $actual_isPumpBroken3"
    }
    val actual_isPumpControlBroken0 = get_isPumpControlBroken0()
    if (isPumpControlBroken0 != actual_isPumpControlBroken0) {
      failureReasons = failureReasons :+ st"'isPumpControlBroken0' did not match expected.  Expected: $isPumpControlBroken0, Actual: $actual_isPumpControlBroken0"
    }
    val actual_isPumpControlBroken1 = get_isPumpControlBroken1()
    if (isPumpControlBroken1 != actual_isPumpControlBroken1) {
      failureReasons = failureReasons :+ st"'isPumpControlBroken1' did not match expected.  Expected: $isPumpControlBroken1, Actual: $actual_isPumpControlBroken1"
    }
    val actual_isPumpControlBroken2 = get_isPumpControlBroken2()
    if (isPumpControlBroken2 != actual_isPumpControlBroken2) {
      failureReasons = failureReasons :+ st"'isPumpControlBroken2' did not match expected.  Expected: $isPumpControlBroken2, Actual: $actual_isPumpControlBroken2"
    }
    val actual_isPumpControlBroken3 = get_isPumpControlBroken3()
    if (isPumpControlBroken3 != actual_isPumpControlBroken3) {
      failureReasons = failureReasons :+ st"'isPumpControlBroken3' did not match expected.  Expected: $isPumpControlBroken3, Actual: $actual_isPumpControlBroken3"
    }
    val actual_isSteamBroken = get_isSteamBroken()
    if (isSteamBroken != actual_isSteamBroken) {
      failureReasons = failureReasons :+ st"'isSteamBroken' did not match expected.  Expected: $isSteamBroken, Actual: $actual_isSteamBroken"
    }
    val actual_levelFailAck = get_api_levelFailAck()
    if (api_levelFailAck != actual_levelFailAck) {
      failureReasons = failureReasons :+ st"'levelFailAck' did not match expected.  Expected: $api_levelFailAck, Actual: $actual_levelFailAck"
    }
    val actual_levelRepair = get_api_levelRepair()
    if (api_levelRepair != actual_levelRepair) {
      failureReasons = failureReasons :+ st"'levelRepair' did not match expected.  Expected: $api_levelRepair, Actual: $actual_levelRepair"
    }
    val actual_pumpControlFailAck0 = get_api_pumpControlFailAck0()
    if (api_pumpControlFailAck0 != actual_pumpControlFailAck0) {
      failureReasons = failureReasons :+ st"'pumpControlFailAck0' did not match expected.  Expected: $api_pumpControlFailAck0, Actual: $actual_pumpControlFailAck0"
    }
    val actual_pumpControlFailAck1 = get_api_pumpControlFailAck1()
    if (api_pumpControlFailAck1 != actual_pumpControlFailAck1) {
      failureReasons = failureReasons :+ st"'pumpControlFailAck1' did not match expected.  Expected: $api_pumpControlFailAck1, Actual: $actual_pumpControlFailAck1"
    }
    val actual_pumpControlFailAck2 = get_api_pumpControlFailAck2()
    if (api_pumpControlFailAck2 != actual_pumpControlFailAck2) {
      failureReasons = failureReasons :+ st"'pumpControlFailAck2' did not match expected.  Expected: $api_pumpControlFailAck2, Actual: $actual_pumpControlFailAck2"
    }
    val actual_pumpControlFailAck3 = get_api_pumpControlFailAck3()
    if (api_pumpControlFailAck3 != actual_pumpControlFailAck3) {
      failureReasons = failureReasons :+ st"'pumpControlFailAck3' did not match expected.  Expected: $api_pumpControlFailAck3, Actual: $actual_pumpControlFailAck3"
    }
    val actual_pumpControlRepair0 = get_api_pumpControlRepair0()
    if (api_pumpControlRepair0 != actual_pumpControlRepair0) {
      failureReasons = failureReasons :+ st"'pumpControlRepair0' did not match expected.  Expected: $api_pumpControlRepair0, Actual: $actual_pumpControlRepair0"
    }
    val actual_pumpControlRepair1 = get_api_pumpControlRepair1()
    if (api_pumpControlRepair1 != actual_pumpControlRepair1) {
      failureReasons = failureReasons :+ st"'pumpControlRepair1' did not match expected.  Expected: $api_pumpControlRepair1, Actual: $actual_pumpControlRepair1"
    }
    val actual_pumpControlRepair2 = get_api_pumpControlRepair2()
    if (api_pumpControlRepair2 != actual_pumpControlRepair2) {
      failureReasons = failureReasons :+ st"'pumpControlRepair2' did not match expected.  Expected: $api_pumpControlRepair2, Actual: $actual_pumpControlRepair2"
    }
    val actual_pumpControlRepair3 = get_api_pumpControlRepair3()
    if (api_pumpControlRepair3 != actual_pumpControlRepair3) {
      failureReasons = failureReasons :+ st"'pumpControlRepair3' did not match expected.  Expected: $api_pumpControlRepair3, Actual: $actual_pumpControlRepair3"
    }
    val actual_pumpFailAck0 = get_api_pumpFailAck0()
    if (api_pumpFailAck0 != actual_pumpFailAck0) {
      failureReasons = failureReasons :+ st"'pumpFailAck0' did not match expected.  Expected: $api_pumpFailAck0, Actual: $actual_pumpFailAck0"
    }
    val actual_pumpFailAck1 = get_api_pumpFailAck1()
    if (api_pumpFailAck1 != actual_pumpFailAck1) {
      failureReasons = failureReasons :+ st"'pumpFailAck1' did not match expected.  Expected: $api_pumpFailAck1, Actual: $actual_pumpFailAck1"
    }
    val actual_pumpFailAck2 = get_api_pumpFailAck2()
    if (api_pumpFailAck2 != actual_pumpFailAck2) {
      failureReasons = failureReasons :+ st"'pumpFailAck2' did not match expected.  Expected: $api_pumpFailAck2, Actual: $actual_pumpFailAck2"
    }
    val actual_pumpFailAck3 = get_api_pumpFailAck3()
    if (api_pumpFailAck3 != actual_pumpFailAck3) {
      failureReasons = failureReasons :+ st"'pumpFailAck3' did not match expected.  Expected: $api_pumpFailAck3, Actual: $actual_pumpFailAck3"
    }
    val actual_pumpRepair0 = get_api_pumpRepair0()
    if (api_pumpRepair0 != actual_pumpRepair0) {
      failureReasons = failureReasons :+ st"'pumpRepair0' did not match expected.  Expected: $api_pumpRepair0, Actual: $actual_pumpRepair0"
    }
    val actual_pumpRepair1 = get_api_pumpRepair1()
    if (api_pumpRepair1 != actual_pumpRepair1) {
      failureReasons = failureReasons :+ st"'pumpRepair1' did not match expected.  Expected: $api_pumpRepair1, Actual: $actual_pumpRepair1"
    }
    val actual_pumpRepair2 = get_api_pumpRepair2()
    if (api_pumpRepair2 != actual_pumpRepair2) {
      failureReasons = failureReasons :+ st"'pumpRepair2' did not match expected.  Expected: $api_pumpRepair2, Actual: $actual_pumpRepair2"
    }
    val actual_pumpRepair3 = get_api_pumpRepair3()
    if (api_pumpRepair3 != actual_pumpRepair3) {
      failureReasons = failureReasons :+ st"'pumpRepair3' did not match expected.  Expected: $api_pumpRepair3, Actual: $actual_pumpRepair3"
    }
    val actual_steamFailAck = get_api_steamFailAck()
    if (api_steamFailAck != actual_steamFailAck) {
      failureReasons = failureReasons :+ st"'steamFailAck' did not match expected.  Expected: $api_steamFailAck, Actual: $actual_steamFailAck"
    }
    val actual_steamRepair = get_api_steamRepair()
    if (api_steamRepair != actual_steamRepair) {
      failureReasons = failureReasons :+ st"'steamRepair' did not match expected.  Expected: $api_steamRepair, Actual: $actual_steamRepair"
    }
    val actual_stop = get_api_stop()
    if (api_stop != actual_stop) {
      failureReasons = failureReasons :+ st"'stop' did not match expected.  Expected: $api_stop, Actual: $actual_stop"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  // getter for state variable
  def get_isLevelBroken(): Base_Types.Boolean = {
    return OperatorDesk_i_bcproc_desk.isLevelBroken
  }

  // getter for state variable
  def get_isPumpBroken0(): Base_Types.Boolean = {
    return OperatorDesk_i_bcproc_desk.isPumpBroken0
  }

  // getter for state variable
  def get_isPumpBroken1(): Base_Types.Boolean = {
    return OperatorDesk_i_bcproc_desk.isPumpBroken1
  }

  // getter for state variable
  def get_isPumpBroken2(): Base_Types.Boolean = {
    return OperatorDesk_i_bcproc_desk.isPumpBroken2
  }

  // getter for state variable
  def get_isPumpBroken3(): Base_Types.Boolean = {
    return OperatorDesk_i_bcproc_desk.isPumpBroken3
  }

  // getter for state variable
  def get_isPumpControlBroken0(): Base_Types.Boolean = {
    return OperatorDesk_i_bcproc_desk.isPumpControlBroken0
  }

  // getter for state variable
  def get_isPumpControlBroken1(): Base_Types.Boolean = {
    return OperatorDesk_i_bcproc_desk.isPumpControlBroken1
  }

  // getter for state variable
  def get_isPumpControlBroken2(): Base_Types.Boolean = {
    return OperatorDesk_i_bcproc_desk.isPumpControlBroken2
  }

  // getter for state variable
  def get_isPumpControlBroken3(): Base_Types.Boolean = {
    return OperatorDesk_i_bcproc_desk.isPumpControlBroken3
  }

  // getter for state variable
  def get_isSteamBroken(): Base_Types.Boolean = {
    return OperatorDesk_i_bcproc_desk.isSteamBroken
  }

  def get_api_levelFailAck(): Option[art.Empty] = {
    return fetchContainer().api_levelFailAck
  }

  def get_api_levelRepair(): Option[art.Empty] = {
    return fetchContainer().api_levelRepair
  }

  def get_api_pumpControlFailAck0(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlFailAck0
  }

  def get_api_pumpControlFailAck1(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlFailAck1
  }

  def get_api_pumpControlFailAck2(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlFailAck2
  }

  def get_api_pumpControlFailAck3(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlFailAck3
  }

  def get_api_pumpControlRepair0(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlRepair0
  }

  def get_api_pumpControlRepair1(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlRepair1
  }

  def get_api_pumpControlRepair2(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlRepair2
  }

  def get_api_pumpControlRepair3(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlRepair3
  }

  def get_api_pumpFailAck0(): Option[art.Empty] = {
    return fetchContainer().api_pumpFailAck0
  }

  def get_api_pumpFailAck1(): Option[art.Empty] = {
    return fetchContainer().api_pumpFailAck1
  }

  def get_api_pumpFailAck2(): Option[art.Empty] = {
    return fetchContainer().api_pumpFailAck2
  }

  def get_api_pumpFailAck3(): Option[art.Empty] = {
    return fetchContainer().api_pumpFailAck3
  }

  def get_api_pumpRepair0(): Option[art.Empty] = {
    return fetchContainer().api_pumpRepair0
  }

  def get_api_pumpRepair1(): Option[art.Empty] = {
    return fetchContainer().api_pumpRepair1
  }

  def get_api_pumpRepair2(): Option[art.Empty] = {
    return fetchContainer().api_pumpRepair2
  }

  def get_api_pumpRepair3(): Option[art.Empty] = {
    return fetchContainer().api_pumpRepair3
  }

  def get_api_steamFailAck(): Option[art.Empty] = {
    return fetchContainer().api_steamFailAck
  }

  def get_api_steamRepair(): Option[art.Empty] = {
    return fetchContainer().api_steamRepair
  }

  def get_api_stop(): Option[art.Empty] = {
    return fetchContainer().api_stop
  }
}