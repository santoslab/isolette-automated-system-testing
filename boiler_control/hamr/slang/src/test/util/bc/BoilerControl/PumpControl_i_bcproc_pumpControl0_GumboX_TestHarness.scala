// #Sireum

package bc.BoilerControl

import org.sireum._
import bc._
import bc.GumboXUtil.GumboXResult

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait PumpControl_i_bcproc_pumpControl0_GumboX_TestHarness extends PumpControl_i_bcproc_pumpControl0_TestApi {
  def verbose: B

  /** Contract-based test harness for the initialise entry point
    */
  def testInitialiseCB(
      ): GumboXResult.Type = {

    if (verbose) {
      println(st"""Pre State Values:
                  """.render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testInitialise()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_ready: Option[art.Empty] = get_ready()
    val api_pumpFlow: Option[Base_Types.Boolean] = get_pumpFlow()
    val api_pumpOpen: Option[Base_Types.Boolean] = get_pumpOpen()
    val isPumpOpen: Base_Types.Boolean = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.isPumpOpen
    val isPumpFlow: Base_Types.Boolean = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.isPumpFlow
    val pumpNumber: Base_Types.Integer = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.pumpNumber

    if (verbose) {
      println(st"""Post State Values:
                  |  api_ready = ${api_ready.string}
                  |  api_pumpFlow = ${api_pumpFlow.string}
                  |  api_pumpOpen = ${api_pumpOpen.string}
                  |  isPumpOpen = ${isPumpOpen.string}
                  |  isPumpFlow = ${isPumpFlow.string}
                  |  pumpNumber = ${pumpNumber.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0_GumboX.inititialize_IEP_Post(isPumpFlow, isPumpOpen, pumpNumber, api_ready, api_pumpFlow, api_pumpOpen)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }

  def testComputeCBJ(json: String): GumboXResult.Type = {
    bc.JSON.toBoilerControlPumpControl_i_bcproc_pumpControl0_PreState_Container(json) match {
      case Either.Left(o) => return testComputeCBV(o)
      case Either.Right(msg) => halt(msg.string)
    }
  }

  def testComputeCBV(o: PumpControl_i_bcproc_pumpControl0_PreState_Container): GumboXResult.Type = {
    return testComputeCB(o.api_programReady, o.api_opMode, o.api_openPump)
  }

  /** Contract-based test harness for the compute entry point
    * @param api_programReady incoming event port
    * @param api_opMode incoming event data port
    * @param api_openPump incoming event data port
    */
  def testComputeCB(
      api_programReady: Option[art.Empty],
      api_opMode: Option[BoilerControl.OpMode.Type],
      api_openPump: Option[Base_Types.Boolean]): GumboXResult.Type = {

    // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved from the component state
    val In_isPumpOpen: Base_Types.Boolean = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.isPumpOpen
    val In_isPumpFlow: Base_Types.Boolean = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.isPumpFlow
    val In_pumpNumber: Base_Types.Integer = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.pumpNumber

    // [CheckPre]: check/filter based on pre-condition.
    //   pumpControl0's compute entry point does not have top level assume clauses

    // [PutInPorts]: put values on the input ports
    if (api_programReady.nonEmpty) {
      put_programReady()
    }
    if (api_opMode.nonEmpty) {
      put_opMode(api_opMode.get)
    }
    if (api_openPump.nonEmpty) {
      put_openPump(api_openPump.get)
    }

    if (verbose) {
      println(st"""Pre State Values:
                  |  In_isPumpFlow = ${In_isPumpFlow.string}
                  |  In_isPumpOpen = ${In_isPumpOpen.string}
                  |  In_pumpNumber = ${In_pumpNumber.string}
                  |  api_programReady = ${api_programReady.string}
                  |  api_opMode = ${api_opMode.string}
                  |  api_openPump = ${api_openPump.string}""".render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_ready: Option[art.Empty] = get_ready()
    val api_pumpFlow: Option[Base_Types.Boolean] = get_pumpFlow()
    val api_pumpOpen: Option[Base_Types.Boolean] = get_pumpOpen()
    val isPumpOpen: Base_Types.Boolean = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.isPumpOpen
    val isPumpFlow: Base_Types.Boolean = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.isPumpFlow
    val pumpNumber: Base_Types.Integer = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.pumpNumber

    if (verbose) {
      println(st"""Post State Values:
                  |  api_ready = ${api_ready.string}
                  |  api_pumpFlow = ${api_pumpFlow.string}
                  |  api_pumpOpen = ${api_pumpOpen.string}
                  |  isPumpOpen = ${isPumpOpen.string}
                  |  isPumpFlow = ${isPumpFlow.string}
                  |  pumpNumber = ${pumpNumber.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0_GumboX.compute_CEP_Post(In_isPumpFlow, In_isPumpOpen, In_pumpNumber, isPumpFlow, isPumpOpen, pumpNumber, api_programReady, api_openPump, api_ready, api_pumpFlow, api_pumpOpen)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }

  def testComputeCBwLJ(json: String): GumboXResult.Type = {
    bc.JSON.toBoilerControlPumpControl_i_bcproc_pumpControl0_PreState_Container_PS(json) match {
      case Either.Left(o) => return testComputeCBwLV(o)
      case Either.Right(msg) => halt(msg.string)
    }
  }

  def testComputeCBwLV(o: PumpControl_i_bcproc_pumpControl0_PreState_Container_PS): GumboXResult.Type = {
    return testComputeCBwL(o.In_isPumpFlow, o.In_isPumpOpen, o.In_pumpNumber, o.api_programReady, o.api_opMode, o.api_openPump)
  }

  /** Contract-based test harness for the compute entry point
    * @param In_isPumpFlow pre-state state variable
    * @param In_isPumpOpen pre-state state variable
    * @param In_pumpNumber pre-state state variable
    * @param api_programReady incoming event port
    * @param api_opMode incoming event data port
    * @param api_openPump incoming event data port
    */
  def testComputeCBwL(
      In_isPumpFlow: Base_Types.Boolean,
      In_isPumpOpen: Base_Types.Boolean,
      In_pumpNumber: Base_Types.Integer,
      api_programReady: Option[art.Empty],
      api_opMode: Option[BoilerControl.OpMode.Type],
      api_openPump: Option[Base_Types.Boolean]): GumboXResult.Type = {

    // [CheckPre]: check/filter based on pre-condition.
    //   pumpControl0's compute entry point does not have top level assume clauses

    // [PutInPorts]: put values on the input ports
    if (api_programReady.nonEmpty) {
      put_programReady()
    }
    if (api_opMode.nonEmpty) {
      put_opMode(api_opMode.get)
    }
    if (api_openPump.nonEmpty) {
      put_openPump(api_openPump.get)
    }

    // [SetInStateVars]: set the pre-state values of state variables
    bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.isPumpOpen = In_isPumpOpen
    bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.isPumpFlow = In_isPumpFlow
    bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.pumpNumber = In_pumpNumber

    if (verbose) {
      println(st"""Pre State Values:
                  |  In_isPumpFlow = ${In_isPumpFlow.string}
                  |  In_isPumpOpen = ${In_isPumpOpen.string}
                  |  In_pumpNumber = ${In_pumpNumber.string}
                  |  api_programReady = ${api_programReady.string}
                  |  api_opMode = ${api_opMode.string}
                  |  api_openPump = ${api_openPump.string}""".render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_ready: Option[art.Empty] = get_ready()
    val api_pumpFlow: Option[Base_Types.Boolean] = get_pumpFlow()
    val api_pumpOpen: Option[Base_Types.Boolean] = get_pumpOpen()
    val isPumpOpen: Base_Types.Boolean = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.isPumpOpen
    val isPumpFlow: Base_Types.Boolean = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.isPumpFlow
    val pumpNumber: Base_Types.Integer = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0.pumpNumber

    if (verbose) {
      println(st"""Post State Values:
                  |  api_ready = ${api_ready.string}
                  |  api_pumpFlow = ${api_pumpFlow.string}
                  |  api_pumpOpen = ${api_pumpOpen.string}
                  |  isPumpOpen = ${isPumpOpen.string}
                  |  isPumpFlow = ${isPumpFlow.string}
                  |  pumpNumber = ${pumpNumber.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = bc.BoilerControl.PumpControl_i_bcproc_pumpControl0_GumboX.compute_CEP_Post(In_isPumpFlow, In_isPumpOpen, In_pumpNumber, isPumpFlow, isPumpOpen, pumpNumber, api_programReady, api_openPump, api_ready, api_pumpFlow, api_pumpOpen)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }
}
