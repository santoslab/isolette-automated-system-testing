// #Sireum

package bc.BoilerControl

import org.sireum._
import art._
import bc.SystemTestSuiteSlang.runtimeMonitorStream
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object BoilerControl_i_bcproc_control_SystemTestAPI {
  /** helper method to set the values of all incoming ports and state variables
    * @param In_C pre-state state variable
    * @param In_M1 pre-state state variable
    * @param In_M2 pre-state state variable
    * @param In_N1 pre-state state variable
    * @param In_N2 pre-state state variable
    * @param In_P pre-state state variable
    * @param In_U1 pre-state state variable
    * @param In_U2 pre-state state variable
    * @param In_W pre-state state variable
    * @param In_hasBoilerSentWaiting pre-state state variable
    * @param In_isPump0Failing pre-state state variable
    * @param In_isPump1Failing pre-state state variable
    * @param In_isPump2Failing pre-state state variable
    * @param In_isPump3Failing pre-state state variable
    * @param In_isSteamMeterFailing pre-state state variable
    * @param In_isWaterMeterFailing pre-state state variable
    * @param In_mode pre-state state variable
    * @param In_p0 pre-state state variable
    * @param In_p1 pre-state state variable
    * @param In_p2 pre-state state variable
    * @param In_p3 pre-state state variable
    * @param In_q pre-state state variable
    * @param In_qa1 pre-state state variable
    * @param In_qa2 pre-state state variable
    * @param In_qc1 pre-state state variable
    * @param In_qc2 pre-state state variable
    * @param In_shouldUpdatePumps pre-state state variable
    * @param In_transmissionFailure pre-state state variable
    * @param In_v_steamRate pre-state state variable
    * @param api_boilerReady incoming event port
    * @param api_boilerWaiting incoming event port
    * @param api_levelFailAck incoming event port
    * @param api_levelRepair incoming event port
    * @param api_pumpControlFailAck0 incoming event port
    * @param api_pumpControlFailAck1 incoming event port
    * @param api_pumpControlFailAck2 incoming event port
    * @param api_pumpControlFailAck3 incoming event port
    * @param api_pumpControlReady0 incoming event port
    * @param api_pumpControlReady1 incoming event port
    * @param api_pumpControlReady2 incoming event port
    * @param api_pumpControlReady3 incoming event port
    * @param api_pumpControlRepair0 incoming event port
    * @param api_pumpControlRepair1 incoming event port
    * @param api_pumpControlRepair2 incoming event port
    * @param api_pumpControlRepair3 incoming event port
    * @param api_pumpFailAck0 incoming event port
    * @param api_pumpFailAck1 incoming event port
    * @param api_pumpFailAck2 incoming event port
    * @param api_pumpFailAck3 incoming event port
    * @param api_pumpRepair0 incoming event port
    * @param api_pumpRepair1 incoming event port
    * @param api_pumpRepair2 incoming event port
    * @param api_pumpRepair3 incoming event port
    * @param api_steamFailAck incoming event port
    * @param api_steamMeterReady incoming event port
    * @param api_steamRepair incoming event port
    * @param api_stop incoming event port
    * @param api_waterMeterReady incoming event port
    * @param api_pumpFlow0 incoming event data port
    * @param api_pumpFlow1 incoming event data port
    * @param api_pumpFlow2 incoming event data port
    * @param api_pumpFlow3 incoming event data port
    * @param api_pumpOpen0 incoming event data port
    * @param api_pumpOpen1 incoming event data port
    * @param api_pumpOpen2 incoming event data port
    * @param api_pumpOpen3 incoming event data port
    * @param api_steamRate incoming event data port
    * @param api_waterLevel incoming event data port
    */
  def put_concrete_inputs(In_C: Base_Types.Float_32,
                          In_M1: Base_Types.Float_32,
                          In_M2: Base_Types.Float_32,
                          In_N1: Base_Types.Float_32,
                          In_N2: Base_Types.Float_32,
                          In_P: Base_Types.Float_32,
                          In_U1: Base_Types.Float_32,
                          In_U2: Base_Types.Float_32,
                          In_W: Base_Types.Float_32,
                          In_hasBoilerSentWaiting: Base_Types.Boolean,
                          In_isPump0Failing: Base_Types.Boolean,
                          In_isPump1Failing: Base_Types.Boolean,
                          In_isPump2Failing: Base_Types.Boolean,
                          In_isPump3Failing: Base_Types.Boolean,
                          In_isSteamMeterFailing: Base_Types.Boolean,
                          In_isWaterMeterFailing: Base_Types.Boolean,
                          In_mode: BoilerControl.OpMode.Type,
                          In_p0: Base_Types.Float_32,
                          In_p1: Base_Types.Float_32,
                          In_p2: Base_Types.Float_32,
                          In_p3: Base_Types.Float_32,
                          In_q: Base_Types.Float_32,
                          In_qa1: Base_Types.Float_32,
                          In_qa2: Base_Types.Float_32,
                          In_qc1: Base_Types.Float_32,
                          In_qc2: Base_Types.Float_32,
                          In_shouldUpdatePumps: Base_Types.Boolean,
                          In_transmissionFailure: Base_Types.Boolean,
                          In_v_steamRate: Base_Types.Float_32,
                          api_boilerReady: Option[art.Empty],
                          api_boilerWaiting: Option[art.Empty],
                          api_levelFailAck: Option[art.Empty],
                          api_levelRepair: Option[art.Empty],
                          api_pumpControlFailAck0: Option[art.Empty],
                          api_pumpControlFailAck1: Option[art.Empty],
                          api_pumpControlFailAck2: Option[art.Empty],
                          api_pumpControlFailAck3: Option[art.Empty],
                          api_pumpControlReady0: Option[art.Empty],
                          api_pumpControlReady1: Option[art.Empty],
                          api_pumpControlReady2: Option[art.Empty],
                          api_pumpControlReady3: Option[art.Empty],
                          api_pumpControlRepair0: Option[art.Empty],
                          api_pumpControlRepair1: Option[art.Empty],
                          api_pumpControlRepair2: Option[art.Empty],
                          api_pumpControlRepair3: Option[art.Empty],
                          api_pumpFailAck0: Option[art.Empty],
                          api_pumpFailAck1: Option[art.Empty],
                          api_pumpFailAck2: Option[art.Empty],
                          api_pumpFailAck3: Option[art.Empty],
                          api_pumpRepair0: Option[art.Empty],
                          api_pumpRepair1: Option[art.Empty],
                          api_pumpRepair2: Option[art.Empty],
                          api_pumpRepair3: Option[art.Empty],
                          api_steamFailAck: Option[art.Empty],
                          api_steamMeterReady: Option[art.Empty],
                          api_steamRepair: Option[art.Empty],
                          api_stop: Option[art.Empty],
                          api_waterMeterReady: Option[art.Empty],
                          api_pumpFlow0: Option[Base_Types.Boolean],
                          api_pumpFlow1: Option[Base_Types.Boolean],
                          api_pumpFlow2: Option[Base_Types.Boolean],
                          api_pumpFlow3: Option[Base_Types.Boolean],
                          api_pumpOpen0: Option[Base_Types.Boolean],
                          api_pumpOpen1: Option[Base_Types.Boolean],
                          api_pumpOpen2: Option[Base_Types.Boolean],
                          api_pumpOpen3: Option[Base_Types.Boolean],
                          api_steamRate: Option[Base_Types.Float_32],
                          api_waterLevel: Option[Base_Types.Float_32]): Unit = {
    put_In_C(In_C)
    put_In_M1(In_M1)
    put_In_M2(In_M2)
    put_In_N1(In_N1)
    put_In_N2(In_N2)
    put_In_P(In_P)
    put_In_U1(In_U1)
    put_In_U2(In_U2)
    put_In_W(In_W)
    put_In_hasBoilerSentWaiting(In_hasBoilerSentWaiting)
    put_In_isPump0Failing(In_isPump0Failing)
    put_In_isPump1Failing(In_isPump1Failing)
    put_In_isPump2Failing(In_isPump2Failing)
    put_In_isPump3Failing(In_isPump3Failing)
    put_In_isSteamMeterFailing(In_isSteamMeterFailing)
    put_In_isWaterMeterFailing(In_isWaterMeterFailing)
    put_In_mode(In_mode)
    put_In_p0(In_p0)
    put_In_p1(In_p1)
    put_In_p2(In_p2)
    put_In_p3(In_p3)
    put_In_q(In_q)
    put_In_qa1(In_qa1)
    put_In_qa2(In_qa2)
    put_In_qc1(In_qc1)
    put_In_qc2(In_qc2)
    put_In_shouldUpdatePumps(In_shouldUpdatePumps)
    put_In_transmissionFailure(In_transmissionFailure)
    put_In_v_steamRate(In_v_steamRate)
    put_boilerReady(api_boilerReady)
    put_boilerWaiting(api_boilerWaiting)
    put_levelFailAck(api_levelFailAck)
    put_levelRepair(api_levelRepair)
    put_pumpControlFailAck0(api_pumpControlFailAck0)
    put_pumpControlFailAck1(api_pumpControlFailAck1)
    put_pumpControlFailAck2(api_pumpControlFailAck2)
    put_pumpControlFailAck3(api_pumpControlFailAck3)
    put_pumpControlReady0(api_pumpControlReady0)
    put_pumpControlReady1(api_pumpControlReady1)
    put_pumpControlReady2(api_pumpControlReady2)
    put_pumpControlReady3(api_pumpControlReady3)
    put_pumpControlRepair0(api_pumpControlRepair0)
    put_pumpControlRepair1(api_pumpControlRepair1)
    put_pumpControlRepair2(api_pumpControlRepair2)
    put_pumpControlRepair3(api_pumpControlRepair3)
    put_pumpFailAck0(api_pumpFailAck0)
    put_pumpFailAck1(api_pumpFailAck1)
    put_pumpFailAck2(api_pumpFailAck2)
    put_pumpFailAck3(api_pumpFailAck3)
    put_pumpRepair0(api_pumpRepair0)
    put_pumpRepair1(api_pumpRepair1)
    put_pumpRepair2(api_pumpRepair2)
    put_pumpRepair3(api_pumpRepair3)
    put_steamFailAck(api_steamFailAck)
    put_steamMeterReady(api_steamMeterReady)
    put_steamRepair(api_steamRepair)
    put_stop(api_stop)
    put_waterMeterReady(api_waterMeterReady)
    put_pumpFlow0(api_pumpFlow0)
    put_pumpFlow1(api_pumpFlow1)
    put_pumpFlow2(api_pumpFlow2)
    put_pumpFlow3(api_pumpFlow3)
    put_pumpOpen0(api_pumpOpen0)
    put_pumpOpen1(api_pumpOpen1)
    put_pumpOpen2(api_pumpOpen2)
    put_pumpOpen3(api_pumpOpen3)
    put_steamRate(api_steamRate)
    put_waterLevel(api_waterLevel)
  }

  // setter for state variable
  def put_In_C(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.C = value
  }

  // setter for state variable
  def put_In_M1(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.M1 = value
  }

  // setter for state variable
  def put_In_M2(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.M2 = value
  }

  // setter for state variable
  def put_In_N1(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.N1 = value
  }

  // setter for state variable
  def put_In_N2(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.N2 = value
  }

  // setter for state variable
  def put_In_P(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.P = value
  }

  // setter for state variable
  def put_In_U1(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.U1 = value
  }

  // setter for state variable
  def put_In_U2(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.U2 = value
  }

  // setter for state variable
  def put_In_W(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.W = value
  }

  // setter for state variable
  def put_In_hasBoilerSentWaiting(value: Base_Types.Boolean): Unit = {
    BoilerControl_i_bcproc_control.hasBoilerSentWaiting = value
  }

  // setter for state variable
  def put_In_isPump0Failing(value: Base_Types.Boolean): Unit = {
    BoilerControl_i_bcproc_control.isPump0Failing = value
  }

  // setter for state variable
  def put_In_isPump1Failing(value: Base_Types.Boolean): Unit = {
    BoilerControl_i_bcproc_control.isPump1Failing = value
  }

  // setter for state variable
  def put_In_isPump2Failing(value: Base_Types.Boolean): Unit = {
    BoilerControl_i_bcproc_control.isPump2Failing = value
  }

  // setter for state variable
  def put_In_isPump3Failing(value: Base_Types.Boolean): Unit = {
    BoilerControl_i_bcproc_control.isPump3Failing = value
  }

  // setter for state variable
  def put_In_isSteamMeterFailing(value: Base_Types.Boolean): Unit = {
    BoilerControl_i_bcproc_control.isSteamMeterFailing = value
  }

  // setter for state variable
  def put_In_isWaterMeterFailing(value: Base_Types.Boolean): Unit = {
    BoilerControl_i_bcproc_control.isWaterMeterFailing = value
  }

  // setter for state variable
  def put_In_mode(value: BoilerControl.OpMode.Type): Unit = {
    BoilerControl_i_bcproc_control.mode = value
  }

  // setter for state variable
  def put_In_p0(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.p0 = value
  }

  // setter for state variable
  def put_In_p1(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.p1 = value
  }

  // setter for state variable
  def put_In_p2(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.p2 = value
  }

  // setter for state variable
  def put_In_p3(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.p3 = value
  }

  // setter for state variable
  def put_In_q(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.q = value
  }

  // setter for state variable
  def put_In_qa1(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.qa1 = value
  }

  // setter for state variable
  def put_In_qa2(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.qa2 = value
  }

  // setter for state variable
  def put_In_qc1(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.qc1 = value
  }

  // setter for state variable
  def put_In_qc2(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.qc2 = value
  }

  // setter for state variable
  def put_In_shouldUpdatePumps(value: Base_Types.Boolean): Unit = {
    BoilerControl_i_bcproc_control.shouldUpdatePumps = value
  }

  // setter for state variable
  def put_In_transmissionFailure(value: Base_Types.Boolean): Unit = {
    BoilerControl_i_bcproc_control.transmissionFailure = value
  }

  // setter for state variable
  def put_In_v_steamRate(value: Base_Types.Float_32): Unit = {
    BoilerControl_i_bcproc_control.v_steamRate = value
  }

  // setter for incoming event  port
  def put_boilerReady(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.boilerReady_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_boilerWaiting(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.boilerWaiting_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_levelFailAck(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.levelFailAck_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_levelRepair(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.levelRepair_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlFailAck0(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlFailAck0_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlFailAck1(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlFailAck1_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlFailAck2(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlFailAck2_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlFailAck3(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlFailAck3_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlReady0(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlReady0_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlReady1(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlReady1_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlReady2(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlReady2_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlReady3(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlReady3_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlRepair0(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlRepair0_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlRepair1(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlRepair1_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlRepair2(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlRepair2_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpControlRepair3(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpControlRepair3_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpFailAck0(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpFailAck0_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpFailAck1(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpFailAck1_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpFailAck2(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpFailAck2_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpFailAck3(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpFailAck3_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpRepair0(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpRepair0_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpRepair1(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpRepair1_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpRepair2(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpRepair2_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_pumpRepair3(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpRepair3_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_steamFailAck(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.steamFailAck_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_steamMeterReady(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.steamMeterReady_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_steamRepair(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.steamRepair_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_stop(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.stop_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_waterMeterReady(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.waterMeterReady_Id, v)
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_pumpFlow0(value: Option[Base_Types.Boolean]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpFlow0_Id, Base_Types.Boolean_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_pumpFlow1(value: Option[Base_Types.Boolean]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpFlow1_Id, Base_Types.Boolean_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_pumpFlow2(value: Option[Base_Types.Boolean]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpFlow2_Id, Base_Types.Boolean_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_pumpFlow3(value: Option[Base_Types.Boolean]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpFlow3_Id, Base_Types.Boolean_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_pumpOpen0(value: Option[Base_Types.Boolean]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpOpen0_Id, Base_Types.Boolean_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_pumpOpen1(value: Option[Base_Types.Boolean]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpOpen1_Id, Base_Types.Boolean_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_pumpOpen2(value: Option[Base_Types.Boolean]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpOpen2_Id, Base_Types.Boolean_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_pumpOpen3(value: Option[Base_Types.Boolean]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.pumpOpen3_Id, Base_Types.Boolean_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_steamRate(value: Option[Base_Types.Float_32]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.steamRate_Id, Base_Types.Float_32_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_waterLevel(value: Option[Base_Types.Float_32]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_control.operational_api.waterLevel_Id, Base_Types.Float_32_Payload(v))
      case _ =>
    }
  }

  def fetchContainer(): bc.BoilerControl.BoilerControl_i_bcproc_control_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.BoilerControlSystem_i_Instance_bcproc_control.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.BoilerControlSystem_i_Instance_bcproc_control.id).get
      return postContainer_.asInstanceOf[bc.BoilerControl.BoilerControl_i_bcproc_control_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.BoilerControlSystem_i_Instance_bcproc_control.name}")
      halt(s"No post state recorded for ${Arch.BoilerControlSystem_i_Instance_bcproc_control.name}")
    }
  }

  def check_concrete_outputs(C: Base_Types.Float_32,
                             M1: Base_Types.Float_32,
                             M2: Base_Types.Float_32,
                             N1: Base_Types.Float_32,
                             N2: Base_Types.Float_32,
                             P: Base_Types.Float_32,
                             U1: Base_Types.Float_32,
                             U2: Base_Types.Float_32,
                             W: Base_Types.Float_32,
                             hasBoilerSentWaiting: Base_Types.Boolean,
                             isPump0Failing: Base_Types.Boolean,
                             isPump1Failing: Base_Types.Boolean,
                             isPump2Failing: Base_Types.Boolean,
                             isPump3Failing: Base_Types.Boolean,
                             isSteamMeterFailing: Base_Types.Boolean,
                             isWaterMeterFailing: Base_Types.Boolean,
                             mode: BoilerControl.OpMode.Type,
                             p0: Base_Types.Float_32,
                             p1: Base_Types.Float_32,
                             p2: Base_Types.Float_32,
                             p3: Base_Types.Float_32,
                             q: Base_Types.Float_32,
                             qa1: Base_Types.Float_32,
                             qa2: Base_Types.Float_32,
                             qc1: Base_Types.Float_32,
                             qc2: Base_Types.Float_32,
                             shouldUpdatePumps: Base_Types.Boolean,
                             transmissionFailure: Base_Types.Boolean,
                             v_steamRate: Base_Types.Float_32,
                             api_levelFail: Option[art.Empty],
                             api_levelRepairAck: Option[art.Empty],
                             api_pumpControlFail0: Option[art.Empty],
                             api_pumpControlFail1: Option[art.Empty],
                             api_pumpControlFail2: Option[art.Empty],
                             api_pumpControlFail3: Option[art.Empty],
                             api_pumpControlRepairAck0: Option[art.Empty],
                             api_pumpControlRepairAck1: Option[art.Empty],
                             api_pumpControlRepairAck2: Option[art.Empty],
                             api_pumpControlRepairAck3: Option[art.Empty],
                             api_pumpFail0: Option[art.Empty],
                             api_pumpFail1: Option[art.Empty],
                             api_pumpFail2: Option[art.Empty],
                             api_pumpFail3: Option[art.Empty],
                             api_pumpRepairAck0: Option[art.Empty],
                             api_pumpRepairAck1: Option[art.Empty],
                             api_pumpRepairAck2: Option[art.Empty],
                             api_pumpRepairAck3: Option[art.Empty],
                             api_ready: Option[art.Empty],
                             api_steamFail: Option[art.Empty],
                             api_steamRepairAck: Option[art.Empty],
                             api_valve: Option[art.Empty],
                             api_opMode: Option[BoilerControl.OpMode.Type],
                             api_openPump0: Option[Base_Types.Boolean],
                             api_openPump1: Option[Base_Types.Boolean],
                             api_openPump2: Option[Base_Types.Boolean],
                             api_openPump3: Option[Base_Types.Boolean]): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_C = get_C()
    if (C != actual_C) {
      failureReasons = failureReasons :+ st"'C' did not match expected.  Expected: $C, Actual: $actual_C"
    }
    val actual_M1 = get_M1()
    if (M1 != actual_M1) {
      failureReasons = failureReasons :+ st"'M1' did not match expected.  Expected: $M1, Actual: $actual_M1"
    }
    val actual_M2 = get_M2()
    if (M2 != actual_M2) {
      failureReasons = failureReasons :+ st"'M2' did not match expected.  Expected: $M2, Actual: $actual_M2"
    }
    val actual_N1 = get_N1()
    if (N1 != actual_N1) {
      failureReasons = failureReasons :+ st"'N1' did not match expected.  Expected: $N1, Actual: $actual_N1"
    }
    val actual_N2 = get_N2()
    if (N2 != actual_N2) {
      failureReasons = failureReasons :+ st"'N2' did not match expected.  Expected: $N2, Actual: $actual_N2"
    }
    val actual_P = get_P()
    if (P != actual_P) {
      failureReasons = failureReasons :+ st"'P' did not match expected.  Expected: $P, Actual: $actual_P"
    }
    val actual_U1 = get_U1()
    if (U1 != actual_U1) {
      failureReasons = failureReasons :+ st"'U1' did not match expected.  Expected: $U1, Actual: $actual_U1"
    }
    val actual_U2 = get_U2()
    if (U2 != actual_U2) {
      failureReasons = failureReasons :+ st"'U2' did not match expected.  Expected: $U2, Actual: $actual_U2"
    }
    val actual_W = get_W()
    if (W != actual_W) {
      failureReasons = failureReasons :+ st"'W' did not match expected.  Expected: $W, Actual: $actual_W"
    }
    val actual_hasBoilerSentWaiting = get_hasBoilerSentWaiting()
    if (hasBoilerSentWaiting != actual_hasBoilerSentWaiting) {
      failureReasons = failureReasons :+ st"'hasBoilerSentWaiting' did not match expected.  Expected: $hasBoilerSentWaiting, Actual: $actual_hasBoilerSentWaiting"
    }
    val actual_isPump0Failing = get_isPump0Failing()
    if (isPump0Failing != actual_isPump0Failing) {
      failureReasons = failureReasons :+ st"'isPump0Failing' did not match expected.  Expected: $isPump0Failing, Actual: $actual_isPump0Failing"
    }
    val actual_isPump1Failing = get_isPump1Failing()
    if (isPump1Failing != actual_isPump1Failing) {
      failureReasons = failureReasons :+ st"'isPump1Failing' did not match expected.  Expected: $isPump1Failing, Actual: $actual_isPump1Failing"
    }
    val actual_isPump2Failing = get_isPump2Failing()
    if (isPump2Failing != actual_isPump2Failing) {
      failureReasons = failureReasons :+ st"'isPump2Failing' did not match expected.  Expected: $isPump2Failing, Actual: $actual_isPump2Failing"
    }
    val actual_isPump3Failing = get_isPump3Failing()
    if (isPump3Failing != actual_isPump3Failing) {
      failureReasons = failureReasons :+ st"'isPump3Failing' did not match expected.  Expected: $isPump3Failing, Actual: $actual_isPump3Failing"
    }
    val actual_isSteamMeterFailing = get_isSteamMeterFailing()
    if (isSteamMeterFailing != actual_isSteamMeterFailing) {
      failureReasons = failureReasons :+ st"'isSteamMeterFailing' did not match expected.  Expected: $isSteamMeterFailing, Actual: $actual_isSteamMeterFailing"
    }
    val actual_isWaterMeterFailing = get_isWaterMeterFailing()
    if (isWaterMeterFailing != actual_isWaterMeterFailing) {
      failureReasons = failureReasons :+ st"'isWaterMeterFailing' did not match expected.  Expected: $isWaterMeterFailing, Actual: $actual_isWaterMeterFailing"
    }
    val actual_mode = get_mode()
    if (mode != actual_mode) {
      failureReasons = failureReasons :+ st"'mode' did not match expected.  Expected: $mode, Actual: $actual_mode"
    }
    val actual_p0 = get_p0()
    if (p0 != actual_p0) {
      failureReasons = failureReasons :+ st"'p0' did not match expected.  Expected: $p0, Actual: $actual_p0"
    }
    val actual_p1 = get_p1()
    if (p1 != actual_p1) {
      failureReasons = failureReasons :+ st"'p1' did not match expected.  Expected: $p1, Actual: $actual_p1"
    }
    val actual_p2 = get_p2()
    if (p2 != actual_p2) {
      failureReasons = failureReasons :+ st"'p2' did not match expected.  Expected: $p2, Actual: $actual_p2"
    }
    val actual_p3 = get_p3()
    if (p3 != actual_p3) {
      failureReasons = failureReasons :+ st"'p3' did not match expected.  Expected: $p3, Actual: $actual_p3"
    }
    val actual_q = get_q()
    if (q != actual_q) {
      failureReasons = failureReasons :+ st"'q' did not match expected.  Expected: $q, Actual: $actual_q"
    }
    val actual_qa1 = get_qa1()
    if (qa1 != actual_qa1) {
      failureReasons = failureReasons :+ st"'qa1' did not match expected.  Expected: $qa1, Actual: $actual_qa1"
    }
    val actual_qa2 = get_qa2()
    if (qa2 != actual_qa2) {
      failureReasons = failureReasons :+ st"'qa2' did not match expected.  Expected: $qa2, Actual: $actual_qa2"
    }
    val actual_qc1 = get_qc1()
    if (qc1 != actual_qc1) {
      failureReasons = failureReasons :+ st"'qc1' did not match expected.  Expected: $qc1, Actual: $actual_qc1"
    }
    val actual_qc2 = get_qc2()
    if (qc2 != actual_qc2) {
      failureReasons = failureReasons :+ st"'qc2' did not match expected.  Expected: $qc2, Actual: $actual_qc2"
    }
    val actual_shouldUpdatePumps = get_shouldUpdatePumps()
    if (shouldUpdatePumps != actual_shouldUpdatePumps) {
      failureReasons = failureReasons :+ st"'shouldUpdatePumps' did not match expected.  Expected: $shouldUpdatePumps, Actual: $actual_shouldUpdatePumps"
    }
    val actual_transmissionFailure = get_transmissionFailure()
    if (transmissionFailure != actual_transmissionFailure) {
      failureReasons = failureReasons :+ st"'transmissionFailure' did not match expected.  Expected: $transmissionFailure, Actual: $actual_transmissionFailure"
    }
    val actual_v_steamRate = get_v_steamRate()
    if (v_steamRate != actual_v_steamRate) {
      failureReasons = failureReasons :+ st"'v_steamRate' did not match expected.  Expected: $v_steamRate, Actual: $actual_v_steamRate"
    }
    val actual_levelFail = get_api_levelFail()
    if (api_levelFail != actual_levelFail) {
      failureReasons = failureReasons :+ st"'levelFail' did not match expected.  Expected: $api_levelFail, Actual: $actual_levelFail"
    }
    val actual_levelRepairAck = get_api_levelRepairAck()
    if (api_levelRepairAck != actual_levelRepairAck) {
      failureReasons = failureReasons :+ st"'levelRepairAck' did not match expected.  Expected: $api_levelRepairAck, Actual: $actual_levelRepairAck"
    }
    val actual_pumpControlFail0 = get_api_pumpControlFail0()
    if (api_pumpControlFail0 != actual_pumpControlFail0) {
      failureReasons = failureReasons :+ st"'pumpControlFail0' did not match expected.  Expected: $api_pumpControlFail0, Actual: $actual_pumpControlFail0"
    }
    val actual_pumpControlFail1 = get_api_pumpControlFail1()
    if (api_pumpControlFail1 != actual_pumpControlFail1) {
      failureReasons = failureReasons :+ st"'pumpControlFail1' did not match expected.  Expected: $api_pumpControlFail1, Actual: $actual_pumpControlFail1"
    }
    val actual_pumpControlFail2 = get_api_pumpControlFail2()
    if (api_pumpControlFail2 != actual_pumpControlFail2) {
      failureReasons = failureReasons :+ st"'pumpControlFail2' did not match expected.  Expected: $api_pumpControlFail2, Actual: $actual_pumpControlFail2"
    }
    val actual_pumpControlFail3 = get_api_pumpControlFail3()
    if (api_pumpControlFail3 != actual_pumpControlFail3) {
      failureReasons = failureReasons :+ st"'pumpControlFail3' did not match expected.  Expected: $api_pumpControlFail3, Actual: $actual_pumpControlFail3"
    }
    val actual_pumpControlRepairAck0 = get_api_pumpControlRepairAck0()
    if (api_pumpControlRepairAck0 != actual_pumpControlRepairAck0) {
      failureReasons = failureReasons :+ st"'pumpControlRepairAck0' did not match expected.  Expected: $api_pumpControlRepairAck0, Actual: $actual_pumpControlRepairAck0"
    }
    val actual_pumpControlRepairAck1 = get_api_pumpControlRepairAck1()
    if (api_pumpControlRepairAck1 != actual_pumpControlRepairAck1) {
      failureReasons = failureReasons :+ st"'pumpControlRepairAck1' did not match expected.  Expected: $api_pumpControlRepairAck1, Actual: $actual_pumpControlRepairAck1"
    }
    val actual_pumpControlRepairAck2 = get_api_pumpControlRepairAck2()
    if (api_pumpControlRepairAck2 != actual_pumpControlRepairAck2) {
      failureReasons = failureReasons :+ st"'pumpControlRepairAck2' did not match expected.  Expected: $api_pumpControlRepairAck2, Actual: $actual_pumpControlRepairAck2"
    }
    val actual_pumpControlRepairAck3 = get_api_pumpControlRepairAck3()
    if (api_pumpControlRepairAck3 != actual_pumpControlRepairAck3) {
      failureReasons = failureReasons :+ st"'pumpControlRepairAck3' did not match expected.  Expected: $api_pumpControlRepairAck3, Actual: $actual_pumpControlRepairAck3"
    }
    val actual_pumpFail0 = get_api_pumpFail0()
    if (api_pumpFail0 != actual_pumpFail0) {
      failureReasons = failureReasons :+ st"'pumpFail0' did not match expected.  Expected: $api_pumpFail0, Actual: $actual_pumpFail0"
    }
    val actual_pumpFail1 = get_api_pumpFail1()
    if (api_pumpFail1 != actual_pumpFail1) {
      failureReasons = failureReasons :+ st"'pumpFail1' did not match expected.  Expected: $api_pumpFail1, Actual: $actual_pumpFail1"
    }
    val actual_pumpFail2 = get_api_pumpFail2()
    if (api_pumpFail2 != actual_pumpFail2) {
      failureReasons = failureReasons :+ st"'pumpFail2' did not match expected.  Expected: $api_pumpFail2, Actual: $actual_pumpFail2"
    }
    val actual_pumpFail3 = get_api_pumpFail3()
    if (api_pumpFail3 != actual_pumpFail3) {
      failureReasons = failureReasons :+ st"'pumpFail3' did not match expected.  Expected: $api_pumpFail3, Actual: $actual_pumpFail3"
    }
    val actual_pumpRepairAck0 = get_api_pumpRepairAck0()
    if (api_pumpRepairAck0 != actual_pumpRepairAck0) {
      failureReasons = failureReasons :+ st"'pumpRepairAck0' did not match expected.  Expected: $api_pumpRepairAck0, Actual: $actual_pumpRepairAck0"
    }
    val actual_pumpRepairAck1 = get_api_pumpRepairAck1()
    if (api_pumpRepairAck1 != actual_pumpRepairAck1) {
      failureReasons = failureReasons :+ st"'pumpRepairAck1' did not match expected.  Expected: $api_pumpRepairAck1, Actual: $actual_pumpRepairAck1"
    }
    val actual_pumpRepairAck2 = get_api_pumpRepairAck2()
    if (api_pumpRepairAck2 != actual_pumpRepairAck2) {
      failureReasons = failureReasons :+ st"'pumpRepairAck2' did not match expected.  Expected: $api_pumpRepairAck2, Actual: $actual_pumpRepairAck2"
    }
    val actual_pumpRepairAck3 = get_api_pumpRepairAck3()
    if (api_pumpRepairAck3 != actual_pumpRepairAck3) {
      failureReasons = failureReasons :+ st"'pumpRepairAck3' did not match expected.  Expected: $api_pumpRepairAck3, Actual: $actual_pumpRepairAck3"
    }
    val actual_ready = get_api_ready()
    if (api_ready != actual_ready) {
      failureReasons = failureReasons :+ st"'ready' did not match expected.  Expected: $api_ready, Actual: $actual_ready"
    }
    val actual_steamFail = get_api_steamFail()
    if (api_steamFail != actual_steamFail) {
      failureReasons = failureReasons :+ st"'steamFail' did not match expected.  Expected: $api_steamFail, Actual: $actual_steamFail"
    }
    val actual_steamRepairAck = get_api_steamRepairAck()
    if (api_steamRepairAck != actual_steamRepairAck) {
      failureReasons = failureReasons :+ st"'steamRepairAck' did not match expected.  Expected: $api_steamRepairAck, Actual: $actual_steamRepairAck"
    }
    val actual_valve = get_api_valve()
    if (api_valve != actual_valve) {
      failureReasons = failureReasons :+ st"'valve' did not match expected.  Expected: $api_valve, Actual: $actual_valve"
    }
    val actual_opMode = get_api_opMode()
    if (api_opMode != actual_opMode) {
      failureReasons = failureReasons :+ st"'opMode' did not match expected.  Expected: $api_opMode, Actual: $actual_opMode"
    }
    val actual_openPump0 = get_api_openPump0()
    if (api_openPump0 != actual_openPump0) {
      failureReasons = failureReasons :+ st"'openPump0' did not match expected.  Expected: $api_openPump0, Actual: $actual_openPump0"
    }
    val actual_openPump1 = get_api_openPump1()
    if (api_openPump1 != actual_openPump1) {
      failureReasons = failureReasons :+ st"'openPump1' did not match expected.  Expected: $api_openPump1, Actual: $actual_openPump1"
    }
    val actual_openPump2 = get_api_openPump2()
    if (api_openPump2 != actual_openPump2) {
      failureReasons = failureReasons :+ st"'openPump2' did not match expected.  Expected: $api_openPump2, Actual: $actual_openPump2"
    }
    val actual_openPump3 = get_api_openPump3()
    if (api_openPump3 != actual_openPump3) {
      failureReasons = failureReasons :+ st"'openPump3' did not match expected.  Expected: $api_openPump3, Actual: $actual_openPump3"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  // getter for state variable
  def get_C(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.C
  }

  // getter for state variable
  def get_M1(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.M1
  }

  // getter for state variable
  def get_M2(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.M2
  }

  // getter for state variable
  def get_N1(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.N1
  }

  // getter for state variable
  def get_N2(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.N2
  }

  // getter for state variable
  def get_P(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.P
  }

  // getter for state variable
  def get_U1(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.U1
  }

  // getter for state variable
  def get_U2(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.U2
  }

  // getter for state variable
  def get_W(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.W
  }

  // getter for state variable
  def get_hasBoilerSentWaiting(): Base_Types.Boolean = {
    return BoilerControl_i_bcproc_control.hasBoilerSentWaiting
  }

  // getter for state variable
  def get_isPump0Failing(): Base_Types.Boolean = {
    return BoilerControl_i_bcproc_control.isPump0Failing
  }

  // getter for state variable
  def get_isPump1Failing(): Base_Types.Boolean = {
    return BoilerControl_i_bcproc_control.isPump1Failing
  }

  // getter for state variable
  def get_isPump2Failing(): Base_Types.Boolean = {
    return BoilerControl_i_bcproc_control.isPump2Failing
  }

  // getter for state variable
  def get_isPump3Failing(): Base_Types.Boolean = {
    return BoilerControl_i_bcproc_control.isPump3Failing
  }

  // getter for state variable
  def get_isSteamMeterFailing(): Base_Types.Boolean = {
    return BoilerControl_i_bcproc_control.isSteamMeterFailing
  }

  // getter for state variable
  def get_isWaterMeterFailing(): Base_Types.Boolean = {
    return BoilerControl_i_bcproc_control.isWaterMeterFailing
  }

  // getter for state variable
  def get_mode(): BoilerControl.OpMode.Type = {
    return BoilerControl_i_bcproc_control.mode
  }

  // getter for state variable
  def get_p0(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.p0
  }

  // getter for state variable
  def get_p1(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.p1
  }

  // getter for state variable
  def get_p2(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.p2
  }

  // getter for state variable
  def get_p3(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.p3
  }

  // getter for state variable
  def get_q(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.q
  }

  // getter for state variable
  def get_qa1(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.qa1
  }

  // getter for state variable
  def get_qa2(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.qa2
  }

  // getter for state variable
  def get_qc1(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.qc1
  }

  // getter for state variable
  def get_qc2(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.qc2
  }

  // getter for state variable
  def get_shouldUpdatePumps(): Base_Types.Boolean = {
    return BoilerControl_i_bcproc_control.shouldUpdatePumps
  }

  // getter for state variable
  def get_transmissionFailure(): Base_Types.Boolean = {
    return BoilerControl_i_bcproc_control.transmissionFailure
  }

  // getter for state variable
  def get_v_steamRate(): Base_Types.Float_32 = {
    return BoilerControl_i_bcproc_control.v_steamRate
  }

  def get_api_levelFail(): Option[art.Empty] = {
    return fetchContainer().api_levelFail
  }

  def get_api_levelRepairAck(): Option[art.Empty] = {
    return fetchContainer().api_levelRepairAck
  }

  def get_api_pumpControlFail0(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlFail0
  }

  def get_api_pumpControlFail1(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlFail1
  }

  def get_api_pumpControlFail2(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlFail2
  }

  def get_api_pumpControlFail3(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlFail3
  }

  def get_api_pumpControlRepairAck0(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlRepairAck0
  }

  def get_api_pumpControlRepairAck1(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlRepairAck1
  }

  def get_api_pumpControlRepairAck2(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlRepairAck2
  }

  def get_api_pumpControlRepairAck3(): Option[art.Empty] = {
    return fetchContainer().api_pumpControlRepairAck3
  }

  def get_api_pumpFail0(): Option[art.Empty] = {
    return fetchContainer().api_pumpFail0
  }

  def get_api_pumpFail1(): Option[art.Empty] = {
    return fetchContainer().api_pumpFail1
  }

  def get_api_pumpFail2(): Option[art.Empty] = {
    return fetchContainer().api_pumpFail2
  }

  def get_api_pumpFail3(): Option[art.Empty] = {
    return fetchContainer().api_pumpFail3
  }

  def get_api_pumpRepairAck0(): Option[art.Empty] = {
    return fetchContainer().api_pumpRepairAck0
  }

  def get_api_pumpRepairAck1(): Option[art.Empty] = {
    return fetchContainer().api_pumpRepairAck1
  }

  def get_api_pumpRepairAck2(): Option[art.Empty] = {
    return fetchContainer().api_pumpRepairAck2
  }

  def get_api_pumpRepairAck3(): Option[art.Empty] = {
    return fetchContainer().api_pumpRepairAck3
  }

  def get_api_ready(): Option[art.Empty] = {
    return fetchContainer().api_ready
  }

  def get_api_steamFail(): Option[art.Empty] = {
    return fetchContainer().api_steamFail
  }

  def get_api_steamRepairAck(): Option[art.Empty] = {
    return fetchContainer().api_steamRepairAck
  }

  def get_api_valve(): Option[art.Empty] = {
    return fetchContainer().api_valve
  }

  def get_api_opMode(): Option[BoilerControl.OpMode.Type] = {
    return fetchContainer().api_opMode
  }

  def get_api_openPump0(): Option[Base_Types.Boolean] = {
    return fetchContainer().api_openPump0
  }

  def get_api_openPump1(): Option[Base_Types.Boolean] = {
    return fetchContainer().api_openPump1
  }

  def get_api_openPump2(): Option[Base_Types.Boolean] = {
    return fetchContainer().api_openPump2
  }

  def get_api_openPump3(): Option[Base_Types.Boolean] = {
    return fetchContainer().api_openPump3
  }
}