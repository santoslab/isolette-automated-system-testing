// #Sireum

package bc.BoilerControl

import org.sireum._
import bc._
import bc.GumboXUtil.GumboXResult

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Boiler_i_bcproc_boiler_GumboX_TestHarness extends Boiler_i_bcproc_boiler_TestApi {
  def verbose: B

  /** Contract-based test harness for the initialise entry point
    */
  def testInitialiseCB(
      ): GumboXResult.Type = {

    if (verbose) {
      println(st"""Pre State Values:
                  """.render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testInitialise()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_ready: Option[art.Empty] = get_ready()
    val api_waiting: Option[art.Empty] = get_waiting()
    val Mode: BoilerControl.OpMode.Type = bc.BoilerControl.Boiler_i_bcproc_boiler.Mode
    val ValveOpen: Base_Types.Boolean = bc.BoilerControl.Boiler_i_bcproc_boiler.ValveOpen

    if (verbose) {
      println(st"""Post State Values:
                  |  api_ready = ${api_ready.string}
                  |  api_waiting = ${api_waiting.string}
                  |  Mode = ${Mode.string}
                  |  ValveOpen = ${ValveOpen.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = bc.BoilerControl.Boiler_i_bcproc_boiler_GumboX.inititialize_IEP_Post(Mode, ValveOpen, api_ready, api_waiting)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }

  def testComputeCBJ(json: String): GumboXResult.Type = {
    bc.JSON.toBoilerControlBoiler_i_bcproc_boiler_PreState_Container(json) match {
      case Either.Left(o) => return testComputeCBV(o)
      case Either.Right(msg) => halt(msg.string)
    }
  }

  def testComputeCBV(o: Boiler_i_bcproc_boiler_PreState_Container): GumboXResult.Type = {
    return testComputeCB(o.api_programReady, o.api_valve, o.api_opMode)
  }

  /** Contract-based test harness for the compute entry point
    * @param api_programReady incoming event port
    * @param api_valve incoming event port
    * @param api_opMode incoming event data port
    */
  def testComputeCB(
      api_programReady: Option[art.Empty],
      api_valve: Option[art.Empty],
      api_opMode: Option[BoilerControl.OpMode.Type]): GumboXResult.Type = {

    // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved from the component state
    val In_Mode: BoilerControl.OpMode.Type = bc.BoilerControl.Boiler_i_bcproc_boiler.Mode
    val In_ValveOpen: Base_Types.Boolean = bc.BoilerControl.Boiler_i_bcproc_boiler.ValveOpen

    // [CheckPre]: check/filter based on pre-condition.
    //   boiler's compute entry point does not have top level assume clauses

    // [PutInPorts]: put values on the input ports
    if (api_programReady.nonEmpty) {
      put_programReady()
    }
    if (api_valve.nonEmpty) {
      put_valve()
    }
    if (api_opMode.nonEmpty) {
      put_opMode(api_opMode.get)
    }

    if (verbose) {
      println(st"""Pre State Values:
                  |  In_Mode = ${In_Mode.string}
                  |  In_ValveOpen = ${In_ValveOpen.string}
                  |  api_programReady = ${api_programReady.string}
                  |  api_valve = ${api_valve.string}
                  |  api_opMode = ${api_opMode.string}""".render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_ready: Option[art.Empty] = get_ready()
    val api_waiting: Option[art.Empty] = get_waiting()
    val Mode: BoilerControl.OpMode.Type = bc.BoilerControl.Boiler_i_bcproc_boiler.Mode
    val ValveOpen: Base_Types.Boolean = bc.BoilerControl.Boiler_i_bcproc_boiler.ValveOpen

    if (verbose) {
      println(st"""Post State Values:
                  |  api_ready = ${api_ready.string}
                  |  api_waiting = ${api_waiting.string}
                  |  Mode = ${Mode.string}
                  |  ValveOpen = ${ValveOpen.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = bc.BoilerControl.Boiler_i_bcproc_boiler_GumboX.compute_CEP_Post(In_Mode, In_ValveOpen, Mode, ValveOpen, api_programReady, api_valve, api_opMode, api_ready, api_waiting)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }

  def testComputeCBwLJ(json: String): GumboXResult.Type = {
    bc.JSON.toBoilerControlBoiler_i_bcproc_boiler_PreState_Container_PS(json) match {
      case Either.Left(o) => return testComputeCBwLV(o)
      case Either.Right(msg) => halt(msg.string)
    }
  }

  def testComputeCBwLV(o: Boiler_i_bcproc_boiler_PreState_Container_PS): GumboXResult.Type = {
    return testComputeCBwL(o.In_Mode, o.In_ValveOpen, o.api_programReady, o.api_valve, o.api_opMode)
  }

  /** Contract-based test harness for the compute entry point
    * @param In_Mode pre-state state variable
    * @param In_ValveOpen pre-state state variable
    * @param api_programReady incoming event port
    * @param api_valve incoming event port
    * @param api_opMode incoming event data port
    */
  def testComputeCBwL(
      In_Mode: BoilerControl.OpMode.Type,
      In_ValveOpen: Base_Types.Boolean,
      api_programReady: Option[art.Empty],
      api_valve: Option[art.Empty],
      api_opMode: Option[BoilerControl.OpMode.Type]): GumboXResult.Type = {

    // [CheckPre]: check/filter based on pre-condition.
    //   boiler's compute entry point does not have top level assume clauses

    // [PutInPorts]: put values on the input ports
    if (api_programReady.nonEmpty) {
      put_programReady()
    }
    if (api_valve.nonEmpty) {
      put_valve()
    }
    if (api_opMode.nonEmpty) {
      put_opMode(api_opMode.get)
    }

    // [SetInStateVars]: set the pre-state values of state variables
    bc.BoilerControl.Boiler_i_bcproc_boiler.Mode = In_Mode
    bc.BoilerControl.Boiler_i_bcproc_boiler.ValveOpen = In_ValveOpen

    if (verbose) {
      println(st"""Pre State Values:
                  |  In_Mode = ${In_Mode.string}
                  |  In_ValveOpen = ${In_ValveOpen.string}
                  |  api_programReady = ${api_programReady.string}
                  |  api_valve = ${api_valve.string}
                  |  api_opMode = ${api_opMode.string}""".render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_ready: Option[art.Empty] = get_ready()
    val api_waiting: Option[art.Empty] = get_waiting()
    val Mode: BoilerControl.OpMode.Type = bc.BoilerControl.Boiler_i_bcproc_boiler.Mode
    val ValveOpen: Base_Types.Boolean = bc.BoilerControl.Boiler_i_bcproc_boiler.ValveOpen

    if (verbose) {
      println(st"""Post State Values:
                  |  api_ready = ${api_ready.string}
                  |  api_waiting = ${api_waiting.string}
                  |  Mode = ${Mode.string}
                  |  ValveOpen = ${ValveOpen.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = bc.BoilerControl.Boiler_i_bcproc_boiler_GumboX.compute_CEP_Post(In_Mode, In_ValveOpen, Mode, ValveOpen, api_programReady, api_valve, api_opMode, api_ready, api_waiting)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }
}
