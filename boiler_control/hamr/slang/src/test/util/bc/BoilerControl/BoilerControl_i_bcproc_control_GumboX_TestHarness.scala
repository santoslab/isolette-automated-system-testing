// #Sireum

package bc.BoilerControl

import org.sireum._
import bc._
import bc.GumboXUtil.GumboXResult

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait BoilerControl_i_bcproc_control_GumboX_TestHarness extends BoilerControl_i_bcproc_control_TestApi {
  def verbose: B

  /** Contract-based test harness for the initialise entry point
    */
  def testInitialiseCB(
      ): GumboXResult.Type = {

    if (verbose) {
      println(st"""Pre State Values:
                  """.render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testInitialise()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_levelFail: Option[art.Empty] = get_levelFail()
    val api_levelRepairAck: Option[art.Empty] = get_levelRepairAck()
    val api_pumpControlFail0: Option[art.Empty] = get_pumpControlFail0()
    val api_pumpControlFail1: Option[art.Empty] = get_pumpControlFail1()
    val api_pumpControlFail2: Option[art.Empty] = get_pumpControlFail2()
    val api_pumpControlFail3: Option[art.Empty] = get_pumpControlFail3()
    val api_pumpControlRepairAck0: Option[art.Empty] = get_pumpControlRepairAck0()
    val api_pumpControlRepairAck1: Option[art.Empty] = get_pumpControlRepairAck1()
    val api_pumpControlRepairAck2: Option[art.Empty] = get_pumpControlRepairAck2()
    val api_pumpControlRepairAck3: Option[art.Empty] = get_pumpControlRepairAck3()
    val api_pumpFail0: Option[art.Empty] = get_pumpFail0()
    val api_pumpFail1: Option[art.Empty] = get_pumpFail1()
    val api_pumpFail2: Option[art.Empty] = get_pumpFail2()
    val api_pumpFail3: Option[art.Empty] = get_pumpFail3()
    val api_pumpRepairAck0: Option[art.Empty] = get_pumpRepairAck0()
    val api_pumpRepairAck1: Option[art.Empty] = get_pumpRepairAck1()
    val api_pumpRepairAck2: Option[art.Empty] = get_pumpRepairAck2()
    val api_pumpRepairAck3: Option[art.Empty] = get_pumpRepairAck3()
    val api_ready: Option[art.Empty] = get_ready()
    val api_steamFail: Option[art.Empty] = get_steamFail()
    val api_steamRepairAck: Option[art.Empty] = get_steamRepairAck()
    val api_valve: Option[art.Empty] = get_valve()
    val api_opMode: Option[BoilerControl.OpMode.Type] = get_opMode()
    val api_openPump0: Option[Base_Types.Boolean] = get_openPump0()
    val api_openPump1: Option[Base_Types.Boolean] = get_openPump1()
    val api_openPump2: Option[Base_Types.Boolean] = get_openPump2()
    val api_openPump3: Option[Base_Types.Boolean] = get_openPump3()
    val mode: BoilerControl.OpMode.Type = bc.BoilerControl.BoilerControl_i_bcproc_control.mode
    val C: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.C
    val M1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.M1
    val M2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.M2
    val N1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.N1
    val N2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.N2
    val W: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.W
    val U1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.U1
    val U2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.U2
    val q: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.q
    val P: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.P
    val v_steamRate: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.v_steamRate
    val hasBoilerSentWaiting: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.hasBoilerSentWaiting
    val isPump0Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump0Failing
    val isPump1Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump1Failing
    val isPump2Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump2Failing
    val isPump3Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump3Failing
    val isWaterMeterFailing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isWaterMeterFailing
    val isSteamMeterFailing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isSteamMeterFailing
    val p0: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p0
    val p1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p1
    val p2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p2
    val p3: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p3
    val qc1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qc1
    val qc2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qc2
    val qa1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qa1
    val qa2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qa2
    val shouldUpdatePumps: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.shouldUpdatePumps
    val transmissionFailure: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.transmissionFailure

    if (verbose) {
      println(st"""Post State Values:
                  |  api_levelFail = ${api_levelFail.string}
                  |  api_levelRepairAck = ${api_levelRepairAck.string}
                  |  api_pumpControlFail0 = ${api_pumpControlFail0.string}
                  |  api_pumpControlFail1 = ${api_pumpControlFail1.string}
                  |  api_pumpControlFail2 = ${api_pumpControlFail2.string}
                  |  api_pumpControlFail3 = ${api_pumpControlFail3.string}
                  |  api_pumpControlRepairAck0 = ${api_pumpControlRepairAck0.string}
                  |  api_pumpControlRepairAck1 = ${api_pumpControlRepairAck1.string}
                  |  api_pumpControlRepairAck2 = ${api_pumpControlRepairAck2.string}
                  |  api_pumpControlRepairAck3 = ${api_pumpControlRepairAck3.string}
                  |  api_pumpFail0 = ${api_pumpFail0.string}
                  |  api_pumpFail1 = ${api_pumpFail1.string}
                  |  api_pumpFail2 = ${api_pumpFail2.string}
                  |  api_pumpFail3 = ${api_pumpFail3.string}
                  |  api_pumpRepairAck0 = ${api_pumpRepairAck0.string}
                  |  api_pumpRepairAck1 = ${api_pumpRepairAck1.string}
                  |  api_pumpRepairAck2 = ${api_pumpRepairAck2.string}
                  |  api_pumpRepairAck3 = ${api_pumpRepairAck3.string}
                  |  api_ready = ${api_ready.string}
                  |  api_steamFail = ${api_steamFail.string}
                  |  api_steamRepairAck = ${api_steamRepairAck.string}
                  |  api_valve = ${api_valve.string}
                  |  api_opMode = ${api_opMode.string}
                  |  api_openPump0 = ${api_openPump0.string}
                  |  api_openPump1 = ${api_openPump1.string}
                  |  api_openPump2 = ${api_openPump2.string}
                  |  api_openPump3 = ${api_openPump3.string}
                  |  mode = ${mode.string}
                  |  C = ${C.string}
                  |  M1 = ${M1.string}
                  |  M2 = ${M2.string}
                  |  N1 = ${N1.string}
                  |  N2 = ${N2.string}
                  |  W = ${W.string}
                  |  U1 = ${U1.string}
                  |  U2 = ${U2.string}
                  |  q = ${q.string}
                  |  P = ${P.string}
                  |  v_steamRate = ${v_steamRate.string}
                  |  hasBoilerSentWaiting = ${hasBoilerSentWaiting.string}
                  |  isPump0Failing = ${isPump0Failing.string}
                  |  isPump1Failing = ${isPump1Failing.string}
                  |  isPump2Failing = ${isPump2Failing.string}
                  |  isPump3Failing = ${isPump3Failing.string}
                  |  isWaterMeterFailing = ${isWaterMeterFailing.string}
                  |  isSteamMeterFailing = ${isSteamMeterFailing.string}
                  |  p0 = ${p0.string}
                  |  p1 = ${p1.string}
                  |  p2 = ${p2.string}
                  |  p3 = ${p3.string}
                  |  qc1 = ${qc1.string}
                  |  qc2 = ${qc2.string}
                  |  qa1 = ${qa1.string}
                  |  qa2 = ${qa2.string}
                  |  shouldUpdatePumps = ${shouldUpdatePumps.string}
                  |  transmissionFailure = ${transmissionFailure.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = bc.BoilerControl.BoilerControl_i_bcproc_control_GumboX.inititialize_IEP_Post(C, M1, M2, N1, N2, P, U1, U2, W, hasBoilerSentWaiting, isPump0Failing, isPump1Failing, isPump2Failing, isPump3Failing, isSteamMeterFailing, isWaterMeterFailing, mode, p0, p1, p2, p3, q, qa1, qa2, qc1, qc2, shouldUpdatePumps, transmissionFailure, v_steamRate, api_levelFail, api_levelRepairAck, api_pumpControlFail0, api_pumpControlFail1, api_pumpControlFail2, api_pumpControlFail3, api_pumpControlRepairAck0, api_pumpControlRepairAck1, api_pumpControlRepairAck2, api_pumpControlRepairAck3, api_pumpFail0, api_pumpFail1, api_pumpFail2, api_pumpFail3, api_pumpRepairAck0, api_pumpRepairAck1, api_pumpRepairAck2, api_pumpRepairAck3, api_ready, api_steamFail, api_steamRepairAck, api_valve, api_opMode, api_openPump0, api_openPump1, api_openPump2, api_openPump3)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }

  def testComputeCBJ(json: String): GumboXResult.Type = {
    bc.JSON.toBoilerControlBoilerControl_i_bcproc_control_PreState_Container(json) match {
      case Either.Left(o) => return testComputeCBV(o)
      case Either.Right(msg) => halt(msg.string)
    }
  }

  def testComputeCBV(o: BoilerControl_i_bcproc_control_PreState_Container): GumboXResult.Type = {
    return testComputeCB(o.api_boilerReady, o.api_boilerWaiting, o.api_levelFailAck, o.api_levelRepair, o.api_pumpControlFailAck0, o.api_pumpControlFailAck1, o.api_pumpControlFailAck2, o.api_pumpControlFailAck3, o.api_pumpControlReady0, o.api_pumpControlReady1, o.api_pumpControlReady2, o.api_pumpControlReady3, o.api_pumpControlRepair0, o.api_pumpControlRepair1, o.api_pumpControlRepair2, o.api_pumpControlRepair3, o.api_pumpFailAck0, o.api_pumpFailAck1, o.api_pumpFailAck2, o.api_pumpFailAck3, o.api_pumpRepair0, o.api_pumpRepair1, o.api_pumpRepair2, o.api_pumpRepair3, o.api_steamFailAck, o.api_steamMeterReady, o.api_steamRepair, o.api_stop, o.api_waterMeterReady, o.api_pumpFlow0, o.api_pumpFlow1, o.api_pumpFlow2, o.api_pumpFlow3, o.api_pumpOpen0, o.api_pumpOpen1, o.api_pumpOpen2, o.api_pumpOpen3, o.api_steamRate, o.api_waterLevel)
  }

  /** Contract-based test harness for the compute entry point
    * @param api_boilerReady incoming event port
    * @param api_boilerWaiting incoming event port
    * @param api_levelFailAck incoming event port
    * @param api_levelRepair incoming event port
    * @param api_pumpControlFailAck0 incoming event port
    * @param api_pumpControlFailAck1 incoming event port
    * @param api_pumpControlFailAck2 incoming event port
    * @param api_pumpControlFailAck3 incoming event port
    * @param api_pumpControlReady0 incoming event port
    * @param api_pumpControlReady1 incoming event port
    * @param api_pumpControlReady2 incoming event port
    * @param api_pumpControlReady3 incoming event port
    * @param api_pumpControlRepair0 incoming event port
    * @param api_pumpControlRepair1 incoming event port
    * @param api_pumpControlRepair2 incoming event port
    * @param api_pumpControlRepair3 incoming event port
    * @param api_pumpFailAck0 incoming event port
    * @param api_pumpFailAck1 incoming event port
    * @param api_pumpFailAck2 incoming event port
    * @param api_pumpFailAck3 incoming event port
    * @param api_pumpRepair0 incoming event port
    * @param api_pumpRepair1 incoming event port
    * @param api_pumpRepair2 incoming event port
    * @param api_pumpRepair3 incoming event port
    * @param api_steamFailAck incoming event port
    * @param api_steamMeterReady incoming event port
    * @param api_steamRepair incoming event port
    * @param api_stop incoming event port
    * @param api_waterMeterReady incoming event port
    * @param api_pumpFlow0 incoming event data port
    * @param api_pumpFlow1 incoming event data port
    * @param api_pumpFlow2 incoming event data port
    * @param api_pumpFlow3 incoming event data port
    * @param api_pumpOpen0 incoming event data port
    * @param api_pumpOpen1 incoming event data port
    * @param api_pumpOpen2 incoming event data port
    * @param api_pumpOpen3 incoming event data port
    * @param api_steamRate incoming event data port
    * @param api_waterLevel incoming event data port
    */
  def testComputeCB(
      api_boilerReady: Option[art.Empty],
      api_boilerWaiting: Option[art.Empty],
      api_levelFailAck: Option[art.Empty],
      api_levelRepair: Option[art.Empty],
      api_pumpControlFailAck0: Option[art.Empty],
      api_pumpControlFailAck1: Option[art.Empty],
      api_pumpControlFailAck2: Option[art.Empty],
      api_pumpControlFailAck3: Option[art.Empty],
      api_pumpControlReady0: Option[art.Empty],
      api_pumpControlReady1: Option[art.Empty],
      api_pumpControlReady2: Option[art.Empty],
      api_pumpControlReady3: Option[art.Empty],
      api_pumpControlRepair0: Option[art.Empty],
      api_pumpControlRepair1: Option[art.Empty],
      api_pumpControlRepair2: Option[art.Empty],
      api_pumpControlRepair3: Option[art.Empty],
      api_pumpFailAck0: Option[art.Empty],
      api_pumpFailAck1: Option[art.Empty],
      api_pumpFailAck2: Option[art.Empty],
      api_pumpFailAck3: Option[art.Empty],
      api_pumpRepair0: Option[art.Empty],
      api_pumpRepair1: Option[art.Empty],
      api_pumpRepair2: Option[art.Empty],
      api_pumpRepair3: Option[art.Empty],
      api_steamFailAck: Option[art.Empty],
      api_steamMeterReady: Option[art.Empty],
      api_steamRepair: Option[art.Empty],
      api_stop: Option[art.Empty],
      api_waterMeterReady: Option[art.Empty],
      api_pumpFlow0: Option[Base_Types.Boolean],
      api_pumpFlow1: Option[Base_Types.Boolean],
      api_pumpFlow2: Option[Base_Types.Boolean],
      api_pumpFlow3: Option[Base_Types.Boolean],
      api_pumpOpen0: Option[Base_Types.Boolean],
      api_pumpOpen1: Option[Base_Types.Boolean],
      api_pumpOpen2: Option[Base_Types.Boolean],
      api_pumpOpen3: Option[Base_Types.Boolean],
      api_steamRate: Option[Base_Types.Float_32],
      api_waterLevel: Option[Base_Types.Float_32]): GumboXResult.Type = {

    // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved from the component state
    val In_mode: BoilerControl.OpMode.Type = bc.BoilerControl.BoilerControl_i_bcproc_control.mode
    val In_C: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.C
    val In_M1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.M1
    val In_M2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.M2
    val In_N1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.N1
    val In_N2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.N2
    val In_W: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.W
    val In_U1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.U1
    val In_U2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.U2
    val In_q: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.q
    val In_P: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.P
    val In_v_steamRate: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.v_steamRate
    val In_hasBoilerSentWaiting: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.hasBoilerSentWaiting
    val In_isPump0Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump0Failing
    val In_isPump1Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump1Failing
    val In_isPump2Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump2Failing
    val In_isPump3Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump3Failing
    val In_isWaterMeterFailing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isWaterMeterFailing
    val In_isSteamMeterFailing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isSteamMeterFailing
    val In_p0: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p0
    val In_p1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p1
    val In_p2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p2
    val In_p3: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p3
    val In_qc1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qc1
    val In_qc2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qc2
    val In_qa1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qa1
    val In_qa2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qa2
    val In_shouldUpdatePumps: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.shouldUpdatePumps
    val In_transmissionFailure: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.transmissionFailure

    // [CheckPre]: check/filter based on pre-condition.
    //   control's compute entry point does not have top level assume clauses

    // [PutInPorts]: put values on the input ports
    if (api_boilerReady.nonEmpty) {
      put_boilerReady()
    }
    if (api_boilerWaiting.nonEmpty) {
      put_boilerWaiting()
    }
    if (api_levelFailAck.nonEmpty) {
      put_levelFailAck()
    }
    if (api_levelRepair.nonEmpty) {
      put_levelRepair()
    }
    if (api_pumpControlFailAck0.nonEmpty) {
      put_pumpControlFailAck0()
    }
    if (api_pumpControlFailAck1.nonEmpty) {
      put_pumpControlFailAck1()
    }
    if (api_pumpControlFailAck2.nonEmpty) {
      put_pumpControlFailAck2()
    }
    if (api_pumpControlFailAck3.nonEmpty) {
      put_pumpControlFailAck3()
    }
    if (api_pumpControlReady0.nonEmpty) {
      put_pumpControlReady0()
    }
    if (api_pumpControlReady1.nonEmpty) {
      put_pumpControlReady1()
    }
    if (api_pumpControlReady2.nonEmpty) {
      put_pumpControlReady2()
    }
    if (api_pumpControlReady3.nonEmpty) {
      put_pumpControlReady3()
    }
    if (api_pumpControlRepair0.nonEmpty) {
      put_pumpControlRepair0()
    }
    if (api_pumpControlRepair1.nonEmpty) {
      put_pumpControlRepair1()
    }
    if (api_pumpControlRepair2.nonEmpty) {
      put_pumpControlRepair2()
    }
    if (api_pumpControlRepair3.nonEmpty) {
      put_pumpControlRepair3()
    }
    if (api_pumpFailAck0.nonEmpty) {
      put_pumpFailAck0()
    }
    if (api_pumpFailAck1.nonEmpty) {
      put_pumpFailAck1()
    }
    if (api_pumpFailAck2.nonEmpty) {
      put_pumpFailAck2()
    }
    if (api_pumpFailAck3.nonEmpty) {
      put_pumpFailAck3()
    }
    if (api_pumpRepair0.nonEmpty) {
      put_pumpRepair0()
    }
    if (api_pumpRepair1.nonEmpty) {
      put_pumpRepair1()
    }
    if (api_pumpRepair2.nonEmpty) {
      put_pumpRepair2()
    }
    if (api_pumpRepair3.nonEmpty) {
      put_pumpRepair3()
    }
    if (api_steamFailAck.nonEmpty) {
      put_steamFailAck()
    }
    if (api_steamMeterReady.nonEmpty) {
      put_steamMeterReady()
    }
    if (api_steamRepair.nonEmpty) {
      put_steamRepair()
    }
    if (api_stop.nonEmpty) {
      put_stop()
    }
    if (api_waterMeterReady.nonEmpty) {
      put_waterMeterReady()
    }
    if (api_pumpFlow0.nonEmpty) {
      put_pumpFlow0(api_pumpFlow0.get)
    }
    if (api_pumpFlow1.nonEmpty) {
      put_pumpFlow1(api_pumpFlow1.get)
    }
    if (api_pumpFlow2.nonEmpty) {
      put_pumpFlow2(api_pumpFlow2.get)
    }
    if (api_pumpFlow3.nonEmpty) {
      put_pumpFlow3(api_pumpFlow3.get)
    }
    if (api_pumpOpen0.nonEmpty) {
      put_pumpOpen0(api_pumpOpen0.get)
    }
    if (api_pumpOpen1.nonEmpty) {
      put_pumpOpen1(api_pumpOpen1.get)
    }
    if (api_pumpOpen2.nonEmpty) {
      put_pumpOpen2(api_pumpOpen2.get)
    }
    if (api_pumpOpen3.nonEmpty) {
      put_pumpOpen3(api_pumpOpen3.get)
    }
    if (api_steamRate.nonEmpty) {
      put_steamRate(api_steamRate.get)
    }
    if (api_waterLevel.nonEmpty) {
      put_waterLevel(api_waterLevel.get)
    }

    if (verbose) {
      println(st"""Pre State Values:
                  |  In_C = ${In_C.string}
                  |  In_M1 = ${In_M1.string}
                  |  In_M2 = ${In_M2.string}
                  |  In_N1 = ${In_N1.string}
                  |  In_N2 = ${In_N2.string}
                  |  In_P = ${In_P.string}
                  |  In_U1 = ${In_U1.string}
                  |  In_U2 = ${In_U2.string}
                  |  In_W = ${In_W.string}
                  |  In_hasBoilerSentWaiting = ${In_hasBoilerSentWaiting.string}
                  |  In_isPump0Failing = ${In_isPump0Failing.string}
                  |  In_isPump1Failing = ${In_isPump1Failing.string}
                  |  In_isPump2Failing = ${In_isPump2Failing.string}
                  |  In_isPump3Failing = ${In_isPump3Failing.string}
                  |  In_isSteamMeterFailing = ${In_isSteamMeterFailing.string}
                  |  In_isWaterMeterFailing = ${In_isWaterMeterFailing.string}
                  |  In_mode = ${In_mode.string}
                  |  In_p0 = ${In_p0.string}
                  |  In_p1 = ${In_p1.string}
                  |  In_p2 = ${In_p2.string}
                  |  In_p3 = ${In_p3.string}
                  |  In_q = ${In_q.string}
                  |  In_qa1 = ${In_qa1.string}
                  |  In_qa2 = ${In_qa2.string}
                  |  In_qc1 = ${In_qc1.string}
                  |  In_qc2 = ${In_qc2.string}
                  |  In_shouldUpdatePumps = ${In_shouldUpdatePumps.string}
                  |  In_transmissionFailure = ${In_transmissionFailure.string}
                  |  In_v_steamRate = ${In_v_steamRate.string}
                  |  api_boilerReady = ${api_boilerReady.string}
                  |  api_boilerWaiting = ${api_boilerWaiting.string}
                  |  api_levelFailAck = ${api_levelFailAck.string}
                  |  api_levelRepair = ${api_levelRepair.string}
                  |  api_pumpControlFailAck0 = ${api_pumpControlFailAck0.string}
                  |  api_pumpControlFailAck1 = ${api_pumpControlFailAck1.string}
                  |  api_pumpControlFailAck2 = ${api_pumpControlFailAck2.string}
                  |  api_pumpControlFailAck3 = ${api_pumpControlFailAck3.string}
                  |  api_pumpControlReady0 = ${api_pumpControlReady0.string}
                  |  api_pumpControlReady1 = ${api_pumpControlReady1.string}
                  |  api_pumpControlReady2 = ${api_pumpControlReady2.string}
                  |  api_pumpControlReady3 = ${api_pumpControlReady3.string}
                  |  api_pumpControlRepair0 = ${api_pumpControlRepair0.string}
                  |  api_pumpControlRepair1 = ${api_pumpControlRepair1.string}
                  |  api_pumpControlRepair2 = ${api_pumpControlRepair2.string}
                  |  api_pumpControlRepair3 = ${api_pumpControlRepair3.string}
                  |  api_pumpFailAck0 = ${api_pumpFailAck0.string}
                  |  api_pumpFailAck1 = ${api_pumpFailAck1.string}
                  |  api_pumpFailAck2 = ${api_pumpFailAck2.string}
                  |  api_pumpFailAck3 = ${api_pumpFailAck3.string}
                  |  api_pumpRepair0 = ${api_pumpRepair0.string}
                  |  api_pumpRepair1 = ${api_pumpRepair1.string}
                  |  api_pumpRepair2 = ${api_pumpRepair2.string}
                  |  api_pumpRepair3 = ${api_pumpRepair3.string}
                  |  api_steamFailAck = ${api_steamFailAck.string}
                  |  api_steamMeterReady = ${api_steamMeterReady.string}
                  |  api_steamRepair = ${api_steamRepair.string}
                  |  api_stop = ${api_stop.string}
                  |  api_waterMeterReady = ${api_waterMeterReady.string}
                  |  api_pumpFlow0 = ${api_pumpFlow0.string}
                  |  api_pumpFlow1 = ${api_pumpFlow1.string}
                  |  api_pumpFlow2 = ${api_pumpFlow2.string}
                  |  api_pumpFlow3 = ${api_pumpFlow3.string}
                  |  api_pumpOpen0 = ${api_pumpOpen0.string}
                  |  api_pumpOpen1 = ${api_pumpOpen1.string}
                  |  api_pumpOpen2 = ${api_pumpOpen2.string}
                  |  api_pumpOpen3 = ${api_pumpOpen3.string}
                  |  api_steamRate = ${api_steamRate.string}
                  |  api_waterLevel = ${api_waterLevel.string}""".render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_levelFail: Option[art.Empty] = get_levelFail()
    val api_levelRepairAck: Option[art.Empty] = get_levelRepairAck()
    val api_pumpControlFail0: Option[art.Empty] = get_pumpControlFail0()
    val api_pumpControlFail1: Option[art.Empty] = get_pumpControlFail1()
    val api_pumpControlFail2: Option[art.Empty] = get_pumpControlFail2()
    val api_pumpControlFail3: Option[art.Empty] = get_pumpControlFail3()
    val api_pumpControlRepairAck0: Option[art.Empty] = get_pumpControlRepairAck0()
    val api_pumpControlRepairAck1: Option[art.Empty] = get_pumpControlRepairAck1()
    val api_pumpControlRepairAck2: Option[art.Empty] = get_pumpControlRepairAck2()
    val api_pumpControlRepairAck3: Option[art.Empty] = get_pumpControlRepairAck3()
    val api_pumpFail0: Option[art.Empty] = get_pumpFail0()
    val api_pumpFail1: Option[art.Empty] = get_pumpFail1()
    val api_pumpFail2: Option[art.Empty] = get_pumpFail2()
    val api_pumpFail3: Option[art.Empty] = get_pumpFail3()
    val api_pumpRepairAck0: Option[art.Empty] = get_pumpRepairAck0()
    val api_pumpRepairAck1: Option[art.Empty] = get_pumpRepairAck1()
    val api_pumpRepairAck2: Option[art.Empty] = get_pumpRepairAck2()
    val api_pumpRepairAck3: Option[art.Empty] = get_pumpRepairAck3()
    val api_ready: Option[art.Empty] = get_ready()
    val api_steamFail: Option[art.Empty] = get_steamFail()
    val api_steamRepairAck: Option[art.Empty] = get_steamRepairAck()
    val api_valve: Option[art.Empty] = get_valve()
    val api_opMode: Option[BoilerControl.OpMode.Type] = get_opMode()
    val api_openPump0: Option[Base_Types.Boolean] = get_openPump0()
    val api_openPump1: Option[Base_Types.Boolean] = get_openPump1()
    val api_openPump2: Option[Base_Types.Boolean] = get_openPump2()
    val api_openPump3: Option[Base_Types.Boolean] = get_openPump3()
    val mode: BoilerControl.OpMode.Type = bc.BoilerControl.BoilerControl_i_bcproc_control.mode
    val C: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.C
    val M1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.M1
    val M2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.M2
    val N1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.N1
    val N2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.N2
    val W: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.W
    val U1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.U1
    val U2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.U2
    val q: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.q
    val P: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.P
    val v_steamRate: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.v_steamRate
    val hasBoilerSentWaiting: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.hasBoilerSentWaiting
    val isPump0Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump0Failing
    val isPump1Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump1Failing
    val isPump2Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump2Failing
    val isPump3Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump3Failing
    val isWaterMeterFailing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isWaterMeterFailing
    val isSteamMeterFailing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isSteamMeterFailing
    val p0: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p0
    val p1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p1
    val p2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p2
    val p3: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p3
    val qc1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qc1
    val qc2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qc2
    val qa1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qa1
    val qa2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qa2
    val shouldUpdatePumps: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.shouldUpdatePumps
    val transmissionFailure: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.transmissionFailure

    if (verbose) {
      println(st"""Post State Values:
                  |  api_levelFail = ${api_levelFail.string}
                  |  api_levelRepairAck = ${api_levelRepairAck.string}
                  |  api_pumpControlFail0 = ${api_pumpControlFail0.string}
                  |  api_pumpControlFail1 = ${api_pumpControlFail1.string}
                  |  api_pumpControlFail2 = ${api_pumpControlFail2.string}
                  |  api_pumpControlFail3 = ${api_pumpControlFail3.string}
                  |  api_pumpControlRepairAck0 = ${api_pumpControlRepairAck0.string}
                  |  api_pumpControlRepairAck1 = ${api_pumpControlRepairAck1.string}
                  |  api_pumpControlRepairAck2 = ${api_pumpControlRepairAck2.string}
                  |  api_pumpControlRepairAck3 = ${api_pumpControlRepairAck3.string}
                  |  api_pumpFail0 = ${api_pumpFail0.string}
                  |  api_pumpFail1 = ${api_pumpFail1.string}
                  |  api_pumpFail2 = ${api_pumpFail2.string}
                  |  api_pumpFail3 = ${api_pumpFail3.string}
                  |  api_pumpRepairAck0 = ${api_pumpRepairAck0.string}
                  |  api_pumpRepairAck1 = ${api_pumpRepairAck1.string}
                  |  api_pumpRepairAck2 = ${api_pumpRepairAck2.string}
                  |  api_pumpRepairAck3 = ${api_pumpRepairAck3.string}
                  |  api_ready = ${api_ready.string}
                  |  api_steamFail = ${api_steamFail.string}
                  |  api_steamRepairAck = ${api_steamRepairAck.string}
                  |  api_valve = ${api_valve.string}
                  |  api_opMode = ${api_opMode.string}
                  |  api_openPump0 = ${api_openPump0.string}
                  |  api_openPump1 = ${api_openPump1.string}
                  |  api_openPump2 = ${api_openPump2.string}
                  |  api_openPump3 = ${api_openPump3.string}
                  |  mode = ${mode.string}
                  |  C = ${C.string}
                  |  M1 = ${M1.string}
                  |  M2 = ${M2.string}
                  |  N1 = ${N1.string}
                  |  N2 = ${N2.string}
                  |  W = ${W.string}
                  |  U1 = ${U1.string}
                  |  U2 = ${U2.string}
                  |  q = ${q.string}
                  |  P = ${P.string}
                  |  v_steamRate = ${v_steamRate.string}
                  |  hasBoilerSentWaiting = ${hasBoilerSentWaiting.string}
                  |  isPump0Failing = ${isPump0Failing.string}
                  |  isPump1Failing = ${isPump1Failing.string}
                  |  isPump2Failing = ${isPump2Failing.string}
                  |  isPump3Failing = ${isPump3Failing.string}
                  |  isWaterMeterFailing = ${isWaterMeterFailing.string}
                  |  isSteamMeterFailing = ${isSteamMeterFailing.string}
                  |  p0 = ${p0.string}
                  |  p1 = ${p1.string}
                  |  p2 = ${p2.string}
                  |  p3 = ${p3.string}
                  |  qc1 = ${qc1.string}
                  |  qc2 = ${qc2.string}
                  |  qa1 = ${qa1.string}
                  |  qa2 = ${qa2.string}
                  |  shouldUpdatePumps = ${shouldUpdatePumps.string}
                  |  transmissionFailure = ${transmissionFailure.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = bc.BoilerControl.BoilerControl_i_bcproc_control_GumboX.compute_CEP_Post(In_C, In_M1, In_M2, In_N1, In_N2, In_P, In_U1, In_U2, In_W, In_hasBoilerSentWaiting, In_isPump0Failing, In_isPump1Failing, In_isPump2Failing, In_isPump3Failing, In_isSteamMeterFailing, In_isWaterMeterFailing, In_mode, In_p0, In_p1, In_p2, In_p3, In_q, In_qa1, In_qa2, In_qc1, In_qc2, In_shouldUpdatePumps, In_transmissionFailure, In_v_steamRate, C, M1, M2, N1, N2, P, U1, U2, W, hasBoilerSentWaiting, isPump0Failing, isPump1Failing, isPump2Failing, isPump3Failing, isSteamMeterFailing, isWaterMeterFailing, mode, p0, p1, p2, p3, q, qa1, qa2, qc1, qc2, shouldUpdatePumps, transmissionFailure, v_steamRate, api_boilerReady, api_boilerWaiting, api_levelRepair, api_pumpControlReady0, api_pumpControlReady1, api_pumpControlReady2, api_pumpControlReady3, api_pumpRepair0, api_pumpRepair1, api_pumpRepair2, api_pumpRepair3, api_steamMeterReady, api_steamRepair, api_stop, api_waterMeterReady, api_pumpFlow0, api_pumpFlow1, api_pumpFlow2, api_pumpFlow3, api_pumpOpen0, api_pumpOpen1, api_pumpOpen2, api_pumpOpen3, api_steamRate, api_waterLevel, api_levelFail, api_levelRepairAck, api_pumpControlFail0, api_pumpControlFail1, api_pumpControlFail2, api_pumpControlFail3, api_pumpControlRepairAck0, api_pumpControlRepairAck1, api_pumpControlRepairAck2, api_pumpControlRepairAck3, api_pumpFail0, api_pumpFail1, api_pumpFail2, api_pumpFail3, api_pumpRepairAck0, api_pumpRepairAck1, api_pumpRepairAck2, api_pumpRepairAck3, api_ready, api_steamFail, api_steamRepairAck, api_valve, api_opMode, api_openPump0, api_openPump1, api_openPump2, api_openPump3)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }

  def testComputeCBwLJ(json: String): GumboXResult.Type = {
    bc.JSON.toBoilerControlBoilerControl_i_bcproc_control_PreState_Container_PS(json) match {
      case Either.Left(o) => return testComputeCBwLV(o)
      case Either.Right(msg) => halt(msg.string)
    }
  }

  def testComputeCBwLV(o: BoilerControl_i_bcproc_control_PreState_Container_PS): GumboXResult.Type = {
    return testComputeCBwL(o.In_C, o.In_M1, o.In_M2, o.In_N1, o.In_N2, o.In_P, o.In_U1, o.In_U2, o.In_W, o.In_hasBoilerSentWaiting, o.In_isPump0Failing, o.In_isPump1Failing, o.In_isPump2Failing, o.In_isPump3Failing, o.In_isSteamMeterFailing, o.In_isWaterMeterFailing, o.In_mode, o.In_p0, o.In_p1, o.In_p2, o.In_p3, o.In_q, o.In_qa1, o.In_qa2, o.In_qc1, o.In_qc2, o.In_shouldUpdatePumps, o.In_transmissionFailure, o.In_v_steamRate, o.api_boilerReady, o.api_boilerWaiting, o.api_levelFailAck, o.api_levelRepair, o.api_pumpControlFailAck0, o.api_pumpControlFailAck1, o.api_pumpControlFailAck2, o.api_pumpControlFailAck3, o.api_pumpControlReady0, o.api_pumpControlReady1, o.api_pumpControlReady2, o.api_pumpControlReady3, o.api_pumpControlRepair0, o.api_pumpControlRepair1, o.api_pumpControlRepair2, o.api_pumpControlRepair3, o.api_pumpFailAck0, o.api_pumpFailAck1, o.api_pumpFailAck2, o.api_pumpFailAck3, o.api_pumpRepair0, o.api_pumpRepair1, o.api_pumpRepair2, o.api_pumpRepair3, o.api_steamFailAck, o.api_steamMeterReady, o.api_steamRepair, o.api_stop, o.api_waterMeterReady, o.api_pumpFlow0, o.api_pumpFlow1, o.api_pumpFlow2, o.api_pumpFlow3, o.api_pumpOpen0, o.api_pumpOpen1, o.api_pumpOpen2, o.api_pumpOpen3, o.api_steamRate, o.api_waterLevel)
  }

  /** Contract-based test harness for the compute entry point
    * @param In_C pre-state state variable
    * @param In_M1 pre-state state variable
    * @param In_M2 pre-state state variable
    * @param In_N1 pre-state state variable
    * @param In_N2 pre-state state variable
    * @param In_P pre-state state variable
    * @param In_U1 pre-state state variable
    * @param In_U2 pre-state state variable
    * @param In_W pre-state state variable
    * @param In_hasBoilerSentWaiting pre-state state variable
    * @param In_isPump0Failing pre-state state variable
    * @param In_isPump1Failing pre-state state variable
    * @param In_isPump2Failing pre-state state variable
    * @param In_isPump3Failing pre-state state variable
    * @param In_isSteamMeterFailing pre-state state variable
    * @param In_isWaterMeterFailing pre-state state variable
    * @param In_mode pre-state state variable
    * @param In_p0 pre-state state variable
    * @param In_p1 pre-state state variable
    * @param In_p2 pre-state state variable
    * @param In_p3 pre-state state variable
    * @param In_q pre-state state variable
    * @param In_qa1 pre-state state variable
    * @param In_qa2 pre-state state variable
    * @param In_qc1 pre-state state variable
    * @param In_qc2 pre-state state variable
    * @param In_shouldUpdatePumps pre-state state variable
    * @param In_transmissionFailure pre-state state variable
    * @param In_v_steamRate pre-state state variable
    * @param api_boilerReady incoming event port
    * @param api_boilerWaiting incoming event port
    * @param api_levelFailAck incoming event port
    * @param api_levelRepair incoming event port
    * @param api_pumpControlFailAck0 incoming event port
    * @param api_pumpControlFailAck1 incoming event port
    * @param api_pumpControlFailAck2 incoming event port
    * @param api_pumpControlFailAck3 incoming event port
    * @param api_pumpControlReady0 incoming event port
    * @param api_pumpControlReady1 incoming event port
    * @param api_pumpControlReady2 incoming event port
    * @param api_pumpControlReady3 incoming event port
    * @param api_pumpControlRepair0 incoming event port
    * @param api_pumpControlRepair1 incoming event port
    * @param api_pumpControlRepair2 incoming event port
    * @param api_pumpControlRepair3 incoming event port
    * @param api_pumpFailAck0 incoming event port
    * @param api_pumpFailAck1 incoming event port
    * @param api_pumpFailAck2 incoming event port
    * @param api_pumpFailAck3 incoming event port
    * @param api_pumpRepair0 incoming event port
    * @param api_pumpRepair1 incoming event port
    * @param api_pumpRepair2 incoming event port
    * @param api_pumpRepair3 incoming event port
    * @param api_steamFailAck incoming event port
    * @param api_steamMeterReady incoming event port
    * @param api_steamRepair incoming event port
    * @param api_stop incoming event port
    * @param api_waterMeterReady incoming event port
    * @param api_pumpFlow0 incoming event data port
    * @param api_pumpFlow1 incoming event data port
    * @param api_pumpFlow2 incoming event data port
    * @param api_pumpFlow3 incoming event data port
    * @param api_pumpOpen0 incoming event data port
    * @param api_pumpOpen1 incoming event data port
    * @param api_pumpOpen2 incoming event data port
    * @param api_pumpOpen3 incoming event data port
    * @param api_steamRate incoming event data port
    * @param api_waterLevel incoming event data port
    */
  def testComputeCBwL(
      In_C: Base_Types.Float_32,
      In_M1: Base_Types.Float_32,
      In_M2: Base_Types.Float_32,
      In_N1: Base_Types.Float_32,
      In_N2: Base_Types.Float_32,
      In_P: Base_Types.Float_32,
      In_U1: Base_Types.Float_32,
      In_U2: Base_Types.Float_32,
      In_W: Base_Types.Float_32,
      In_hasBoilerSentWaiting: Base_Types.Boolean,
      In_isPump0Failing: Base_Types.Boolean,
      In_isPump1Failing: Base_Types.Boolean,
      In_isPump2Failing: Base_Types.Boolean,
      In_isPump3Failing: Base_Types.Boolean,
      In_isSteamMeterFailing: Base_Types.Boolean,
      In_isWaterMeterFailing: Base_Types.Boolean,
      In_mode: BoilerControl.OpMode.Type,
      In_p0: Base_Types.Float_32,
      In_p1: Base_Types.Float_32,
      In_p2: Base_Types.Float_32,
      In_p3: Base_Types.Float_32,
      In_q: Base_Types.Float_32,
      In_qa1: Base_Types.Float_32,
      In_qa2: Base_Types.Float_32,
      In_qc1: Base_Types.Float_32,
      In_qc2: Base_Types.Float_32,
      In_shouldUpdatePumps: Base_Types.Boolean,
      In_transmissionFailure: Base_Types.Boolean,
      In_v_steamRate: Base_Types.Float_32,
      api_boilerReady: Option[art.Empty],
      api_boilerWaiting: Option[art.Empty],
      api_levelFailAck: Option[art.Empty],
      api_levelRepair: Option[art.Empty],
      api_pumpControlFailAck0: Option[art.Empty],
      api_pumpControlFailAck1: Option[art.Empty],
      api_pumpControlFailAck2: Option[art.Empty],
      api_pumpControlFailAck3: Option[art.Empty],
      api_pumpControlReady0: Option[art.Empty],
      api_pumpControlReady1: Option[art.Empty],
      api_pumpControlReady2: Option[art.Empty],
      api_pumpControlReady3: Option[art.Empty],
      api_pumpControlRepair0: Option[art.Empty],
      api_pumpControlRepair1: Option[art.Empty],
      api_pumpControlRepair2: Option[art.Empty],
      api_pumpControlRepair3: Option[art.Empty],
      api_pumpFailAck0: Option[art.Empty],
      api_pumpFailAck1: Option[art.Empty],
      api_pumpFailAck2: Option[art.Empty],
      api_pumpFailAck3: Option[art.Empty],
      api_pumpRepair0: Option[art.Empty],
      api_pumpRepair1: Option[art.Empty],
      api_pumpRepair2: Option[art.Empty],
      api_pumpRepair3: Option[art.Empty],
      api_steamFailAck: Option[art.Empty],
      api_steamMeterReady: Option[art.Empty],
      api_steamRepair: Option[art.Empty],
      api_stop: Option[art.Empty],
      api_waterMeterReady: Option[art.Empty],
      api_pumpFlow0: Option[Base_Types.Boolean],
      api_pumpFlow1: Option[Base_Types.Boolean],
      api_pumpFlow2: Option[Base_Types.Boolean],
      api_pumpFlow3: Option[Base_Types.Boolean],
      api_pumpOpen0: Option[Base_Types.Boolean],
      api_pumpOpen1: Option[Base_Types.Boolean],
      api_pumpOpen2: Option[Base_Types.Boolean],
      api_pumpOpen3: Option[Base_Types.Boolean],
      api_steamRate: Option[Base_Types.Float_32],
      api_waterLevel: Option[Base_Types.Float_32]): GumboXResult.Type = {

    // [CheckPre]: check/filter based on pre-condition.
    //   control's compute entry point does not have top level assume clauses

    // [PutInPorts]: put values on the input ports
    if (api_boilerReady.nonEmpty) {
      put_boilerReady()
    }
    if (api_boilerWaiting.nonEmpty) {
      put_boilerWaiting()
    }
    if (api_levelFailAck.nonEmpty) {
      put_levelFailAck()
    }
    if (api_levelRepair.nonEmpty) {
      put_levelRepair()
    }
    if (api_pumpControlFailAck0.nonEmpty) {
      put_pumpControlFailAck0()
    }
    if (api_pumpControlFailAck1.nonEmpty) {
      put_pumpControlFailAck1()
    }
    if (api_pumpControlFailAck2.nonEmpty) {
      put_pumpControlFailAck2()
    }
    if (api_pumpControlFailAck3.nonEmpty) {
      put_pumpControlFailAck3()
    }
    if (api_pumpControlReady0.nonEmpty) {
      put_pumpControlReady0()
    }
    if (api_pumpControlReady1.nonEmpty) {
      put_pumpControlReady1()
    }
    if (api_pumpControlReady2.nonEmpty) {
      put_pumpControlReady2()
    }
    if (api_pumpControlReady3.nonEmpty) {
      put_pumpControlReady3()
    }
    if (api_pumpControlRepair0.nonEmpty) {
      put_pumpControlRepair0()
    }
    if (api_pumpControlRepair1.nonEmpty) {
      put_pumpControlRepair1()
    }
    if (api_pumpControlRepair2.nonEmpty) {
      put_pumpControlRepair2()
    }
    if (api_pumpControlRepair3.nonEmpty) {
      put_pumpControlRepair3()
    }
    if (api_pumpFailAck0.nonEmpty) {
      put_pumpFailAck0()
    }
    if (api_pumpFailAck1.nonEmpty) {
      put_pumpFailAck1()
    }
    if (api_pumpFailAck2.nonEmpty) {
      put_pumpFailAck2()
    }
    if (api_pumpFailAck3.nonEmpty) {
      put_pumpFailAck3()
    }
    if (api_pumpRepair0.nonEmpty) {
      put_pumpRepair0()
    }
    if (api_pumpRepair1.nonEmpty) {
      put_pumpRepair1()
    }
    if (api_pumpRepair2.nonEmpty) {
      put_pumpRepair2()
    }
    if (api_pumpRepair3.nonEmpty) {
      put_pumpRepair3()
    }
    if (api_steamFailAck.nonEmpty) {
      put_steamFailAck()
    }
    if (api_steamMeterReady.nonEmpty) {
      put_steamMeterReady()
    }
    if (api_steamRepair.nonEmpty) {
      put_steamRepair()
    }
    if (api_stop.nonEmpty) {
      put_stop()
    }
    if (api_waterMeterReady.nonEmpty) {
      put_waterMeterReady()
    }
    if (api_pumpFlow0.nonEmpty) {
      put_pumpFlow0(api_pumpFlow0.get)
    }
    if (api_pumpFlow1.nonEmpty) {
      put_pumpFlow1(api_pumpFlow1.get)
    }
    if (api_pumpFlow2.nonEmpty) {
      put_pumpFlow2(api_pumpFlow2.get)
    }
    if (api_pumpFlow3.nonEmpty) {
      put_pumpFlow3(api_pumpFlow3.get)
    }
    if (api_pumpOpen0.nonEmpty) {
      put_pumpOpen0(api_pumpOpen0.get)
    }
    if (api_pumpOpen1.nonEmpty) {
      put_pumpOpen1(api_pumpOpen1.get)
    }
    if (api_pumpOpen2.nonEmpty) {
      put_pumpOpen2(api_pumpOpen2.get)
    }
    if (api_pumpOpen3.nonEmpty) {
      put_pumpOpen3(api_pumpOpen3.get)
    }
    if (api_steamRate.nonEmpty) {
      put_steamRate(api_steamRate.get)
    }
    if (api_waterLevel.nonEmpty) {
      put_waterLevel(api_waterLevel.get)
    }

    // [SetInStateVars]: set the pre-state values of state variables
    bc.BoilerControl.BoilerControl_i_bcproc_control.mode = In_mode
    bc.BoilerControl.BoilerControl_i_bcproc_control.C = In_C
    bc.BoilerControl.BoilerControl_i_bcproc_control.M1 = In_M1
    bc.BoilerControl.BoilerControl_i_bcproc_control.M2 = In_M2
    bc.BoilerControl.BoilerControl_i_bcproc_control.N1 = In_N1
    bc.BoilerControl.BoilerControl_i_bcproc_control.N2 = In_N2
    bc.BoilerControl.BoilerControl_i_bcproc_control.W = In_W
    bc.BoilerControl.BoilerControl_i_bcproc_control.U1 = In_U1
    bc.BoilerControl.BoilerControl_i_bcproc_control.U2 = In_U2
    bc.BoilerControl.BoilerControl_i_bcproc_control.q = In_q
    bc.BoilerControl.BoilerControl_i_bcproc_control.P = In_P
    bc.BoilerControl.BoilerControl_i_bcproc_control.v_steamRate = In_v_steamRate
    bc.BoilerControl.BoilerControl_i_bcproc_control.hasBoilerSentWaiting = In_hasBoilerSentWaiting
    bc.BoilerControl.BoilerControl_i_bcproc_control.isPump0Failing = In_isPump0Failing
    bc.BoilerControl.BoilerControl_i_bcproc_control.isPump1Failing = In_isPump1Failing
    bc.BoilerControl.BoilerControl_i_bcproc_control.isPump2Failing = In_isPump2Failing
    bc.BoilerControl.BoilerControl_i_bcproc_control.isPump3Failing = In_isPump3Failing
    bc.BoilerControl.BoilerControl_i_bcproc_control.isWaterMeterFailing = In_isWaterMeterFailing
    bc.BoilerControl.BoilerControl_i_bcproc_control.isSteamMeterFailing = In_isSteamMeterFailing
    bc.BoilerControl.BoilerControl_i_bcproc_control.p0 = In_p0
    bc.BoilerControl.BoilerControl_i_bcproc_control.p1 = In_p1
    bc.BoilerControl.BoilerControl_i_bcproc_control.p2 = In_p2
    bc.BoilerControl.BoilerControl_i_bcproc_control.p3 = In_p3
    bc.BoilerControl.BoilerControl_i_bcproc_control.qc1 = In_qc1
    bc.BoilerControl.BoilerControl_i_bcproc_control.qc2 = In_qc2
    bc.BoilerControl.BoilerControl_i_bcproc_control.qa1 = In_qa1
    bc.BoilerControl.BoilerControl_i_bcproc_control.qa2 = In_qa2
    bc.BoilerControl.BoilerControl_i_bcproc_control.shouldUpdatePumps = In_shouldUpdatePumps
    bc.BoilerControl.BoilerControl_i_bcproc_control.transmissionFailure = In_transmissionFailure

    if (verbose) {
      println(st"""Pre State Values:
                  |  In_C = ${In_C.string}
                  |  In_M1 = ${In_M1.string}
                  |  In_M2 = ${In_M2.string}
                  |  In_N1 = ${In_N1.string}
                  |  In_N2 = ${In_N2.string}
                  |  In_P = ${In_P.string}
                  |  In_U1 = ${In_U1.string}
                  |  In_U2 = ${In_U2.string}
                  |  In_W = ${In_W.string}
                  |  In_hasBoilerSentWaiting = ${In_hasBoilerSentWaiting.string}
                  |  In_isPump0Failing = ${In_isPump0Failing.string}
                  |  In_isPump1Failing = ${In_isPump1Failing.string}
                  |  In_isPump2Failing = ${In_isPump2Failing.string}
                  |  In_isPump3Failing = ${In_isPump3Failing.string}
                  |  In_isSteamMeterFailing = ${In_isSteamMeterFailing.string}
                  |  In_isWaterMeterFailing = ${In_isWaterMeterFailing.string}
                  |  In_mode = ${In_mode.string}
                  |  In_p0 = ${In_p0.string}
                  |  In_p1 = ${In_p1.string}
                  |  In_p2 = ${In_p2.string}
                  |  In_p3 = ${In_p3.string}
                  |  In_q = ${In_q.string}
                  |  In_qa1 = ${In_qa1.string}
                  |  In_qa2 = ${In_qa2.string}
                  |  In_qc1 = ${In_qc1.string}
                  |  In_qc2 = ${In_qc2.string}
                  |  In_shouldUpdatePumps = ${In_shouldUpdatePumps.string}
                  |  In_transmissionFailure = ${In_transmissionFailure.string}
                  |  In_v_steamRate = ${In_v_steamRate.string}
                  |  api_boilerReady = ${api_boilerReady.string}
                  |  api_boilerWaiting = ${api_boilerWaiting.string}
                  |  api_levelFailAck = ${api_levelFailAck.string}
                  |  api_levelRepair = ${api_levelRepair.string}
                  |  api_pumpControlFailAck0 = ${api_pumpControlFailAck0.string}
                  |  api_pumpControlFailAck1 = ${api_pumpControlFailAck1.string}
                  |  api_pumpControlFailAck2 = ${api_pumpControlFailAck2.string}
                  |  api_pumpControlFailAck3 = ${api_pumpControlFailAck3.string}
                  |  api_pumpControlReady0 = ${api_pumpControlReady0.string}
                  |  api_pumpControlReady1 = ${api_pumpControlReady1.string}
                  |  api_pumpControlReady2 = ${api_pumpControlReady2.string}
                  |  api_pumpControlReady3 = ${api_pumpControlReady3.string}
                  |  api_pumpControlRepair0 = ${api_pumpControlRepair0.string}
                  |  api_pumpControlRepair1 = ${api_pumpControlRepair1.string}
                  |  api_pumpControlRepair2 = ${api_pumpControlRepair2.string}
                  |  api_pumpControlRepair3 = ${api_pumpControlRepair3.string}
                  |  api_pumpFailAck0 = ${api_pumpFailAck0.string}
                  |  api_pumpFailAck1 = ${api_pumpFailAck1.string}
                  |  api_pumpFailAck2 = ${api_pumpFailAck2.string}
                  |  api_pumpFailAck3 = ${api_pumpFailAck3.string}
                  |  api_pumpRepair0 = ${api_pumpRepair0.string}
                  |  api_pumpRepair1 = ${api_pumpRepair1.string}
                  |  api_pumpRepair2 = ${api_pumpRepair2.string}
                  |  api_pumpRepair3 = ${api_pumpRepair3.string}
                  |  api_steamFailAck = ${api_steamFailAck.string}
                  |  api_steamMeterReady = ${api_steamMeterReady.string}
                  |  api_steamRepair = ${api_steamRepair.string}
                  |  api_stop = ${api_stop.string}
                  |  api_waterMeterReady = ${api_waterMeterReady.string}
                  |  api_pumpFlow0 = ${api_pumpFlow0.string}
                  |  api_pumpFlow1 = ${api_pumpFlow1.string}
                  |  api_pumpFlow2 = ${api_pumpFlow2.string}
                  |  api_pumpFlow3 = ${api_pumpFlow3.string}
                  |  api_pumpOpen0 = ${api_pumpOpen0.string}
                  |  api_pumpOpen1 = ${api_pumpOpen1.string}
                  |  api_pumpOpen2 = ${api_pumpOpen2.string}
                  |  api_pumpOpen3 = ${api_pumpOpen3.string}
                  |  api_steamRate = ${api_steamRate.string}
                  |  api_waterLevel = ${api_waterLevel.string}""".render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_levelFail: Option[art.Empty] = get_levelFail()
    val api_levelRepairAck: Option[art.Empty] = get_levelRepairAck()
    val api_pumpControlFail0: Option[art.Empty] = get_pumpControlFail0()
    val api_pumpControlFail1: Option[art.Empty] = get_pumpControlFail1()
    val api_pumpControlFail2: Option[art.Empty] = get_pumpControlFail2()
    val api_pumpControlFail3: Option[art.Empty] = get_pumpControlFail3()
    val api_pumpControlRepairAck0: Option[art.Empty] = get_pumpControlRepairAck0()
    val api_pumpControlRepairAck1: Option[art.Empty] = get_pumpControlRepairAck1()
    val api_pumpControlRepairAck2: Option[art.Empty] = get_pumpControlRepairAck2()
    val api_pumpControlRepairAck3: Option[art.Empty] = get_pumpControlRepairAck3()
    val api_pumpFail0: Option[art.Empty] = get_pumpFail0()
    val api_pumpFail1: Option[art.Empty] = get_pumpFail1()
    val api_pumpFail2: Option[art.Empty] = get_pumpFail2()
    val api_pumpFail3: Option[art.Empty] = get_pumpFail3()
    val api_pumpRepairAck0: Option[art.Empty] = get_pumpRepairAck0()
    val api_pumpRepairAck1: Option[art.Empty] = get_pumpRepairAck1()
    val api_pumpRepairAck2: Option[art.Empty] = get_pumpRepairAck2()
    val api_pumpRepairAck3: Option[art.Empty] = get_pumpRepairAck3()
    val api_ready: Option[art.Empty] = get_ready()
    val api_steamFail: Option[art.Empty] = get_steamFail()
    val api_steamRepairAck: Option[art.Empty] = get_steamRepairAck()
    val api_valve: Option[art.Empty] = get_valve()
    val api_opMode: Option[BoilerControl.OpMode.Type] = get_opMode()
    val api_openPump0: Option[Base_Types.Boolean] = get_openPump0()
    val api_openPump1: Option[Base_Types.Boolean] = get_openPump1()
    val api_openPump2: Option[Base_Types.Boolean] = get_openPump2()
    val api_openPump3: Option[Base_Types.Boolean] = get_openPump3()
    val mode: BoilerControl.OpMode.Type = bc.BoilerControl.BoilerControl_i_bcproc_control.mode
    val C: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.C
    val M1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.M1
    val M2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.M2
    val N1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.N1
    val N2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.N2
    val W: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.W
    val U1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.U1
    val U2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.U2
    val q: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.q
    val P: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.P
    val v_steamRate: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.v_steamRate
    val hasBoilerSentWaiting: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.hasBoilerSentWaiting
    val isPump0Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump0Failing
    val isPump1Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump1Failing
    val isPump2Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump2Failing
    val isPump3Failing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isPump3Failing
    val isWaterMeterFailing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isWaterMeterFailing
    val isSteamMeterFailing: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.isSteamMeterFailing
    val p0: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p0
    val p1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p1
    val p2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p2
    val p3: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.p3
    val qc1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qc1
    val qc2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qc2
    val qa1: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qa1
    val qa2: Base_Types.Float_32 = bc.BoilerControl.BoilerControl_i_bcproc_control.qa2
    val shouldUpdatePumps: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.shouldUpdatePumps
    val transmissionFailure: Base_Types.Boolean = bc.BoilerControl.BoilerControl_i_bcproc_control.transmissionFailure

    if (verbose) {
      println(st"""Post State Values:
                  |  api_levelFail = ${api_levelFail.string}
                  |  api_levelRepairAck = ${api_levelRepairAck.string}
                  |  api_pumpControlFail0 = ${api_pumpControlFail0.string}
                  |  api_pumpControlFail1 = ${api_pumpControlFail1.string}
                  |  api_pumpControlFail2 = ${api_pumpControlFail2.string}
                  |  api_pumpControlFail3 = ${api_pumpControlFail3.string}
                  |  api_pumpControlRepairAck0 = ${api_pumpControlRepairAck0.string}
                  |  api_pumpControlRepairAck1 = ${api_pumpControlRepairAck1.string}
                  |  api_pumpControlRepairAck2 = ${api_pumpControlRepairAck2.string}
                  |  api_pumpControlRepairAck3 = ${api_pumpControlRepairAck3.string}
                  |  api_pumpFail0 = ${api_pumpFail0.string}
                  |  api_pumpFail1 = ${api_pumpFail1.string}
                  |  api_pumpFail2 = ${api_pumpFail2.string}
                  |  api_pumpFail3 = ${api_pumpFail3.string}
                  |  api_pumpRepairAck0 = ${api_pumpRepairAck0.string}
                  |  api_pumpRepairAck1 = ${api_pumpRepairAck1.string}
                  |  api_pumpRepairAck2 = ${api_pumpRepairAck2.string}
                  |  api_pumpRepairAck3 = ${api_pumpRepairAck3.string}
                  |  api_ready = ${api_ready.string}
                  |  api_steamFail = ${api_steamFail.string}
                  |  api_steamRepairAck = ${api_steamRepairAck.string}
                  |  api_valve = ${api_valve.string}
                  |  api_opMode = ${api_opMode.string}
                  |  api_openPump0 = ${api_openPump0.string}
                  |  api_openPump1 = ${api_openPump1.string}
                  |  api_openPump2 = ${api_openPump2.string}
                  |  api_openPump3 = ${api_openPump3.string}
                  |  mode = ${mode.string}
                  |  C = ${C.string}
                  |  M1 = ${M1.string}
                  |  M2 = ${M2.string}
                  |  N1 = ${N1.string}
                  |  N2 = ${N2.string}
                  |  W = ${W.string}
                  |  U1 = ${U1.string}
                  |  U2 = ${U2.string}
                  |  q = ${q.string}
                  |  P = ${P.string}
                  |  v_steamRate = ${v_steamRate.string}
                  |  hasBoilerSentWaiting = ${hasBoilerSentWaiting.string}
                  |  isPump0Failing = ${isPump0Failing.string}
                  |  isPump1Failing = ${isPump1Failing.string}
                  |  isPump2Failing = ${isPump2Failing.string}
                  |  isPump3Failing = ${isPump3Failing.string}
                  |  isWaterMeterFailing = ${isWaterMeterFailing.string}
                  |  isSteamMeterFailing = ${isSteamMeterFailing.string}
                  |  p0 = ${p0.string}
                  |  p1 = ${p1.string}
                  |  p2 = ${p2.string}
                  |  p3 = ${p3.string}
                  |  qc1 = ${qc1.string}
                  |  qc2 = ${qc2.string}
                  |  qa1 = ${qa1.string}
                  |  qa2 = ${qa2.string}
                  |  shouldUpdatePumps = ${shouldUpdatePumps.string}
                  |  transmissionFailure = ${transmissionFailure.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = bc.BoilerControl.BoilerControl_i_bcproc_control_GumboX.compute_CEP_Post(In_C, In_M1, In_M2, In_N1, In_N2, In_P, In_U1, In_U2, In_W, In_hasBoilerSentWaiting, In_isPump0Failing, In_isPump1Failing, In_isPump2Failing, In_isPump3Failing, In_isSteamMeterFailing, In_isWaterMeterFailing, In_mode, In_p0, In_p1, In_p2, In_p3, In_q, In_qa1, In_qa2, In_qc1, In_qc2, In_shouldUpdatePumps, In_transmissionFailure, In_v_steamRate, C, M1, M2, N1, N2, P, U1, U2, W, hasBoilerSentWaiting, isPump0Failing, isPump1Failing, isPump2Failing, isPump3Failing, isSteamMeterFailing, isWaterMeterFailing, mode, p0, p1, p2, p3, q, qa1, qa2, qc1, qc2, shouldUpdatePumps, transmissionFailure, v_steamRate, api_boilerReady, api_boilerWaiting, api_levelRepair, api_pumpControlReady0, api_pumpControlReady1, api_pumpControlReady2, api_pumpControlReady3, api_pumpRepair0, api_pumpRepair1, api_pumpRepair2, api_pumpRepair3, api_steamMeterReady, api_steamRepair, api_stop, api_waterMeterReady, api_pumpFlow0, api_pumpFlow1, api_pumpFlow2, api_pumpFlow3, api_pumpOpen0, api_pumpOpen1, api_pumpOpen2, api_pumpOpen3, api_steamRate, api_waterLevel, api_levelFail, api_levelRepairAck, api_pumpControlFail0, api_pumpControlFail1, api_pumpControlFail2, api_pumpControlFail3, api_pumpControlRepairAck0, api_pumpControlRepairAck1, api_pumpControlRepairAck2, api_pumpControlRepairAck3, api_pumpFail0, api_pumpFail1, api_pumpFail2, api_pumpFail3, api_pumpRepairAck0, api_pumpRepairAck1, api_pumpRepairAck2, api_pumpRepairAck3, api_ready, api_steamFail, api_steamRepairAck, api_valve, api_opMode, api_openPump0, api_openPump1, api_openPump2, api_openPump3)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }
}
