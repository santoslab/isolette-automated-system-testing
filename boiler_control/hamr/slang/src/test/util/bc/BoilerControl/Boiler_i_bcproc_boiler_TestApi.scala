// #Sireum

package bc.BoilerControl

import org.sireum._
import art.Art
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Boiler_i_bcproc_boiler_TestApi {

  def BeforeEntrypoint(): Unit = {
    Art.initTest(Arch.BoilerControlSystem_i_Instance_bcproc_boiler)
  }

  def AfterEntrypoint(): Unit = {
    Art.finalizeTest(Arch.BoilerControlSystem_i_Instance_bcproc_boiler)
  }

  def testCompute(): Unit = {
    Art.manuallyClearOutput()
    Art.testCompute(Arch.BoilerControlSystem_i_Instance_bcproc_boiler)
  }

  def testInitialise(): Unit = {
    Art.manuallyClearOutput()
    Art.testInitialise(Arch.BoilerControlSystem_i_Instance_bcproc_boiler)
  }

  /** helper function to set the values of all input ports.
   * @param opMode payloads for event data port opMode.
   *   ART currently supports single element event data queues so
   *   only the last element of opMode will be used
   * @param programReady the number of events to place in the programReady event port queue.
   *   ART currently supports single element event queues so at most
   *   one event will be placed in the queue.
   * @param valve the number of events to place in the valve event port queue.
   *   ART currently supports single element event queues so at most
   *   one event will be placed in the queue.
   */
  def put_concrete_inputs(opMode : ISZ[BoilerControl.OpMode.Type],
                          programReady : Z,
                          valve : Z): Unit = {
    for(v <- opMode){
      put_opMode(v)
    }
    for(i <- 0 until programReady) {
      put_programReady()
    }
    for(i <- 0 until valve) {
      put_valve()
    }
  }


  /** helper function to check Boiler_i_bcproc_boiler's
   * output ports.  Use named arguments to check subsets of the output ports.
   * @param waiting method that will be called with the number of events to be sent
   *        on the outgoing event port 'waiting'.
   * @param ready method that will be called with the number of events to be sent
   *        on the outgoing event port 'ready'.
   */
  def check_concrete_output(waiting: Z => B,
                            ready: Z => B): Unit = {
    var testFailures: ISZ[ST] = ISZ()

    // TODO: event port getter should return the number of events in
    //       the output queue when queue sizes > 1 support is added to ART
    val waitingValue: Z = if(get_waiting().nonEmpty) z"1" else z"0"
    if(!waiting(waitingValue)) {
      testFailures = testFailures :+ st"'waiting' did not match expected: ${waitingValue} events were in the outgoing event queue"
    }
    // TODO: event port getter should return the number of events in
    //       the output queue when queue sizes > 1 support is added to ART
    val readyValue: Z = if(get_ready().nonEmpty) z"1" else z"0"
    if(!ready(readyValue)) {
      testFailures = testFailures :+ st"'ready' did not match expected: ${readyValue} events were in the outgoing event queue"
    }

    assert(testFailures.isEmpty, st"${(testFailures, "\n")}".render)
  }


  // setter for in EventDataPort
  def put_opMode(value : BoilerControl.OpMode.Type): Unit = {
    Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.opMode_Id, BoilerControl.OpMode_Payload(value))
  }

  // setter for in EventPort
  def put_programReady(): Unit = {
    Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.programReady_Id, art.Empty())
  }

  // setter for in EventPort
  def put_valve(): Unit = {
    Art.insertInInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.valve_Id, art.Empty())
  }

  // getter for out EventPort
  def get_waiting(): Option[art.Empty] = {
    val value: Option[art.Empty] = get_waiting_payload() match {
      case Some(art.Empty()) => Some(art.Empty())
      case Some(v) => halt(s"Unexpected payload on port waiting.  Expecting 'art.Empty' but received ${v}")
      case _ => None[art.Empty]()
    }
    return value
  }

  // payload getter for out EventPort
  def get_waiting_payload(): Option[art.Empty] = {
    return Art.observeOutInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.initialization_api.waiting_Id).asInstanceOf[Option[art.Empty]]
  }

  // getter for out EventPort
  def get_ready(): Option[art.Empty] = {
    val value: Option[art.Empty] = get_ready_payload() match {
      case Some(art.Empty()) => Some(art.Empty())
      case Some(v) => halt(s"Unexpected payload on port ready.  Expecting 'art.Empty' but received ${v}")
      case _ => None[art.Empty]()
    }
    return value
  }

  // payload getter for out EventPort
  def get_ready_payload(): Option[art.Empty] = {
    return Art.observeOutInfrastructurePort(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.initialization_api.ready_Id).asInstanceOf[Option[art.Empty]]
  }

}
