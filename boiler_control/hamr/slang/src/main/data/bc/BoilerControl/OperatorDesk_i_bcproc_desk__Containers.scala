// #Sireum

package bc.BoilerControl

import org.sireum._
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// containers for the pre and post state values of ports and state variables

@sig trait OperatorDesk_i_bcproc_desk_PreState_Container extends art.DataContent {
  def api_levelFail: Option[art.Empty]
  def api_levelRepairAck: Option[art.Empty]
  def api_pumpControlFail0: Option[art.Empty]
  def api_pumpControlFail1: Option[art.Empty]
  def api_pumpControlFail2: Option[art.Empty]
  def api_pumpControlFail3: Option[art.Empty]
  def api_pumpControlRepairAck0: Option[art.Empty]
  def api_pumpControlRepairAck1: Option[art.Empty]
  def api_pumpControlRepairAck2: Option[art.Empty]
  def api_pumpControlRepairAck3: Option[art.Empty]
  def api_pumpFail0: Option[art.Empty]
  def api_pumpFail1: Option[art.Empty]
  def api_pumpFail2: Option[art.Empty]
  def api_pumpFail3: Option[art.Empty]
  def api_pumpRepairAck0: Option[art.Empty]
  def api_pumpRepairAck1: Option[art.Empty]
  def api_pumpRepairAck2: Option[art.Empty]
  def api_pumpRepairAck3: Option[art.Empty]
  def api_steamFail: Option[art.Empty]
  def api_steamRepairAck: Option[art.Empty]
  def api_opMode: Option[BoilerControl.OpMode.Type]
}

// container for incoming ports
@datatype class OperatorDesk_i_bcproc_desk_PreState_Container_P (
  val api_levelFail: Option[art.Empty],
  val api_levelRepairAck: Option[art.Empty],
  val api_pumpControlFail0: Option[art.Empty],
  val api_pumpControlFail1: Option[art.Empty],
  val api_pumpControlFail2: Option[art.Empty],
  val api_pumpControlFail3: Option[art.Empty],
  val api_pumpControlRepairAck0: Option[art.Empty],
  val api_pumpControlRepairAck1: Option[art.Empty],
  val api_pumpControlRepairAck2: Option[art.Empty],
  val api_pumpControlRepairAck3: Option[art.Empty],
  val api_pumpFail0: Option[art.Empty],
  val api_pumpFail1: Option[art.Empty],
  val api_pumpFail2: Option[art.Empty],
  val api_pumpFail3: Option[art.Empty],
  val api_pumpRepairAck0: Option[art.Empty],
  val api_pumpRepairAck1: Option[art.Empty],
  val api_pumpRepairAck2: Option[art.Empty],
  val api_pumpRepairAck3: Option[art.Empty],
  val api_steamFail: Option[art.Empty],
  val api_steamRepairAck: Option[art.Empty],
  val api_opMode: Option[BoilerControl.OpMode.Type]) extends OperatorDesk_i_bcproc_desk_PreState_Container

// container for incoming ports and state variables
@datatype class OperatorDesk_i_bcproc_desk_PreState_Container_PS (
  val In_isLevelBroken: B,
  val In_isPumpBroken0: B,
  val In_isPumpBroken1: B,
  val In_isPumpBroken2: B,
  val In_isPumpBroken3: B,
  val In_isPumpControlBroken0: B,
  val In_isPumpControlBroken1: B,
  val In_isPumpControlBroken2: B,
  val In_isPumpControlBroken3: B,
  val In_isSteamBroken: B,
  val api_levelFail: Option[art.Empty],
  val api_levelRepairAck: Option[art.Empty],
  val api_pumpControlFail0: Option[art.Empty],
  val api_pumpControlFail1: Option[art.Empty],
  val api_pumpControlFail2: Option[art.Empty],
  val api_pumpControlFail3: Option[art.Empty],
  val api_pumpControlRepairAck0: Option[art.Empty],
  val api_pumpControlRepairAck1: Option[art.Empty],
  val api_pumpControlRepairAck2: Option[art.Empty],
  val api_pumpControlRepairAck3: Option[art.Empty],
  val api_pumpFail0: Option[art.Empty],
  val api_pumpFail1: Option[art.Empty],
  val api_pumpFail2: Option[art.Empty],
  val api_pumpFail3: Option[art.Empty],
  val api_pumpRepairAck0: Option[art.Empty],
  val api_pumpRepairAck1: Option[art.Empty],
  val api_pumpRepairAck2: Option[art.Empty],
  val api_pumpRepairAck3: Option[art.Empty],
  val api_steamFail: Option[art.Empty],
  val api_steamRepairAck: Option[art.Empty],
  val api_opMode: Option[BoilerControl.OpMode.Type]) extends OperatorDesk_i_bcproc_desk_PreState_Container

@sig trait OperatorDesk_i_bcproc_desk_PostState_Container extends art.DataContent {
  def api_levelFailAck: Option[art.Empty]
  def api_levelRepair: Option[art.Empty]
  def api_pumpControlFailAck0: Option[art.Empty]
  def api_pumpControlFailAck1: Option[art.Empty]
  def api_pumpControlFailAck2: Option[art.Empty]
  def api_pumpControlFailAck3: Option[art.Empty]
  def api_pumpControlRepair0: Option[art.Empty]
  def api_pumpControlRepair1: Option[art.Empty]
  def api_pumpControlRepair2: Option[art.Empty]
  def api_pumpControlRepair3: Option[art.Empty]
  def api_pumpFailAck0: Option[art.Empty]
  def api_pumpFailAck1: Option[art.Empty]
  def api_pumpFailAck2: Option[art.Empty]
  def api_pumpFailAck3: Option[art.Empty]
  def api_pumpRepair0: Option[art.Empty]
  def api_pumpRepair1: Option[art.Empty]
  def api_pumpRepair2: Option[art.Empty]
  def api_pumpRepair3: Option[art.Empty]
  def api_steamFailAck: Option[art.Empty]
  def api_steamRepair: Option[art.Empty]
  def api_stop: Option[art.Empty]
}

// container for outgoing ports
@datatype class OperatorDesk_i_bcproc_desk_PostState_Container_P (
  val api_levelFailAck: Option[art.Empty],
  val api_levelRepair: Option[art.Empty],
  val api_pumpControlFailAck0: Option[art.Empty],
  val api_pumpControlFailAck1: Option[art.Empty],
  val api_pumpControlFailAck2: Option[art.Empty],
  val api_pumpControlFailAck3: Option[art.Empty],
  val api_pumpControlRepair0: Option[art.Empty],
  val api_pumpControlRepair1: Option[art.Empty],
  val api_pumpControlRepair2: Option[art.Empty],
  val api_pumpControlRepair3: Option[art.Empty],
  val api_pumpFailAck0: Option[art.Empty],
  val api_pumpFailAck1: Option[art.Empty],
  val api_pumpFailAck2: Option[art.Empty],
  val api_pumpFailAck3: Option[art.Empty],
  val api_pumpRepair0: Option[art.Empty],
  val api_pumpRepair1: Option[art.Empty],
  val api_pumpRepair2: Option[art.Empty],
  val api_pumpRepair3: Option[art.Empty],
  val api_steamFailAck: Option[art.Empty],
  val api_steamRepair: Option[art.Empty],
  val api_stop: Option[art.Empty]) extends OperatorDesk_i_bcproc_desk_PostState_Container

// container for outgoing ports and state variables
@datatype class OperatorDesk_i_bcproc_desk_PostState_Container_PS (
  val isLevelBroken: B,
  val isPumpBroken0: B,
  val isPumpBroken1: B,
  val isPumpBroken2: B,
  val isPumpBroken3: B,
  val isPumpControlBroken0: B,
  val isPumpControlBroken1: B,
  val isPumpControlBroken2: B,
  val isPumpControlBroken3: B,
  val isSteamBroken: B,
  val api_levelFailAck: Option[art.Empty],
  val api_levelRepair: Option[art.Empty],
  val api_pumpControlFailAck0: Option[art.Empty],
  val api_pumpControlFailAck1: Option[art.Empty],
  val api_pumpControlFailAck2: Option[art.Empty],
  val api_pumpControlFailAck3: Option[art.Empty],
  val api_pumpControlRepair0: Option[art.Empty],
  val api_pumpControlRepair1: Option[art.Empty],
  val api_pumpControlRepair2: Option[art.Empty],
  val api_pumpControlRepair3: Option[art.Empty],
  val api_pumpFailAck0: Option[art.Empty],
  val api_pumpFailAck1: Option[art.Empty],
  val api_pumpFailAck2: Option[art.Empty],
  val api_pumpFailAck3: Option[art.Empty],
  val api_pumpRepair0: Option[art.Empty],
  val api_pumpRepair1: Option[art.Empty],
  val api_pumpRepair2: Option[art.Empty],
  val api_pumpRepair3: Option[art.Empty],
  val api_steamFailAck: Option[art.Empty],
  val api_steamRepair: Option[art.Empty],
  val api_stop: Option[art.Empty]) extends OperatorDesk_i_bcproc_desk_PostState_Container
