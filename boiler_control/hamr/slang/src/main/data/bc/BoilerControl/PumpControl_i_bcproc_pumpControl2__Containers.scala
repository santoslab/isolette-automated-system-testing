// #Sireum

package bc.BoilerControl

import org.sireum._
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// containers for the pre and post state values of ports and state variables

@sig trait PumpControl_i_bcproc_pumpControl2_PreState_Container extends art.DataContent {
  def api_programReady: Option[art.Empty]
  def api_opMode: Option[BoilerControl.OpMode.Type]
  def api_openPump: Option[B]
}

// container for incoming ports
@datatype class PumpControl_i_bcproc_pumpControl2_PreState_Container_P (
  val api_programReady: Option[art.Empty],
  val api_opMode: Option[BoilerControl.OpMode.Type],
  val api_openPump: Option[B]) extends PumpControl_i_bcproc_pumpControl2_PreState_Container

// container for incoming ports and state variables
@datatype class PumpControl_i_bcproc_pumpControl2_PreState_Container_PS (
  val In_isPumpFlow: B,
  val In_isPumpOpen: B,
  val In_pumpNumber: Z,
  val api_programReady: Option[art.Empty],
  val api_opMode: Option[BoilerControl.OpMode.Type],
  val api_openPump: Option[B]) extends PumpControl_i_bcproc_pumpControl2_PreState_Container

@sig trait PumpControl_i_bcproc_pumpControl2_PostState_Container extends art.DataContent {
  def api_ready: Option[art.Empty]
  def api_pumpFlow: Option[B]
  def api_pumpOpen: Option[B]
}

// container for outgoing ports
@datatype class PumpControl_i_bcproc_pumpControl2_PostState_Container_P (
  val api_ready: Option[art.Empty],
  val api_pumpFlow: Option[B],
  val api_pumpOpen: Option[B]) extends PumpControl_i_bcproc_pumpControl2_PostState_Container

// container for outgoing ports and state variables
@datatype class PumpControl_i_bcproc_pumpControl2_PostState_Container_PS (
  val isPumpFlow: B,
  val isPumpOpen: B,
  val pumpNumber: Z,
  val api_ready: Option[art.Empty],
  val api_pumpFlow: Option[B],
  val api_pumpOpen: Option[B]) extends PumpControl_i_bcproc_pumpControl2_PostState_Container
