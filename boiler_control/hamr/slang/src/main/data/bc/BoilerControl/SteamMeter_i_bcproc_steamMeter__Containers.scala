// #Sireum

package bc.BoilerControl

import org.sireum._
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// containers for the pre and post state values of ports and state variables

@sig trait SteamMeter_i_bcproc_steamMeter_PreState_Container extends art.DataContent {
  def api_programReady: Option[art.Empty]
  def api_opMode: Option[BoilerControl.OpMode.Type]
}

// container for incoming ports
@datatype class SteamMeter_i_bcproc_steamMeter_PreState_Container_P (
  val api_programReady: Option[art.Empty],
  val api_opMode: Option[BoilerControl.OpMode.Type]) extends SteamMeter_i_bcproc_steamMeter_PreState_Container

// container for incoming ports and state variables
@datatype class SteamMeter_i_bcproc_steamMeter_PreState_Container_PS (
  val In_computedRate: F32,
  val In_volume: F32,
  val api_programReady: Option[art.Empty],
  val api_opMode: Option[BoilerControl.OpMode.Type]) extends SteamMeter_i_bcproc_steamMeter_PreState_Container

@sig trait SteamMeter_i_bcproc_steamMeter_PostState_Container extends art.DataContent {
  def api_ready: Option[art.Empty]
  def api_rate: Option[F32]
}

// container for outgoing ports
@datatype class SteamMeter_i_bcproc_steamMeter_PostState_Container_P (
  val api_ready: Option[art.Empty],
  val api_rate: Option[F32]) extends SteamMeter_i_bcproc_steamMeter_PostState_Container

// container for outgoing ports and state variables
@datatype class SteamMeter_i_bcproc_steamMeter_PostState_Container_PS (
  val computedRate: F32,
  val volume: F32,
  val api_ready: Option[art.Empty],
  val api_rate: Option[F32]) extends SteamMeter_i_bcproc_steamMeter_PostState_Container
