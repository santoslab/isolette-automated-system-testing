// #Sireum

package bc.BoilerControl

import org.sireum._
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// containers for the pre and post state values of ports and state variables

@sig trait BoilerControl_i_bcproc_control_PreState_Container extends art.DataContent {
  def api_boilerReady: Option[art.Empty]
  def api_boilerWaiting: Option[art.Empty]
  def api_levelFailAck: Option[art.Empty]
  def api_levelRepair: Option[art.Empty]
  def api_pumpControlFailAck0: Option[art.Empty]
  def api_pumpControlFailAck1: Option[art.Empty]
  def api_pumpControlFailAck2: Option[art.Empty]
  def api_pumpControlFailAck3: Option[art.Empty]
  def api_pumpControlReady0: Option[art.Empty]
  def api_pumpControlReady1: Option[art.Empty]
  def api_pumpControlReady2: Option[art.Empty]
  def api_pumpControlReady3: Option[art.Empty]
  def api_pumpControlRepair0: Option[art.Empty]
  def api_pumpControlRepair1: Option[art.Empty]
  def api_pumpControlRepair2: Option[art.Empty]
  def api_pumpControlRepair3: Option[art.Empty]
  def api_pumpFailAck0: Option[art.Empty]
  def api_pumpFailAck1: Option[art.Empty]
  def api_pumpFailAck2: Option[art.Empty]
  def api_pumpFailAck3: Option[art.Empty]
  def api_pumpRepair0: Option[art.Empty]
  def api_pumpRepair1: Option[art.Empty]
  def api_pumpRepair2: Option[art.Empty]
  def api_pumpRepair3: Option[art.Empty]
  def api_steamFailAck: Option[art.Empty]
  def api_steamMeterReady: Option[art.Empty]
  def api_steamRepair: Option[art.Empty]
  def api_stop: Option[art.Empty]
  def api_waterMeterReady: Option[art.Empty]
  def api_pumpFlow0: Option[B]
  def api_pumpFlow1: Option[B]
  def api_pumpFlow2: Option[B]
  def api_pumpFlow3: Option[B]
  def api_pumpOpen0: Option[B]
  def api_pumpOpen1: Option[B]
  def api_pumpOpen2: Option[B]
  def api_pumpOpen3: Option[B]
  def api_steamRate: Option[F32]
  def api_waterLevel: Option[F32]
}

// container for incoming ports
@datatype class BoilerControl_i_bcproc_control_PreState_Container_P (
  val api_boilerReady: Option[art.Empty],
  val api_boilerWaiting: Option[art.Empty],
  val api_levelFailAck: Option[art.Empty],
  val api_levelRepair: Option[art.Empty],
  val api_pumpControlFailAck0: Option[art.Empty],
  val api_pumpControlFailAck1: Option[art.Empty],
  val api_pumpControlFailAck2: Option[art.Empty],
  val api_pumpControlFailAck3: Option[art.Empty],
  val api_pumpControlReady0: Option[art.Empty],
  val api_pumpControlReady1: Option[art.Empty],
  val api_pumpControlReady2: Option[art.Empty],
  val api_pumpControlReady3: Option[art.Empty],
  val api_pumpControlRepair0: Option[art.Empty],
  val api_pumpControlRepair1: Option[art.Empty],
  val api_pumpControlRepair2: Option[art.Empty],
  val api_pumpControlRepair3: Option[art.Empty],
  val api_pumpFailAck0: Option[art.Empty],
  val api_pumpFailAck1: Option[art.Empty],
  val api_pumpFailAck2: Option[art.Empty],
  val api_pumpFailAck3: Option[art.Empty],
  val api_pumpRepair0: Option[art.Empty],
  val api_pumpRepair1: Option[art.Empty],
  val api_pumpRepair2: Option[art.Empty],
  val api_pumpRepair3: Option[art.Empty],
  val api_steamFailAck: Option[art.Empty],
  val api_steamMeterReady: Option[art.Empty],
  val api_steamRepair: Option[art.Empty],
  val api_stop: Option[art.Empty],
  val api_waterMeterReady: Option[art.Empty],
  val api_pumpFlow0: Option[B],
  val api_pumpFlow1: Option[B],
  val api_pumpFlow2: Option[B],
  val api_pumpFlow3: Option[B],
  val api_pumpOpen0: Option[B],
  val api_pumpOpen1: Option[B],
  val api_pumpOpen2: Option[B],
  val api_pumpOpen3: Option[B],
  val api_steamRate: Option[F32],
  val api_waterLevel: Option[F32]) extends BoilerControl_i_bcproc_control_PreState_Container

// container for incoming ports and state variables
@datatype class BoilerControl_i_bcproc_control_PreState_Container_PS (
  val In_C: F32,
  val In_M1: F32,
  val In_M2: F32,
  val In_N1: F32,
  val In_N2: F32,
  val In_P: F32,
  val In_U1: F32,
  val In_U2: F32,
  val In_W: F32,
  val In_hasBoilerSentWaiting: B,
  val In_isPump0Failing: B,
  val In_isPump1Failing: B,
  val In_isPump2Failing: B,
  val In_isPump3Failing: B,
  val In_isSteamMeterFailing: B,
  val In_isWaterMeterFailing: B,
  val In_mode: BoilerControl.OpMode.Type,
  val In_p0: F32,
  val In_p1: F32,
  val In_p2: F32,
  val In_p3: F32,
  val In_q: F32,
  val In_qa1: F32,
  val In_qa2: F32,
  val In_qc1: F32,
  val In_qc2: F32,
  val In_shouldUpdatePumps: B,
  val In_transmissionFailure: B,
  val In_v_steamRate: F32,
  val api_boilerReady: Option[art.Empty],
  val api_boilerWaiting: Option[art.Empty],
  val api_levelFailAck: Option[art.Empty],
  val api_levelRepair: Option[art.Empty],
  val api_pumpControlFailAck0: Option[art.Empty],
  val api_pumpControlFailAck1: Option[art.Empty],
  val api_pumpControlFailAck2: Option[art.Empty],
  val api_pumpControlFailAck3: Option[art.Empty],
  val api_pumpControlReady0: Option[art.Empty],
  val api_pumpControlReady1: Option[art.Empty],
  val api_pumpControlReady2: Option[art.Empty],
  val api_pumpControlReady3: Option[art.Empty],
  val api_pumpControlRepair0: Option[art.Empty],
  val api_pumpControlRepair1: Option[art.Empty],
  val api_pumpControlRepair2: Option[art.Empty],
  val api_pumpControlRepair3: Option[art.Empty],
  val api_pumpFailAck0: Option[art.Empty],
  val api_pumpFailAck1: Option[art.Empty],
  val api_pumpFailAck2: Option[art.Empty],
  val api_pumpFailAck3: Option[art.Empty],
  val api_pumpRepair0: Option[art.Empty],
  val api_pumpRepair1: Option[art.Empty],
  val api_pumpRepair2: Option[art.Empty],
  val api_pumpRepair3: Option[art.Empty],
  val api_steamFailAck: Option[art.Empty],
  val api_steamMeterReady: Option[art.Empty],
  val api_steamRepair: Option[art.Empty],
  val api_stop: Option[art.Empty],
  val api_waterMeterReady: Option[art.Empty],
  val api_pumpFlow0: Option[B],
  val api_pumpFlow1: Option[B],
  val api_pumpFlow2: Option[B],
  val api_pumpFlow3: Option[B],
  val api_pumpOpen0: Option[B],
  val api_pumpOpen1: Option[B],
  val api_pumpOpen2: Option[B],
  val api_pumpOpen3: Option[B],
  val api_steamRate: Option[F32],
  val api_waterLevel: Option[F32]) extends BoilerControl_i_bcproc_control_PreState_Container

@sig trait BoilerControl_i_bcproc_control_PostState_Container extends art.DataContent {
  def api_levelFail: Option[art.Empty]
  def api_levelRepairAck: Option[art.Empty]
  def api_pumpControlFail0: Option[art.Empty]
  def api_pumpControlFail1: Option[art.Empty]
  def api_pumpControlFail2: Option[art.Empty]
  def api_pumpControlFail3: Option[art.Empty]
  def api_pumpControlRepairAck0: Option[art.Empty]
  def api_pumpControlRepairAck1: Option[art.Empty]
  def api_pumpControlRepairAck2: Option[art.Empty]
  def api_pumpControlRepairAck3: Option[art.Empty]
  def api_pumpFail0: Option[art.Empty]
  def api_pumpFail1: Option[art.Empty]
  def api_pumpFail2: Option[art.Empty]
  def api_pumpFail3: Option[art.Empty]
  def api_pumpRepairAck0: Option[art.Empty]
  def api_pumpRepairAck1: Option[art.Empty]
  def api_pumpRepairAck2: Option[art.Empty]
  def api_pumpRepairAck3: Option[art.Empty]
  def api_ready: Option[art.Empty]
  def api_steamFail: Option[art.Empty]
  def api_steamRepairAck: Option[art.Empty]
  def api_valve: Option[art.Empty]
  def api_opMode: Option[BoilerControl.OpMode.Type]
  def api_openPump0: Option[B]
  def api_openPump1: Option[B]
  def api_openPump2: Option[B]
  def api_openPump3: Option[B]
}

// container for outgoing ports
@datatype class BoilerControl_i_bcproc_control_PostState_Container_P (
  val api_levelFail: Option[art.Empty],
  val api_levelRepairAck: Option[art.Empty],
  val api_pumpControlFail0: Option[art.Empty],
  val api_pumpControlFail1: Option[art.Empty],
  val api_pumpControlFail2: Option[art.Empty],
  val api_pumpControlFail3: Option[art.Empty],
  val api_pumpControlRepairAck0: Option[art.Empty],
  val api_pumpControlRepairAck1: Option[art.Empty],
  val api_pumpControlRepairAck2: Option[art.Empty],
  val api_pumpControlRepairAck3: Option[art.Empty],
  val api_pumpFail0: Option[art.Empty],
  val api_pumpFail1: Option[art.Empty],
  val api_pumpFail2: Option[art.Empty],
  val api_pumpFail3: Option[art.Empty],
  val api_pumpRepairAck0: Option[art.Empty],
  val api_pumpRepairAck1: Option[art.Empty],
  val api_pumpRepairAck2: Option[art.Empty],
  val api_pumpRepairAck3: Option[art.Empty],
  val api_ready: Option[art.Empty],
  val api_steamFail: Option[art.Empty],
  val api_steamRepairAck: Option[art.Empty],
  val api_valve: Option[art.Empty],
  val api_opMode: Option[BoilerControl.OpMode.Type],
  val api_openPump0: Option[B],
  val api_openPump1: Option[B],
  val api_openPump2: Option[B],
  val api_openPump3: Option[B]) extends BoilerControl_i_bcproc_control_PostState_Container

// container for outgoing ports and state variables
@datatype class BoilerControl_i_bcproc_control_PostState_Container_PS (
  val C: F32,
  val M1: F32,
  val M2: F32,
  val N1: F32,
  val N2: F32,
  val P: F32,
  val U1: F32,
  val U2: F32,
  val W: F32,
  val hasBoilerSentWaiting: B,
  val isPump0Failing: B,
  val isPump1Failing: B,
  val isPump2Failing: B,
  val isPump3Failing: B,
  val isSteamMeterFailing: B,
  val isWaterMeterFailing: B,
  val mode: BoilerControl.OpMode.Type,
  val p0: F32,
  val p1: F32,
  val p2: F32,
  val p3: F32,
  val q: F32,
  val qa1: F32,
  val qa2: F32,
  val qc1: F32,
  val qc2: F32,
  val shouldUpdatePumps: B,
  val transmissionFailure: B,
  val v_steamRate: F32,
  val api_levelFail: Option[art.Empty],
  val api_levelRepairAck: Option[art.Empty],
  val api_pumpControlFail0: Option[art.Empty],
  val api_pumpControlFail1: Option[art.Empty],
  val api_pumpControlFail2: Option[art.Empty],
  val api_pumpControlFail3: Option[art.Empty],
  val api_pumpControlRepairAck0: Option[art.Empty],
  val api_pumpControlRepairAck1: Option[art.Empty],
  val api_pumpControlRepairAck2: Option[art.Empty],
  val api_pumpControlRepairAck3: Option[art.Empty],
  val api_pumpFail0: Option[art.Empty],
  val api_pumpFail1: Option[art.Empty],
  val api_pumpFail2: Option[art.Empty],
  val api_pumpFail3: Option[art.Empty],
  val api_pumpRepairAck0: Option[art.Empty],
  val api_pumpRepairAck1: Option[art.Empty],
  val api_pumpRepairAck2: Option[art.Empty],
  val api_pumpRepairAck3: Option[art.Empty],
  val api_ready: Option[art.Empty],
  val api_steamFail: Option[art.Empty],
  val api_steamRepairAck: Option[art.Empty],
  val api_valve: Option[art.Empty],
  val api_opMode: Option[BoilerControl.OpMode.Type],
  val api_openPump0: Option[B],
  val api_openPump1: Option[B],
  val api_openPump2: Option[B],
  val api_openPump3: Option[B]) extends BoilerControl_i_bcproc_control_PostState_Container
