// #Sireum

package bc.BoilerControl

import org.sireum._
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
object OperatorDesk_i_bcproc_desk_GumboX {
  /** Initialize Entrypoint Contract
    *
    * guarantee REQ_OPDESK_INIT_1
    *   All 'is part broken' state variable booleans start equal to false.
    * @param isLevelBroken post-state state variable
    * @param isPumpBroken0 post-state state variable
    * @param isPumpBroken1 post-state state variable
    * @param isPumpBroken2 post-state state variable
    * @param isPumpBroken3 post-state state variable
    * @param isPumpControlBroken0 post-state state variable
    * @param isPumpControlBroken1 post-state state variable
    * @param isPumpControlBroken2 post-state state variable
    * @param isPumpControlBroken3 post-state state variable
    * @param isSteamBroken post-state state variable
    */
  @strictpure def initialize_REQ_OPDESK_INIT_1 (
      isLevelBroken: Base_Types.Boolean,
      isPumpBroken0: Base_Types.Boolean,
      isPumpBroken1: Base_Types.Boolean,
      isPumpBroken2: Base_Types.Boolean,
      isPumpBroken3: Base_Types.Boolean,
      isPumpControlBroken0: Base_Types.Boolean,
      isPumpControlBroken1: Base_Types.Boolean,
      isPumpControlBroken2: Base_Types.Boolean,
      isPumpControlBroken3: Base_Types.Boolean,
      isSteamBroken: Base_Types.Boolean): B =
    !(isPumpBroken0 || isPumpBroken1 ||
       isPumpBroken2 ||
       isPumpBroken3 ||
       isPumpControlBroken0 ||
       isPumpControlBroken1 ||
       isPumpControlBroken2 ||
       isPumpControlBroken3 ||
       isLevelBroken ||
       isSteamBroken)

  /** Initialize Entrypoint Contract
    *
    * guarantee REQ_OPDESK_INIT_2
    *   All repair messages are not send during initialization.
    * @param api_levelRepair outgoing event port
    * @param api_pumpControlRepair0 outgoing event port
    * @param api_pumpControlRepair1 outgoing event port
    * @param api_pumpControlRepair2 outgoing event port
    * @param api_pumpControlRepair3 outgoing event port
    * @param api_pumpRepair0 outgoing event port
    * @param api_pumpRepair1 outgoing event port
    * @param api_pumpRepair2 outgoing event port
    * @param api_pumpRepair3 outgoing event port
    * @param api_steamRepair outgoing event port
    */
  @strictpure def initialize_REQ_OPDESK_INIT_2 (
      api_levelRepair: Option[art.Empty],
      api_pumpControlRepair0: Option[art.Empty],
      api_pumpControlRepair1: Option[art.Empty],
      api_pumpControlRepair2: Option[art.Empty],
      api_pumpControlRepair3: Option[art.Empty],
      api_pumpRepair0: Option[art.Empty],
      api_pumpRepair1: Option[art.Empty],
      api_pumpRepair2: Option[art.Empty],
      api_pumpRepair3: Option[art.Empty],
      api_steamRepair: Option[art.Empty]): B =
    api_pumpRepair0.isEmpty && api_pumpRepair1.isEmpty &&
      api_pumpRepair2.isEmpty &&
      api_pumpRepair3.isEmpty &&
      api_pumpControlRepair0.isEmpty &&
      api_pumpControlRepair1.isEmpty &&
      api_pumpControlRepair2.isEmpty &&
      api_pumpControlRepair3.isEmpty &&
      api_levelRepair.isEmpty &&
      api_steamRepair.isEmpty

  /** Initialize Entrypoint Contract
    *
    * guarantee REQ_OPDESK_INIT_3
    *   All failure acknowledgement messages are not send during initialization.
    * @param api_levelFailAck outgoing event port
    * @param api_pumpControlFailAck0 outgoing event port
    * @param api_pumpControlFailAck1 outgoing event port
    * @param api_pumpControlFailAck2 outgoing event port
    * @param api_pumpControlFailAck3 outgoing event port
    * @param api_pumpFailAck0 outgoing event port
    * @param api_pumpFailAck1 outgoing event port
    * @param api_pumpFailAck2 outgoing event port
    * @param api_pumpFailAck3 outgoing event port
    * @param api_steamFailAck outgoing event port
    */
  @strictpure def initialize_REQ_OPDESK_INIT_3 (
      api_levelFailAck: Option[art.Empty],
      api_pumpControlFailAck0: Option[art.Empty],
      api_pumpControlFailAck1: Option[art.Empty],
      api_pumpControlFailAck2: Option[art.Empty],
      api_pumpControlFailAck3: Option[art.Empty],
      api_pumpFailAck0: Option[art.Empty],
      api_pumpFailAck1: Option[art.Empty],
      api_pumpFailAck2: Option[art.Empty],
      api_pumpFailAck3: Option[art.Empty],
      api_steamFailAck: Option[art.Empty]): B =
    api_pumpFailAck0.isEmpty && api_pumpFailAck1.isEmpty &&
      api_pumpFailAck2.isEmpty &&
      api_pumpFailAck3.isEmpty &&
      api_pumpControlFailAck0.isEmpty &&
      api_pumpControlFailAck1.isEmpty &&
      api_pumpControlFailAck2.isEmpty &&
      api_pumpControlFailAck3.isEmpty &&
      api_levelFailAck.isEmpty &&
      api_steamFailAck.isEmpty

  /** Initialize Entrypoint Contract
    *
    * guarantee REQ_OPDESK_INIT_4
    *   Stop message is not sent during Initialization.
    * @param api_stop outgoing event port
    */
  @strictpure def initialize_REQ_OPDESK_INIT_4 (
      api_stop: Option[art.Empty]): B =
    api_stop.isEmpty

  /** IEP-Guar: Initialize Entrypoint Contracts for desk
    *
    * @param isLevelBroken post-state state variable
    * @param isPumpBroken0 post-state state variable
    * @param isPumpBroken1 post-state state variable
    * @param isPumpBroken2 post-state state variable
    * @param isPumpBroken3 post-state state variable
    * @param isPumpControlBroken0 post-state state variable
    * @param isPumpControlBroken1 post-state state variable
    * @param isPumpControlBroken2 post-state state variable
    * @param isPumpControlBroken3 post-state state variable
    * @param isSteamBroken post-state state variable
    * @param api_levelFailAck outgoing event port
    * @param api_levelRepair outgoing event port
    * @param api_pumpControlFailAck0 outgoing event port
    * @param api_pumpControlFailAck1 outgoing event port
    * @param api_pumpControlFailAck2 outgoing event port
    * @param api_pumpControlFailAck3 outgoing event port
    * @param api_pumpControlRepair0 outgoing event port
    * @param api_pumpControlRepair1 outgoing event port
    * @param api_pumpControlRepair2 outgoing event port
    * @param api_pumpControlRepair3 outgoing event port
    * @param api_pumpFailAck0 outgoing event port
    * @param api_pumpFailAck1 outgoing event port
    * @param api_pumpFailAck2 outgoing event port
    * @param api_pumpFailAck3 outgoing event port
    * @param api_pumpRepair0 outgoing event port
    * @param api_pumpRepair1 outgoing event port
    * @param api_pumpRepair2 outgoing event port
    * @param api_pumpRepair3 outgoing event port
    * @param api_steamFailAck outgoing event port
    * @param api_steamRepair outgoing event port
    * @param api_stop outgoing event port
    */
  @strictpure def initialize_IEP_Guar (
      isLevelBroken: Base_Types.Boolean,
      isPumpBroken0: Base_Types.Boolean,
      isPumpBroken1: Base_Types.Boolean,
      isPumpBroken2: Base_Types.Boolean,
      isPumpBroken3: Base_Types.Boolean,
      isPumpControlBroken0: Base_Types.Boolean,
      isPumpControlBroken1: Base_Types.Boolean,
      isPumpControlBroken2: Base_Types.Boolean,
      isPumpControlBroken3: Base_Types.Boolean,
      isSteamBroken: Base_Types.Boolean,
      api_levelFailAck: Option[art.Empty],
      api_levelRepair: Option[art.Empty],
      api_pumpControlFailAck0: Option[art.Empty],
      api_pumpControlFailAck1: Option[art.Empty],
      api_pumpControlFailAck2: Option[art.Empty],
      api_pumpControlFailAck3: Option[art.Empty],
      api_pumpControlRepair0: Option[art.Empty],
      api_pumpControlRepair1: Option[art.Empty],
      api_pumpControlRepair2: Option[art.Empty],
      api_pumpControlRepair3: Option[art.Empty],
      api_pumpFailAck0: Option[art.Empty],
      api_pumpFailAck1: Option[art.Empty],
      api_pumpFailAck2: Option[art.Empty],
      api_pumpFailAck3: Option[art.Empty],
      api_pumpRepair0: Option[art.Empty],
      api_pumpRepair1: Option[art.Empty],
      api_pumpRepair2: Option[art.Empty],
      api_pumpRepair3: Option[art.Empty],
      api_steamFailAck: Option[art.Empty],
      api_steamRepair: Option[art.Empty],
      api_stop: Option[art.Empty]): B =
    initialize_REQ_OPDESK_INIT_1(isLevelBroken, isPumpBroken0, isPumpBroken1, isPumpBroken2, isPumpBroken3, isPumpControlBroken0, isPumpControlBroken1, isPumpControlBroken2, isPumpControlBroken3, isSteamBroken) &
    initialize_REQ_OPDESK_INIT_2(api_levelRepair, api_pumpControlRepair0, api_pumpControlRepair1, api_pumpControlRepair2, api_pumpControlRepair3, api_pumpRepair0, api_pumpRepair1, api_pumpRepair2, api_pumpRepair3, api_steamRepair) &
    initialize_REQ_OPDESK_INIT_3(api_levelFailAck, api_pumpControlFailAck0, api_pumpControlFailAck1, api_pumpControlFailAck2, api_pumpControlFailAck3, api_pumpFailAck0, api_pumpFailAck1, api_pumpFailAck2, api_pumpFailAck3, api_steamFailAck) &
    initialize_REQ_OPDESK_INIT_4(api_stop)

  /** IEP-Post: Initialize Entrypoint Post-Condition
    *
    * @param isLevelBroken post-state state variable
    * @param isPumpBroken0 post-state state variable
    * @param isPumpBroken1 post-state state variable
    * @param isPumpBroken2 post-state state variable
    * @param isPumpBroken3 post-state state variable
    * @param isPumpControlBroken0 post-state state variable
    * @param isPumpControlBroken1 post-state state variable
    * @param isPumpControlBroken2 post-state state variable
    * @param isPumpControlBroken3 post-state state variable
    * @param isSteamBroken post-state state variable
    * @param api_levelFailAck outgoing event port
    * @param api_levelRepair outgoing event port
    * @param api_pumpControlFailAck0 outgoing event port
    * @param api_pumpControlFailAck1 outgoing event port
    * @param api_pumpControlFailAck2 outgoing event port
    * @param api_pumpControlFailAck3 outgoing event port
    * @param api_pumpControlRepair0 outgoing event port
    * @param api_pumpControlRepair1 outgoing event port
    * @param api_pumpControlRepair2 outgoing event port
    * @param api_pumpControlRepair3 outgoing event port
    * @param api_pumpFailAck0 outgoing event port
    * @param api_pumpFailAck1 outgoing event port
    * @param api_pumpFailAck2 outgoing event port
    * @param api_pumpFailAck3 outgoing event port
    * @param api_pumpRepair0 outgoing event port
    * @param api_pumpRepair1 outgoing event port
    * @param api_pumpRepair2 outgoing event port
    * @param api_pumpRepair3 outgoing event port
    * @param api_steamFailAck outgoing event port
    * @param api_steamRepair outgoing event port
    * @param api_stop outgoing event port
    */
  @strictpure def inititialize_IEP_Post (
      isLevelBroken: Base_Types.Boolean,
      isPumpBroken0: Base_Types.Boolean,
      isPumpBroken1: Base_Types.Boolean,
      isPumpBroken2: Base_Types.Boolean,
      isPumpBroken3: Base_Types.Boolean,
      isPumpControlBroken0: Base_Types.Boolean,
      isPumpControlBroken1: Base_Types.Boolean,
      isPumpControlBroken2: Base_Types.Boolean,
      isPumpControlBroken3: Base_Types.Boolean,
      isSteamBroken: Base_Types.Boolean,
      api_levelFailAck: Option[art.Empty],
      api_levelRepair: Option[art.Empty],
      api_pumpControlFailAck0: Option[art.Empty],
      api_pumpControlFailAck1: Option[art.Empty],
      api_pumpControlFailAck2: Option[art.Empty],
      api_pumpControlFailAck3: Option[art.Empty],
      api_pumpControlRepair0: Option[art.Empty],
      api_pumpControlRepair1: Option[art.Empty],
      api_pumpControlRepair2: Option[art.Empty],
      api_pumpControlRepair3: Option[art.Empty],
      api_pumpFailAck0: Option[art.Empty],
      api_pumpFailAck1: Option[art.Empty],
      api_pumpFailAck2: Option[art.Empty],
      api_pumpFailAck3: Option[art.Empty],
      api_pumpRepair0: Option[art.Empty],
      api_pumpRepair1: Option[art.Empty],
      api_pumpRepair2: Option[art.Empty],
      api_pumpRepair3: Option[art.Empty],
      api_steamFailAck: Option[art.Empty],
      api_steamRepair: Option[art.Empty],
      api_stop: Option[art.Empty]): B =
    (// IEP-Guar: Initialize Entrypoint contract for desk
     initialize_IEP_Guar(isLevelBroken, isPumpBroken0, isPumpBroken1, isPumpBroken2, isPumpBroken3, isPumpControlBroken0, isPumpControlBroken1, isPumpControlBroken2, isPumpControlBroken3, isSteamBroken, api_levelFailAck, api_levelRepair, api_pumpControlFailAck0, api_pumpControlFailAck1, api_pumpControlFailAck2, api_pumpControlFailAck3, api_pumpControlRepair0, api_pumpControlRepair1, api_pumpControlRepair2, api_pumpControlRepair3, api_pumpFailAck0, api_pumpFailAck1, api_pumpFailAck2, api_pumpFailAck3, api_pumpRepair0, api_pumpRepair1, api_pumpRepair2, api_pumpRepair3, api_steamFailAck, api_steamRepair, api_stop))

  /** IEP-Post: Initialize Entrypoint Post-Condition via container
    *
    * @param post Container holding the value of incoming ports and the pre-state values of state variables
    */
  @strictpure def inititialize_IEP_Post_Container (post: OperatorDesk_i_bcproc_desk_PostState_Container_PS): B =
    inititialize_IEP_Post (
      isLevelBroken = post.isLevelBroken,
      isPumpBroken0 = post.isPumpBroken0,
      isPumpBroken1 = post.isPumpBroken1,
      isPumpBroken2 = post.isPumpBroken2,
      isPumpBroken3 = post.isPumpBroken3,
      isPumpControlBroken0 = post.isPumpControlBroken0,
      isPumpControlBroken1 = post.isPumpControlBroken1,
      isPumpControlBroken2 = post.isPumpControlBroken2,
      isPumpControlBroken3 = post.isPumpControlBroken3,
      isSteamBroken = post.isSteamBroken,
      api_levelFailAck = post.api_levelFailAck,
      api_levelRepair = post.api_levelRepair,
      api_pumpControlFailAck0 = post.api_pumpControlFailAck0,
      api_pumpControlFailAck1 = post.api_pumpControlFailAck1,
      api_pumpControlFailAck2 = post.api_pumpControlFailAck2,
      api_pumpControlFailAck3 = post.api_pumpControlFailAck3,
      api_pumpControlRepair0 = post.api_pumpControlRepair0,
      api_pumpControlRepair1 = post.api_pumpControlRepair1,
      api_pumpControlRepair2 = post.api_pumpControlRepair2,
      api_pumpControlRepair3 = post.api_pumpControlRepair3,
      api_pumpFailAck0 = post.api_pumpFailAck0,
      api_pumpFailAck1 = post.api_pumpFailAck1,
      api_pumpFailAck2 = post.api_pumpFailAck2,
      api_pumpFailAck3 = post.api_pumpFailAck3,
      api_pumpRepair0 = post.api_pumpRepair0,
      api_pumpRepair1 = post.api_pumpRepair1,
      api_pumpRepair2 = post.api_pumpRepair2,
      api_pumpRepair3 = post.api_pumpRepair3,
      api_steamFailAck = post.api_steamFailAck,
      api_steamRepair = post.api_steamRepair,
      api_stop = post.api_stop)

  /** guarantee REQ_OPDESK_COMP_1
    *   If there is not already a failure on Pump 0 and there is a nonempty port saying Pump 0 has failed, then OpDesk will acknowledge the failure.
    * @param In_isPumpBroken0 pre-state state variable
    * @param In_isPumpControlBroken0 pre-state state variable
    * @param isPumpBroken0 post-state state variable
    * @param isPumpControlBroken0 post-state state variable
    * @param api_pumpControlFail0 incoming event port
    * @param api_pumpFail0 incoming event port
    * @param api_pumpControlFailAck0 outgoing event port
    * @param api_pumpFailAck0 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_1(
      In_isPumpBroken0: Base_Types.Boolean,
      In_isPumpControlBroken0: Base_Types.Boolean,
      isPumpBroken0: Base_Types.Boolean,
      isPumpControlBroken0: Base_Types.Boolean,
      api_pumpControlFail0: Option[art.Empty],
      api_pumpFail0: Option[art.Empty],
      api_pumpControlFailAck0: Option[art.Empty],
      api_pumpFailAck0: Option[art.Empty]): B =
    (!(In_isPumpBroken0 || In_isPumpControlBroken0) &&
       (api_pumpFail0.nonEmpty || api_pumpControlFail0.nonEmpty)) -->:
      (api_pumpFailAck0.nonEmpty && api_pumpControlFailAck0.nonEmpty &&
         isPumpBroken0 &&
         isPumpControlBroken0)

  /** guarantee REQ_OPDESK_COMP_2
    *   If there is not already a failure on Pump 1 and there is a nonempty port saying Pump 1 has failed, then OpDesk will acknowledge the failure.
    * @param In_isPumpBroken1 pre-state state variable
    * @param In_isPumpControlBroken1 pre-state state variable
    * @param isPumpBroken1 post-state state variable
    * @param isPumpControlBroken1 post-state state variable
    * @param api_pumpControlFail1 incoming event port
    * @param api_pumpFail1 incoming event port
    * @param api_pumpControlFailAck1 outgoing event port
    * @param api_pumpFailAck1 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_2(
      In_isPumpBroken1: Base_Types.Boolean,
      In_isPumpControlBroken1: Base_Types.Boolean,
      isPumpBroken1: Base_Types.Boolean,
      isPumpControlBroken1: Base_Types.Boolean,
      api_pumpControlFail1: Option[art.Empty],
      api_pumpFail1: Option[art.Empty],
      api_pumpControlFailAck1: Option[art.Empty],
      api_pumpFailAck1: Option[art.Empty]): B =
    (!(In_isPumpBroken1 || In_isPumpControlBroken1) &&
       (api_pumpFail1.nonEmpty || api_pumpControlFail1.nonEmpty)) -->:
      (api_pumpFailAck1.nonEmpty && api_pumpControlFailAck1.nonEmpty &&
         isPumpBroken1 &&
         isPumpControlBroken1)

  /** guarantee REQ_OPDESK_COMP_3
    *   If there is not already a failure on Pump 2 and there is a nonempty port saying Pump 2 has failed, then OpDesk will acknowledge the failure.
    * @param In_isPumpBroken2 pre-state state variable
    * @param In_isPumpControlBroken2 pre-state state variable
    * @param isPumpBroken2 post-state state variable
    * @param isPumpControlBroken2 post-state state variable
    * @param api_pumpControlFail2 incoming event port
    * @param api_pumpFail2 incoming event port
    * @param api_pumpControlFailAck2 outgoing event port
    * @param api_pumpFailAck2 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_3(
      In_isPumpBroken2: Base_Types.Boolean,
      In_isPumpControlBroken2: Base_Types.Boolean,
      isPumpBroken2: Base_Types.Boolean,
      isPumpControlBroken2: Base_Types.Boolean,
      api_pumpControlFail2: Option[art.Empty],
      api_pumpFail2: Option[art.Empty],
      api_pumpControlFailAck2: Option[art.Empty],
      api_pumpFailAck2: Option[art.Empty]): B =
    (!(In_isPumpBroken2 || In_isPumpControlBroken2) &&
       (api_pumpFail2.nonEmpty || api_pumpControlFail2.nonEmpty)) -->:
      (api_pumpFailAck2.nonEmpty && api_pumpControlFailAck2.nonEmpty &&
         isPumpBroken2 &&
         isPumpControlBroken2)

  /** guarantee REQ_OPDESK_COMP_4
    *   If there is not already a failure on Pump 3 and there is a nonempty port saying Pump 3 has failed, then OpDesk will acknowledge the failure.
    * @param In_isPumpBroken3 pre-state state variable
    * @param In_isPumpControlBroken3 pre-state state variable
    * @param isPumpBroken3 post-state state variable
    * @param isPumpControlBroken3 post-state state variable
    * @param api_pumpControlFail3 incoming event port
    * @param api_pumpFail3 incoming event port
    * @param api_pumpControlFailAck3 outgoing event port
    * @param api_pumpFailAck3 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_4(
      In_isPumpBroken3: Base_Types.Boolean,
      In_isPumpControlBroken3: Base_Types.Boolean,
      isPumpBroken3: Base_Types.Boolean,
      isPumpControlBroken3: Base_Types.Boolean,
      api_pumpControlFail3: Option[art.Empty],
      api_pumpFail3: Option[art.Empty],
      api_pumpControlFailAck3: Option[art.Empty],
      api_pumpFailAck3: Option[art.Empty]): B =
    (!(In_isPumpBroken3 || In_isPumpControlBroken3) &&
       (api_pumpFail3.nonEmpty || api_pumpControlFail3.nonEmpty)) -->:
      (api_pumpFailAck3.nonEmpty && api_pumpControlFailAck3.nonEmpty &&
         isPumpBroken3 &&
         isPumpControlBroken3)

  /** guarantee REQ_OPDESK_COMP_5
    *   For Pump 0, if there is no failure present from the event ports, then there will be no failure acknowledgement sent for the component.
    * @param api_pumpControlFail0 incoming event port
    * @param api_pumpFail0 incoming event port
    * @param api_pumpControlFailAck0 outgoing event port
    * @param api_pumpFailAck0 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_5(
      api_pumpControlFail0: Option[art.Empty],
      api_pumpFail0: Option[art.Empty],
      api_pumpControlFailAck0: Option[art.Empty],
      api_pumpFailAck0: Option[art.Empty]): B =
    (!(api_pumpFail0.nonEmpty || api_pumpControlFail0.nonEmpty)) -->:
      (api_pumpFailAck0.isEmpty && api_pumpControlFailAck0.isEmpty)

  /** guarantee REQ_OPDESK_COMP_6
    *   For Pump 1, if there is no failure present from the event ports, then there will be no failure acknowledgement sent for the component.
    * @param api_pumpControlFail1 incoming event port
    * @param api_pumpFail1 incoming event port
    * @param api_pumpControlFailAck1 outgoing event port
    * @param api_pumpFailAck1 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_6(
      api_pumpControlFail1: Option[art.Empty],
      api_pumpFail1: Option[art.Empty],
      api_pumpControlFailAck1: Option[art.Empty],
      api_pumpFailAck1: Option[art.Empty]): B =
    (!(api_pumpFail1.nonEmpty || api_pumpControlFail1.nonEmpty)) -->:
      (api_pumpFailAck1.isEmpty && api_pumpControlFailAck1.isEmpty)

  /** guarantee REQ_OPDESK_COMP_7
    *   For Pump 2, if there is no failure present from the event ports, then there will be no failure acknowledgement sent for the component.
    * @param api_pumpControlFail2 incoming event port
    * @param api_pumpFail2 incoming event port
    * @param api_pumpControlFailAck2 outgoing event port
    * @param api_pumpFailAck2 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_7(
      api_pumpControlFail2: Option[art.Empty],
      api_pumpFail2: Option[art.Empty],
      api_pumpControlFailAck2: Option[art.Empty],
      api_pumpFailAck2: Option[art.Empty]): B =
    (!(api_pumpFail2.nonEmpty || api_pumpControlFail2.nonEmpty)) -->:
      (api_pumpFailAck2.isEmpty && api_pumpControlFailAck2.isEmpty)

  /** guarantee REQ_OPDESK_COMP_8
    *   For Pump 3, if OpDesk has already acknowledged a given failure, or there is no failure present from the event ports, then there will be no failure acknowledgement sent for the component.
    * @param api_pumpControlFail3 incoming event port
    * @param api_pumpFail3 incoming event port
    * @param api_pumpControlFailAck3 outgoing event port
    * @param api_pumpFailAck3 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_8(
      api_pumpControlFail3: Option[art.Empty],
      api_pumpFail3: Option[art.Empty],
      api_pumpControlFailAck3: Option[art.Empty],
      api_pumpFailAck3: Option[art.Empty]): B =
    (!(api_pumpFail3.nonEmpty || api_pumpControlFail3.nonEmpty)) -->:
      (api_pumpFailAck3.isEmpty && api_pumpControlFailAck3.isEmpty)

  /** guarantee REQ_OPDESK_COMP_9
    *   For Pump 0, if the system is aware of a failure, then the operator may say it has been repaired. If they do, then send a repair message for the relavent component.
    * @param In_isPumpBroken0 pre-state state variable
    * @param In_isPumpControlBroken0 pre-state state variable
    * @param isPumpBroken0 post-state state variable
    * @param isPumpControlBroken0 post-state state variable
    * @param api_pumpControlFail0 incoming event port
    * @param api_pumpFail0 incoming event port
    * @param api_pumpControlRepair0 outgoing event port
    * @param api_pumpRepair0 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_9(
      In_isPumpBroken0: Base_Types.Boolean,
      In_isPumpControlBroken0: Base_Types.Boolean,
      isPumpBroken0: Base_Types.Boolean,
      isPumpControlBroken0: Base_Types.Boolean,
      api_pumpControlFail0: Option[art.Empty],
      api_pumpFail0: Option[art.Empty],
      api_pumpControlRepair0: Option[art.Empty],
      api_pumpRepair0: Option[art.Empty]): B =
    (In_isPumpBroken0 || In_isPumpControlBroken0) -->:
      (api_pumpRepair0.nonEmpty && api_pumpControlRepair0.nonEmpty &&
         !(api_pumpFail0.nonEmpty || api_pumpControlFail0.nonEmpty) ->: (!isPumpBroken0 && !isPumpControlBroken0))

  /** guarantee REQ_OPDESK_COMP_10
    *   For Pump 1, if the system is aware of a failure, then the operator may say it has been repaired. If they do, then send a repair message for the relavent component.
    * @param In_isPumpBroken1 pre-state state variable
    * @param In_isPumpControlBroken1 pre-state state variable
    * @param isPumpBroken1 post-state state variable
    * @param isPumpControlBroken1 post-state state variable
    * @param api_pumpControlFail1 incoming event port
    * @param api_pumpFail1 incoming event port
    * @param api_pumpControlRepair1 outgoing event port
    * @param api_pumpRepair1 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_10(
      In_isPumpBroken1: Base_Types.Boolean,
      In_isPumpControlBroken1: Base_Types.Boolean,
      isPumpBroken1: Base_Types.Boolean,
      isPumpControlBroken1: Base_Types.Boolean,
      api_pumpControlFail1: Option[art.Empty],
      api_pumpFail1: Option[art.Empty],
      api_pumpControlRepair1: Option[art.Empty],
      api_pumpRepair1: Option[art.Empty]): B =
    (In_isPumpBroken1 || In_isPumpControlBroken1) -->:
      (api_pumpRepair1.nonEmpty && api_pumpControlRepair1.nonEmpty &&
         !(api_pumpFail1.nonEmpty || api_pumpControlFail1.nonEmpty) ->: (!isPumpBroken1 && !isPumpControlBroken1))

  /** guarantee REQ_OPDESK_COMP_11
    *   For Pump 2, if there the system is aware of a failure, then the operator may say it has been repaired. If they do, then send a repair message for the relavent component.
    * @param In_isPumpBroken2 pre-state state variable
    * @param In_isPumpControlBroken2 pre-state state variable
    * @param isPumpBroken2 post-state state variable
    * @param isPumpControlBroken2 post-state state variable
    * @param api_pumpControlFail2 incoming event port
    * @param api_pumpFail2 incoming event port
    * @param api_pumpControlRepair2 outgoing event port
    * @param api_pumpRepair2 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_11(
      In_isPumpBroken2: Base_Types.Boolean,
      In_isPumpControlBroken2: Base_Types.Boolean,
      isPumpBroken2: Base_Types.Boolean,
      isPumpControlBroken2: Base_Types.Boolean,
      api_pumpControlFail2: Option[art.Empty],
      api_pumpFail2: Option[art.Empty],
      api_pumpControlRepair2: Option[art.Empty],
      api_pumpRepair2: Option[art.Empty]): B =
    (In_isPumpBroken2 || In_isPumpControlBroken2) -->:
      (api_pumpRepair2.nonEmpty && api_pumpControlRepair2.nonEmpty &&
         !(api_pumpFail2.nonEmpty || api_pumpControlFail2.nonEmpty) ->: (!isPumpBroken2 && !isPumpControlBroken2))

  /** guarantee REQ_OPDESK_COMP_12
    *   For Pump 3, if there the system is aware of a failure, then the operator may say it has been repaired. If they do, then send a repair message for the relavent component.
    * @param In_isPumpBroken3 pre-state state variable
    * @param In_isPumpControlBroken3 pre-state state variable
    * @param isPumpBroken3 post-state state variable
    * @param isPumpControlBroken3 post-state state variable
    * @param api_pumpControlFail3 incoming event port
    * @param api_pumpFail3 incoming event port
    * @param api_pumpControlRepair3 outgoing event port
    * @param api_pumpRepair3 outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_12(
      In_isPumpBroken3: Base_Types.Boolean,
      In_isPumpControlBroken3: Base_Types.Boolean,
      isPumpBroken3: Base_Types.Boolean,
      isPumpControlBroken3: Base_Types.Boolean,
      api_pumpControlFail3: Option[art.Empty],
      api_pumpFail3: Option[art.Empty],
      api_pumpControlRepair3: Option[art.Empty],
      api_pumpRepair3: Option[art.Empty]): B =
    (In_isPumpBroken3 || In_isPumpControlBroken3) -->:
      (api_pumpRepair3.nonEmpty && api_pumpControlRepair3.nonEmpty &&
         !(api_pumpFail3.nonEmpty || api_pumpControlFail3.nonEmpty) ->: (!isPumpBroken3 && !isPumpControlBroken3))

  /** guarantee REQ_OPDESK_COMP_13
    *   If there is not already a failure on the Water Level and there is a nonempty port saying the Water Level has failed, then OpDesk will acknowledge the failure.
    * @param In_isLevelBroken pre-state state variable
    * @param isLevelBroken post-state state variable
    * @param api_levelFail incoming event port
    * @param api_levelFailAck outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_13(
      In_isLevelBroken: Base_Types.Boolean,
      isLevelBroken: Base_Types.Boolean,
      api_levelFail: Option[art.Empty],
      api_levelFailAck: Option[art.Empty]): B =
    (!In_isLevelBroken && api_levelFail.nonEmpty) -->:
      (api_levelFailAck.nonEmpty && isLevelBroken)

  /** guarantee REQ_OPDESK_COMP_14
    *   If there is not already a failure on the Steam Meter and there is a nonempty port saying the Steam Meter has failed, then OpDesk will acknowledge the failure.
    * @param In_isSteamBroken pre-state state variable
    * @param isSteamBroken post-state state variable
    * @param api_steamFail incoming event port
    * @param api_steamFailAck outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_14(
      In_isSteamBroken: Base_Types.Boolean,
      isSteamBroken: Base_Types.Boolean,
      api_steamFail: Option[art.Empty],
      api_steamFailAck: Option[art.Empty]): B =
    (!In_isSteamBroken && api_steamFail.nonEmpty) -->:
      (api_steamFailAck.nonEmpty && isSteamBroken)

  /** guarantee REQ_OPDESK_COMP_15
    *   For Water Level, if OpDesk has already acknowledged a given failure, or there is no failure present from the event ports, then there will be no failure acknowledgement sent for the component.
    * @param api_levelFail incoming event port
    * @param api_levelFailAck outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_15(
      api_levelFail: Option[art.Empty],
      api_levelFailAck: Option[art.Empty]): B =
    (!(api_levelFail.nonEmpty)) -->:
      (api_levelFailAck.isEmpty)

  /** guarantee REQ_OPDESK_COMP_16
    *   For Steam Meter, if OpDesk has already acknowledged a given failure, or there is no failure present from the event ports, then there will be no failure acknowledgement sent for the component.
    * @param api_steamFail incoming event port
    * @param api_steamFailAck outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_16(
      api_steamFail: Option[art.Empty],
      api_steamFailAck: Option[art.Empty]): B =
    (!(api_steamFail.nonEmpty)) -->:
      (api_steamFailAck.isEmpty)

  /** guarantee REQ_OPDESK_COMP_17
    *   For Water Level, if there the system is aware of a failure, then the operator may say it has been repaired. If they do, then send a repair message for the relavent component.
    * @param In_isLevelBroken pre-state state variable
    * @param isLevelBroken post-state state variable
    * @param api_levelFail incoming event port
    * @param api_levelRepair outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_17(
      In_isLevelBroken: Base_Types.Boolean,
      isLevelBroken: Base_Types.Boolean,
      api_levelFail: Option[art.Empty],
      api_levelRepair: Option[art.Empty]): B =
    (In_isLevelBroken) -->:
      (api_levelRepair.nonEmpty &&
         !(api_levelFail.nonEmpty) ->: !isLevelBroken)

  /** guarantee REQ_OPDESK_COMP_18
    *   For Water Level, if there the system is aware of a failure, then the operator may say it has been repaired. If they do, then send a repair message for the relavent component.
    * @param In_isSteamBroken pre-state state variable
    * @param isSteamBroken post-state state variable
    * @param api_steamFail incoming event port
    * @param api_steamRepair outgoing event port
    */
  @strictpure def compute_case_REQ_OPDESK_COMP_18(
      In_isSteamBroken: Base_Types.Boolean,
      isSteamBroken: Base_Types.Boolean,
      api_steamFail: Option[art.Empty],
      api_steamRepair: Option[art.Empty]): B =
    (In_isSteamBroken) -->:
      (api_steamRepair.nonEmpty &&
         !(api_steamFail.nonEmpty) ->: !isSteamBroken)

  /** CEP-T-Case: Top-Level case contracts for desk's compute entrypoint
    *
    * @param In_isLevelBroken pre-state state variable
    * @param In_isPumpBroken0 pre-state state variable
    * @param In_isPumpBroken1 pre-state state variable
    * @param In_isPumpBroken2 pre-state state variable
    * @param In_isPumpBroken3 pre-state state variable
    * @param In_isPumpControlBroken0 pre-state state variable
    * @param In_isPumpControlBroken1 pre-state state variable
    * @param In_isPumpControlBroken2 pre-state state variable
    * @param In_isPumpControlBroken3 pre-state state variable
    * @param In_isSteamBroken pre-state state variable
    * @param isLevelBroken post-state state variable
    * @param isPumpBroken0 post-state state variable
    * @param isPumpBroken1 post-state state variable
    * @param isPumpBroken2 post-state state variable
    * @param isPumpBroken3 post-state state variable
    * @param isPumpControlBroken0 post-state state variable
    * @param isPumpControlBroken1 post-state state variable
    * @param isPumpControlBroken2 post-state state variable
    * @param isPumpControlBroken3 post-state state variable
    * @param isSteamBroken post-state state variable
    * @param api_levelFail incoming event port
    * @param api_pumpControlFail0 incoming event port
    * @param api_pumpControlFail1 incoming event port
    * @param api_pumpControlFail2 incoming event port
    * @param api_pumpControlFail3 incoming event port
    * @param api_pumpFail0 incoming event port
    * @param api_pumpFail1 incoming event port
    * @param api_pumpFail2 incoming event port
    * @param api_pumpFail3 incoming event port
    * @param api_steamFail incoming event port
    * @param api_levelFailAck outgoing event port
    * @param api_levelRepair outgoing event port
    * @param api_pumpControlFailAck0 outgoing event port
    * @param api_pumpControlFailAck1 outgoing event port
    * @param api_pumpControlFailAck2 outgoing event port
    * @param api_pumpControlFailAck3 outgoing event port
    * @param api_pumpControlRepair0 outgoing event port
    * @param api_pumpControlRepair1 outgoing event port
    * @param api_pumpControlRepair2 outgoing event port
    * @param api_pumpControlRepair3 outgoing event port
    * @param api_pumpFailAck0 outgoing event port
    * @param api_pumpFailAck1 outgoing event port
    * @param api_pumpFailAck2 outgoing event port
    * @param api_pumpFailAck3 outgoing event port
    * @param api_pumpRepair0 outgoing event port
    * @param api_pumpRepair1 outgoing event port
    * @param api_pumpRepair2 outgoing event port
    * @param api_pumpRepair3 outgoing event port
    * @param api_steamFailAck outgoing event port
    * @param api_steamRepair outgoing event port
    */
  @strictpure def compute_CEP_T_Case (
      In_isLevelBroken: Base_Types.Boolean,
      In_isPumpBroken0: Base_Types.Boolean,
      In_isPumpBroken1: Base_Types.Boolean,
      In_isPumpBroken2: Base_Types.Boolean,
      In_isPumpBroken3: Base_Types.Boolean,
      In_isPumpControlBroken0: Base_Types.Boolean,
      In_isPumpControlBroken1: Base_Types.Boolean,
      In_isPumpControlBroken2: Base_Types.Boolean,
      In_isPumpControlBroken3: Base_Types.Boolean,
      In_isSteamBroken: Base_Types.Boolean,
      isLevelBroken: Base_Types.Boolean,
      isPumpBroken0: Base_Types.Boolean,
      isPumpBroken1: Base_Types.Boolean,
      isPumpBroken2: Base_Types.Boolean,
      isPumpBroken3: Base_Types.Boolean,
      isPumpControlBroken0: Base_Types.Boolean,
      isPumpControlBroken1: Base_Types.Boolean,
      isPumpControlBroken2: Base_Types.Boolean,
      isPumpControlBroken3: Base_Types.Boolean,
      isSteamBroken: Base_Types.Boolean,
      api_levelFail: Option[art.Empty],
      api_pumpControlFail0: Option[art.Empty],
      api_pumpControlFail1: Option[art.Empty],
      api_pumpControlFail2: Option[art.Empty],
      api_pumpControlFail3: Option[art.Empty],
      api_pumpFail0: Option[art.Empty],
      api_pumpFail1: Option[art.Empty],
      api_pumpFail2: Option[art.Empty],
      api_pumpFail3: Option[art.Empty],
      api_steamFail: Option[art.Empty],
      api_levelFailAck: Option[art.Empty],
      api_levelRepair: Option[art.Empty],
      api_pumpControlFailAck0: Option[art.Empty],
      api_pumpControlFailAck1: Option[art.Empty],
      api_pumpControlFailAck2: Option[art.Empty],
      api_pumpControlFailAck3: Option[art.Empty],
      api_pumpControlRepair0: Option[art.Empty],
      api_pumpControlRepair1: Option[art.Empty],
      api_pumpControlRepair2: Option[art.Empty],
      api_pumpControlRepair3: Option[art.Empty],
      api_pumpFailAck0: Option[art.Empty],
      api_pumpFailAck1: Option[art.Empty],
      api_pumpFailAck2: Option[art.Empty],
      api_pumpFailAck3: Option[art.Empty],
      api_pumpRepair0: Option[art.Empty],
      api_pumpRepair1: Option[art.Empty],
      api_pumpRepair2: Option[art.Empty],
      api_pumpRepair3: Option[art.Empty],
      api_steamFailAck: Option[art.Empty],
      api_steamRepair: Option[art.Empty]): B =
    compute_case_REQ_OPDESK_COMP_1(In_isPumpBroken0, In_isPumpControlBroken0, isPumpBroken0, isPumpControlBroken0, api_pumpControlFail0, api_pumpFail0, api_pumpControlFailAck0, api_pumpFailAck0) &
    compute_case_REQ_OPDESK_COMP_2(In_isPumpBroken1, In_isPumpControlBroken1, isPumpBroken1, isPumpControlBroken1, api_pumpControlFail1, api_pumpFail1, api_pumpControlFailAck1, api_pumpFailAck1) &
    compute_case_REQ_OPDESK_COMP_3(In_isPumpBroken2, In_isPumpControlBroken2, isPumpBroken2, isPumpControlBroken2, api_pumpControlFail2, api_pumpFail2, api_pumpControlFailAck2, api_pumpFailAck2) &
    compute_case_REQ_OPDESK_COMP_4(In_isPumpBroken3, In_isPumpControlBroken3, isPumpBroken3, isPumpControlBroken3, api_pumpControlFail3, api_pumpFail3, api_pumpControlFailAck3, api_pumpFailAck3) &
    compute_case_REQ_OPDESK_COMP_5(api_pumpControlFail0, api_pumpFail0, api_pumpControlFailAck0, api_pumpFailAck0) &
    compute_case_REQ_OPDESK_COMP_6(api_pumpControlFail1, api_pumpFail1, api_pumpControlFailAck1, api_pumpFailAck1) &
    compute_case_REQ_OPDESK_COMP_7(api_pumpControlFail2, api_pumpFail2, api_pumpControlFailAck2, api_pumpFailAck2) &
    compute_case_REQ_OPDESK_COMP_8(api_pumpControlFail3, api_pumpFail3, api_pumpControlFailAck3, api_pumpFailAck3) &
    compute_case_REQ_OPDESK_COMP_9(In_isPumpBroken0, In_isPumpControlBroken0, isPumpBroken0, isPumpControlBroken0, api_pumpControlFail0, api_pumpFail0, api_pumpControlRepair0, api_pumpRepair0) &
    compute_case_REQ_OPDESK_COMP_10(In_isPumpBroken1, In_isPumpControlBroken1, isPumpBroken1, isPumpControlBroken1, api_pumpControlFail1, api_pumpFail1, api_pumpControlRepair1, api_pumpRepair1) &
    compute_case_REQ_OPDESK_COMP_11(In_isPumpBroken2, In_isPumpControlBroken2, isPumpBroken2, isPumpControlBroken2, api_pumpControlFail2, api_pumpFail2, api_pumpControlRepair2, api_pumpRepair2) &
    compute_case_REQ_OPDESK_COMP_12(In_isPumpBroken3, In_isPumpControlBroken3, isPumpBroken3, isPumpControlBroken3, api_pumpControlFail3, api_pumpFail3, api_pumpControlRepair3, api_pumpRepair3) &
    compute_case_REQ_OPDESK_COMP_13(In_isLevelBroken, isLevelBroken, api_levelFail, api_levelFailAck) &
    compute_case_REQ_OPDESK_COMP_14(In_isSteamBroken, isSteamBroken, api_steamFail, api_steamFailAck) &
    compute_case_REQ_OPDESK_COMP_15(api_levelFail, api_levelFailAck) &
    compute_case_REQ_OPDESK_COMP_16(api_steamFail, api_steamFailAck) &
    compute_case_REQ_OPDESK_COMP_17(In_isLevelBroken, isLevelBroken, api_levelFail, api_levelRepair) &
    compute_case_REQ_OPDESK_COMP_18(In_isSteamBroken, isSteamBroken, api_steamFail, api_steamRepair)

  /** CEP-Post: Compute Entrypoint Post-Condition for desk
    *
    * @param In_isLevelBroken pre-state state variable
    * @param In_isPumpBroken0 pre-state state variable
    * @param In_isPumpBroken1 pre-state state variable
    * @param In_isPumpBroken2 pre-state state variable
    * @param In_isPumpBroken3 pre-state state variable
    * @param In_isPumpControlBroken0 pre-state state variable
    * @param In_isPumpControlBroken1 pre-state state variable
    * @param In_isPumpControlBroken2 pre-state state variable
    * @param In_isPumpControlBroken3 pre-state state variable
    * @param In_isSteamBroken pre-state state variable
    * @param isLevelBroken post-state state variable
    * @param isPumpBroken0 post-state state variable
    * @param isPumpBroken1 post-state state variable
    * @param isPumpBroken2 post-state state variable
    * @param isPumpBroken3 post-state state variable
    * @param isPumpControlBroken0 post-state state variable
    * @param isPumpControlBroken1 post-state state variable
    * @param isPumpControlBroken2 post-state state variable
    * @param isPumpControlBroken3 post-state state variable
    * @param isSteamBroken post-state state variable
    * @param api_levelFail incoming event port
    * @param api_pumpControlFail0 incoming event port
    * @param api_pumpControlFail1 incoming event port
    * @param api_pumpControlFail2 incoming event port
    * @param api_pumpControlFail3 incoming event port
    * @param api_pumpFail0 incoming event port
    * @param api_pumpFail1 incoming event port
    * @param api_pumpFail2 incoming event port
    * @param api_pumpFail3 incoming event port
    * @param api_steamFail incoming event port
    * @param api_levelFailAck outgoing event port
    * @param api_levelRepair outgoing event port
    * @param api_pumpControlFailAck0 outgoing event port
    * @param api_pumpControlFailAck1 outgoing event port
    * @param api_pumpControlFailAck2 outgoing event port
    * @param api_pumpControlFailAck3 outgoing event port
    * @param api_pumpControlRepair0 outgoing event port
    * @param api_pumpControlRepair1 outgoing event port
    * @param api_pumpControlRepair2 outgoing event port
    * @param api_pumpControlRepair3 outgoing event port
    * @param api_pumpFailAck0 outgoing event port
    * @param api_pumpFailAck1 outgoing event port
    * @param api_pumpFailAck2 outgoing event port
    * @param api_pumpFailAck3 outgoing event port
    * @param api_pumpRepair0 outgoing event port
    * @param api_pumpRepair1 outgoing event port
    * @param api_pumpRepair2 outgoing event port
    * @param api_pumpRepair3 outgoing event port
    * @param api_steamFailAck outgoing event port
    * @param api_steamRepair outgoing event port
    * @param api_stop outgoing event port
    */
  @strictpure def compute_CEP_Post (
      In_isLevelBroken: Base_Types.Boolean,
      In_isPumpBroken0: Base_Types.Boolean,
      In_isPumpBroken1: Base_Types.Boolean,
      In_isPumpBroken2: Base_Types.Boolean,
      In_isPumpBroken3: Base_Types.Boolean,
      In_isPumpControlBroken0: Base_Types.Boolean,
      In_isPumpControlBroken1: Base_Types.Boolean,
      In_isPumpControlBroken2: Base_Types.Boolean,
      In_isPumpControlBroken3: Base_Types.Boolean,
      In_isSteamBroken: Base_Types.Boolean,
      isLevelBroken: Base_Types.Boolean,
      isPumpBroken0: Base_Types.Boolean,
      isPumpBroken1: Base_Types.Boolean,
      isPumpBroken2: Base_Types.Boolean,
      isPumpBroken3: Base_Types.Boolean,
      isPumpControlBroken0: Base_Types.Boolean,
      isPumpControlBroken1: Base_Types.Boolean,
      isPumpControlBroken2: Base_Types.Boolean,
      isPumpControlBroken3: Base_Types.Boolean,
      isSteamBroken: Base_Types.Boolean,
      api_levelFail: Option[art.Empty],
      api_pumpControlFail0: Option[art.Empty],
      api_pumpControlFail1: Option[art.Empty],
      api_pumpControlFail2: Option[art.Empty],
      api_pumpControlFail3: Option[art.Empty],
      api_pumpFail0: Option[art.Empty],
      api_pumpFail1: Option[art.Empty],
      api_pumpFail2: Option[art.Empty],
      api_pumpFail3: Option[art.Empty],
      api_steamFail: Option[art.Empty],
      api_levelFailAck: Option[art.Empty],
      api_levelRepair: Option[art.Empty],
      api_pumpControlFailAck0: Option[art.Empty],
      api_pumpControlFailAck1: Option[art.Empty],
      api_pumpControlFailAck2: Option[art.Empty],
      api_pumpControlFailAck3: Option[art.Empty],
      api_pumpControlRepair0: Option[art.Empty],
      api_pumpControlRepair1: Option[art.Empty],
      api_pumpControlRepair2: Option[art.Empty],
      api_pumpControlRepair3: Option[art.Empty],
      api_pumpFailAck0: Option[art.Empty],
      api_pumpFailAck1: Option[art.Empty],
      api_pumpFailAck2: Option[art.Empty],
      api_pumpFailAck3: Option[art.Empty],
      api_pumpRepair0: Option[art.Empty],
      api_pumpRepair1: Option[art.Empty],
      api_pumpRepair2: Option[art.Empty],
      api_pumpRepair3: Option[art.Empty],
      api_steamFailAck: Option[art.Empty],
      api_steamRepair: Option[art.Empty],
      api_stop: Option[art.Empty]): B =
    (// CEP-T-Case: case clauses of desk's compute entrypoint
     compute_CEP_T_Case (In_isLevelBroken, In_isPumpBroken0, In_isPumpBroken1, In_isPumpBroken2, In_isPumpBroken3, In_isPumpControlBroken0, In_isPumpControlBroken1, In_isPumpControlBroken2, In_isPumpControlBroken3, In_isSteamBroken, isLevelBroken, isPumpBroken0, isPumpBroken1, isPumpBroken2, isPumpBroken3, isPumpControlBroken0, isPumpControlBroken1, isPumpControlBroken2, isPumpControlBroken3, isSteamBroken, api_levelFail, api_pumpControlFail0, api_pumpControlFail1, api_pumpControlFail2, api_pumpControlFail3, api_pumpFail0, api_pumpFail1, api_pumpFail2, api_pumpFail3, api_steamFail, api_levelFailAck, api_levelRepair, api_pumpControlFailAck0, api_pumpControlFailAck1, api_pumpControlFailAck2, api_pumpControlFailAck3, api_pumpControlRepair0, api_pumpControlRepair1, api_pumpControlRepair2, api_pumpControlRepair3, api_pumpFailAck0, api_pumpFailAck1, api_pumpFailAck2, api_pumpFailAck3, api_pumpRepair0, api_pumpRepair1, api_pumpRepair2, api_pumpRepair3, api_steamFailAck, api_steamRepair))

  /** CEP-Post: Compute Entrypoint Post-Condition for desk via containers
    *
    * @param pre Container holding the values of incoming ports and the pre-state values of state variables
    * @param post Container holding the values of outgoing ports and the post-state values of state variables
    */
  @strictpure def compute_CEP_Post_Container(
      pre: OperatorDesk_i_bcproc_desk_PreState_Container_PS,
      post: OperatorDesk_i_bcproc_desk_PostState_Container_PS): B =
    compute_CEP_Post(
      In_isLevelBroken = pre.In_isLevelBroken,
      In_isPumpBroken0 = pre.In_isPumpBroken0,
      In_isPumpBroken1 = pre.In_isPumpBroken1,
      In_isPumpBroken2 = pre.In_isPumpBroken2,
      In_isPumpBroken3 = pre.In_isPumpBroken3,
      In_isPumpControlBroken0 = pre.In_isPumpControlBroken0,
      In_isPumpControlBroken1 = pre.In_isPumpControlBroken1,
      In_isPumpControlBroken2 = pre.In_isPumpControlBroken2,
      In_isPumpControlBroken3 = pre.In_isPumpControlBroken3,
      In_isSteamBroken = pre.In_isSteamBroken,
      isLevelBroken = post.isLevelBroken,
      isPumpBroken0 = post.isPumpBroken0,
      isPumpBroken1 = post.isPumpBroken1,
      isPumpBroken2 = post.isPumpBroken2,
      isPumpBroken3 = post.isPumpBroken3,
      isPumpControlBroken0 = post.isPumpControlBroken0,
      isPumpControlBroken1 = post.isPumpControlBroken1,
      isPumpControlBroken2 = post.isPumpControlBroken2,
      isPumpControlBroken3 = post.isPumpControlBroken3,
      isSteamBroken = post.isSteamBroken,
      api_levelFail = pre.api_levelFail,
      api_pumpControlFail0 = pre.api_pumpControlFail0,
      api_pumpControlFail1 = pre.api_pumpControlFail1,
      api_pumpControlFail2 = pre.api_pumpControlFail2,
      api_pumpControlFail3 = pre.api_pumpControlFail3,
      api_pumpFail0 = pre.api_pumpFail0,
      api_pumpFail1 = pre.api_pumpFail1,
      api_pumpFail2 = pre.api_pumpFail2,
      api_pumpFail3 = pre.api_pumpFail3,
      api_steamFail = pre.api_steamFail,
      api_levelFailAck = post.api_levelFailAck,
      api_levelRepair = post.api_levelRepair,
      api_pumpControlFailAck0 = post.api_pumpControlFailAck0,
      api_pumpControlFailAck1 = post.api_pumpControlFailAck1,
      api_pumpControlFailAck2 = post.api_pumpControlFailAck2,
      api_pumpControlFailAck3 = post.api_pumpControlFailAck3,
      api_pumpControlRepair0 = post.api_pumpControlRepair0,
      api_pumpControlRepair1 = post.api_pumpControlRepair1,
      api_pumpControlRepair2 = post.api_pumpControlRepair2,
      api_pumpControlRepair3 = post.api_pumpControlRepair3,
      api_pumpFailAck0 = post.api_pumpFailAck0,
      api_pumpFailAck1 = post.api_pumpFailAck1,
      api_pumpFailAck2 = post.api_pumpFailAck2,
      api_pumpFailAck3 = post.api_pumpFailAck3,
      api_pumpRepair0 = post.api_pumpRepair0,
      api_pumpRepair1 = post.api_pumpRepair1,
      api_pumpRepair2 = post.api_pumpRepair2,
      api_pumpRepair3 = post.api_pumpRepair3,
      api_steamFailAck = post.api_steamFailAck,
      api_steamRepair = post.api_steamRepair,
      api_stop = post.api_stop)
}
