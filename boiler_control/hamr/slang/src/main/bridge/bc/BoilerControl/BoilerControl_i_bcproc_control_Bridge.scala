// #Sireum

package bc.BoilerControl

import org.sireum._
import art._
import bc._
import bc.BoilerControl.{BoilerControl_i_bcproc_control => component}

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

@datatype class BoilerControl_i_bcproc_control_Bridge(
  val id: Art.BridgeId,
  val name: String,
  val dispatchProtocol: DispatchPropertyProtocol,
  val dispatchTriggers: Option[ISZ[Art.PortId]],

  pumpOpen0: Port[Base_Types.Boolean],
  pumpOpen1: Port[Base_Types.Boolean],
  pumpOpen2: Port[Base_Types.Boolean],
  pumpOpen3: Port[Base_Types.Boolean],
  pumpFlow0: Port[Base_Types.Boolean],
  pumpFlow1: Port[Base_Types.Boolean],
  pumpFlow2: Port[Base_Types.Boolean],
  pumpFlow3: Port[Base_Types.Boolean],
  waterLevel: Port[Base_Types.Float_32],
  steamRate: Port[Base_Types.Float_32],
  opMode: Port[BoilerControl.OpMode.Type],
  openPump0: Port[Base_Types.Boolean],
  openPump1: Port[Base_Types.Boolean],
  openPump2: Port[Base_Types.Boolean],
  openPump3: Port[Base_Types.Boolean],
  stop: Port[art.Empty],
  boilerWaiting: Port[art.Empty],
  boilerReady: Port[art.Empty],
  waterMeterReady: Port[art.Empty],
  pumpControlReady0: Port[art.Empty],
  pumpControlReady1: Port[art.Empty],
  pumpControlReady2: Port[art.Empty],
  pumpControlReady3: Port[art.Empty],
  steamMeterReady: Port[art.Empty],
  pumpRepair0: Port[art.Empty],
  pumpRepair1: Port[art.Empty],
  pumpRepair2: Port[art.Empty],
  pumpRepair3: Port[art.Empty],
  pumpControlRepair0: Port[art.Empty],
  pumpControlRepair1: Port[art.Empty],
  pumpControlRepair2: Port[art.Empty],
  pumpControlRepair3: Port[art.Empty],
  levelRepair: Port[art.Empty],
  steamRepair: Port[art.Empty],
  pumpFailAck0: Port[art.Empty],
  pumpFailAck1: Port[art.Empty],
  pumpFailAck2: Port[art.Empty],
  pumpFailAck3: Port[art.Empty],
  pumpControlFailAck0: Port[art.Empty],
  pumpControlFailAck1: Port[art.Empty],
  pumpControlFailAck2: Port[art.Empty],
  pumpControlFailAck3: Port[art.Empty],
  levelFailAck: Port[art.Empty],
  steamFailAck: Port[art.Empty],
  ready: Port[art.Empty],
  valve: Port[art.Empty],
  pumpFail0: Port[art.Empty],
  pumpFail1: Port[art.Empty],
  pumpFail2: Port[art.Empty],
  pumpFail3: Port[art.Empty],
  pumpControlFail0: Port[art.Empty],
  pumpControlFail1: Port[art.Empty],
  pumpControlFail2: Port[art.Empty],
  pumpControlFail3: Port[art.Empty],
  levelFail: Port[art.Empty],
  steamFail: Port[art.Empty],
  pumpRepairAck0: Port[art.Empty],
  pumpRepairAck1: Port[art.Empty],
  pumpRepairAck2: Port[art.Empty],
  pumpRepairAck3: Port[art.Empty],
  pumpControlRepairAck0: Port[art.Empty],
  pumpControlRepairAck1: Port[art.Empty],
  pumpControlRepairAck2: Port[art.Empty],
  pumpControlRepairAck3: Port[art.Empty],
  levelRepairAck: Port[art.Empty],
  steamRepairAck: Port[art.Empty]
  ) extends Bridge {

  val ports : Bridge.Ports = Bridge.Ports(
    dataIns = ISZ[art.UPort](),

    dataOuts = ISZ[art.UPort](),

    eventIns = ISZ[art.UPort](pumpOpen0,
                              pumpOpen1,
                              pumpOpen2,
                              pumpOpen3,
                              pumpFlow0,
                              pumpFlow1,
                              pumpFlow2,
                              pumpFlow3,
                              waterLevel,
                              steamRate,
                              stop,
                              boilerWaiting,
                              boilerReady,
                              waterMeterReady,
                              pumpControlReady0,
                              pumpControlReady1,
                              pumpControlReady2,
                              pumpControlReady3,
                              steamMeterReady,
                              pumpRepair0,
                              pumpRepair1,
                              pumpRepair2,
                              pumpRepair3,
                              pumpControlRepair0,
                              pumpControlRepair1,
                              pumpControlRepair2,
                              pumpControlRepair3,
                              levelRepair,
                              steamRepair,
                              pumpFailAck0,
                              pumpFailAck1,
                              pumpFailAck2,
                              pumpFailAck3,
                              pumpControlFailAck0,
                              pumpControlFailAck1,
                              pumpControlFailAck2,
                              pumpControlFailAck3,
                              levelFailAck,
                              steamFailAck),

    eventOuts = ISZ[art.UPort](opMode,
                               openPump0,
                               openPump1,
                               openPump2,
                               openPump3,
                               ready,
                               valve,
                               pumpFail0,
                               pumpFail1,
                               pumpFail2,
                               pumpFail3,
                               pumpControlFail0,
                               pumpControlFail1,
                               pumpControlFail2,
                               pumpControlFail3,
                               levelFail,
                               steamFail,
                               pumpRepairAck0,
                               pumpRepairAck1,
                               pumpRepairAck2,
                               pumpRepairAck3,
                               pumpControlRepairAck0,
                               pumpControlRepairAck1,
                               pumpControlRepairAck2,
                               pumpControlRepairAck3,
                               levelRepairAck,
                               steamRepairAck)
  )

  val initialization_api : BoilerControl_i_Initialization_Api = {
    val api = BoilerControl_i_Initialization_Api(
      id,
      pumpOpen0.id,
      pumpOpen1.id,
      pumpOpen2.id,
      pumpOpen3.id,
      pumpFlow0.id,
      pumpFlow1.id,
      pumpFlow2.id,
      pumpFlow3.id,
      waterLevel.id,
      steamRate.id,
      opMode.id,
      openPump0.id,
      openPump1.id,
      openPump2.id,
      openPump3.id,
      stop.id,
      boilerWaiting.id,
      boilerReady.id,
      waterMeterReady.id,
      pumpControlReady0.id,
      pumpControlReady1.id,
      pumpControlReady2.id,
      pumpControlReady3.id,
      steamMeterReady.id,
      pumpRepair0.id,
      pumpRepair1.id,
      pumpRepair2.id,
      pumpRepair3.id,
      pumpControlRepair0.id,
      pumpControlRepair1.id,
      pumpControlRepair2.id,
      pumpControlRepair3.id,
      levelRepair.id,
      steamRepair.id,
      pumpFailAck0.id,
      pumpFailAck1.id,
      pumpFailAck2.id,
      pumpFailAck3.id,
      pumpControlFailAck0.id,
      pumpControlFailAck1.id,
      pumpControlFailAck2.id,
      pumpControlFailAck3.id,
      levelFailAck.id,
      steamFailAck.id,
      ready.id,
      valve.id,
      pumpFail0.id,
      pumpFail1.id,
      pumpFail2.id,
      pumpFail3.id,
      pumpControlFail0.id,
      pumpControlFail1.id,
      pumpControlFail2.id,
      pumpControlFail3.id,
      levelFail.id,
      steamFail.id,
      pumpRepairAck0.id,
      pumpRepairAck1.id,
      pumpRepairAck2.id,
      pumpRepairAck3.id,
      pumpControlRepairAck0.id,
      pumpControlRepairAck1.id,
      pumpControlRepairAck2.id,
      pumpControlRepairAck3.id,
      levelRepairAck.id,
      steamRepairAck.id
    )
    BoilerControl_i_bcproc_control_Bridge.c_initialization_api = Some(api)
    api
  }

  val operational_api : BoilerControl_i_Operational_Api = {
    val api = BoilerControl_i_Operational_Api(
      id,
      pumpOpen0.id,
      pumpOpen1.id,
      pumpOpen2.id,
      pumpOpen3.id,
      pumpFlow0.id,
      pumpFlow1.id,
      pumpFlow2.id,
      pumpFlow3.id,
      waterLevel.id,
      steamRate.id,
      opMode.id,
      openPump0.id,
      openPump1.id,
      openPump2.id,
      openPump3.id,
      stop.id,
      boilerWaiting.id,
      boilerReady.id,
      waterMeterReady.id,
      pumpControlReady0.id,
      pumpControlReady1.id,
      pumpControlReady2.id,
      pumpControlReady3.id,
      steamMeterReady.id,
      pumpRepair0.id,
      pumpRepair1.id,
      pumpRepair2.id,
      pumpRepair3.id,
      pumpControlRepair0.id,
      pumpControlRepair1.id,
      pumpControlRepair2.id,
      pumpControlRepair3.id,
      levelRepair.id,
      steamRepair.id,
      pumpFailAck0.id,
      pumpFailAck1.id,
      pumpFailAck2.id,
      pumpFailAck3.id,
      pumpControlFailAck0.id,
      pumpControlFailAck1.id,
      pumpControlFailAck2.id,
      pumpControlFailAck3.id,
      levelFailAck.id,
      steamFailAck.id,
      ready.id,
      valve.id,
      pumpFail0.id,
      pumpFail1.id,
      pumpFail2.id,
      pumpFail3.id,
      pumpControlFail0.id,
      pumpControlFail1.id,
      pumpControlFail2.id,
      pumpControlFail3.id,
      levelFail.id,
      steamFail.id,
      pumpRepairAck0.id,
      pumpRepairAck1.id,
      pumpRepairAck2.id,
      pumpRepairAck3.id,
      pumpControlRepairAck0.id,
      pumpControlRepairAck1.id,
      pumpControlRepairAck2.id,
      pumpControlRepairAck3.id,
      levelRepairAck.id,
      steamRepairAck.id
    )
    BoilerControl_i_bcproc_control_Bridge.c_operational_api = Some(api)
    api
  }

  val entryPoints : Bridge.EntryPoints =
    BoilerControl_i_bcproc_control_Bridge.EntryPoints(
      id,

      pumpOpen0.id,
      pumpOpen1.id,
      pumpOpen2.id,
      pumpOpen3.id,
      pumpFlow0.id,
      pumpFlow1.id,
      pumpFlow2.id,
      pumpFlow3.id,
      waterLevel.id,
      steamRate.id,
      opMode.id,
      openPump0.id,
      openPump1.id,
      openPump2.id,
      openPump3.id,
      stop.id,
      boilerWaiting.id,
      boilerReady.id,
      waterMeterReady.id,
      pumpControlReady0.id,
      pumpControlReady1.id,
      pumpControlReady2.id,
      pumpControlReady3.id,
      steamMeterReady.id,
      pumpRepair0.id,
      pumpRepair1.id,
      pumpRepair2.id,
      pumpRepair3.id,
      pumpControlRepair0.id,
      pumpControlRepair1.id,
      pumpControlRepair2.id,
      pumpControlRepair3.id,
      levelRepair.id,
      steamRepair.id,
      pumpFailAck0.id,
      pumpFailAck1.id,
      pumpFailAck2.id,
      pumpFailAck3.id,
      pumpControlFailAck0.id,
      pumpControlFailAck1.id,
      pumpControlFailAck2.id,
      pumpControlFailAck3.id,
      levelFailAck.id,
      steamFailAck.id,
      ready.id,
      valve.id,
      pumpFail0.id,
      pumpFail1.id,
      pumpFail2.id,
      pumpFail3.id,
      pumpControlFail0.id,
      pumpControlFail1.id,
      pumpControlFail2.id,
      pumpControlFail3.id,
      levelFail.id,
      steamFail.id,
      pumpRepairAck0.id,
      pumpRepairAck1.id,
      pumpRepairAck2.id,
      pumpRepairAck3.id,
      pumpControlRepairAck0.id,
      pumpControlRepairAck1.id,
      pumpControlRepairAck2.id,
      pumpControlRepairAck3.id,
      levelRepairAck.id,
      steamRepairAck.id,

      dispatchTriggers,

      initialization_api,
      operational_api)
}

object BoilerControl_i_bcproc_control_Bridge {

  var c_initialization_api: Option[BoilerControl_i_Initialization_Api] = None()
  var c_operational_api: Option[BoilerControl_i_Operational_Api] = None()

  @datatype class EntryPoints(
    BoilerControl_i_bcproc_control_BridgeId : Art.BridgeId,
    pumpOpen0_Id : Art.PortId,
    pumpOpen1_Id : Art.PortId,
    pumpOpen2_Id : Art.PortId,
    pumpOpen3_Id : Art.PortId,
    pumpFlow0_Id : Art.PortId,
    pumpFlow1_Id : Art.PortId,
    pumpFlow2_Id : Art.PortId,
    pumpFlow3_Id : Art.PortId,
    waterLevel_Id : Art.PortId,
    steamRate_Id : Art.PortId,
    opMode_Id : Art.PortId,
    openPump0_Id : Art.PortId,
    openPump1_Id : Art.PortId,
    openPump2_Id : Art.PortId,
    openPump3_Id : Art.PortId,
    stop_Id : Art.PortId,
    boilerWaiting_Id : Art.PortId,
    boilerReady_Id : Art.PortId,
    waterMeterReady_Id : Art.PortId,
    pumpControlReady0_Id : Art.PortId,
    pumpControlReady1_Id : Art.PortId,
    pumpControlReady2_Id : Art.PortId,
    pumpControlReady3_Id : Art.PortId,
    steamMeterReady_Id : Art.PortId,
    pumpRepair0_Id : Art.PortId,
    pumpRepair1_Id : Art.PortId,
    pumpRepair2_Id : Art.PortId,
    pumpRepair3_Id : Art.PortId,
    pumpControlRepair0_Id : Art.PortId,
    pumpControlRepair1_Id : Art.PortId,
    pumpControlRepair2_Id : Art.PortId,
    pumpControlRepair3_Id : Art.PortId,
    levelRepair_Id : Art.PortId,
    steamRepair_Id : Art.PortId,
    pumpFailAck0_Id : Art.PortId,
    pumpFailAck1_Id : Art.PortId,
    pumpFailAck2_Id : Art.PortId,
    pumpFailAck3_Id : Art.PortId,
    pumpControlFailAck0_Id : Art.PortId,
    pumpControlFailAck1_Id : Art.PortId,
    pumpControlFailAck2_Id : Art.PortId,
    pumpControlFailAck3_Id : Art.PortId,
    levelFailAck_Id : Art.PortId,
    steamFailAck_Id : Art.PortId,
    ready_Id : Art.PortId,
    valve_Id : Art.PortId,
    pumpFail0_Id : Art.PortId,
    pumpFail1_Id : Art.PortId,
    pumpFail2_Id : Art.PortId,
    pumpFail3_Id : Art.PortId,
    pumpControlFail0_Id : Art.PortId,
    pumpControlFail1_Id : Art.PortId,
    pumpControlFail2_Id : Art.PortId,
    pumpControlFail3_Id : Art.PortId,
    levelFail_Id : Art.PortId,
    steamFail_Id : Art.PortId,
    pumpRepairAck0_Id : Art.PortId,
    pumpRepairAck1_Id : Art.PortId,
    pumpRepairAck2_Id : Art.PortId,
    pumpRepairAck3_Id : Art.PortId,
    pumpControlRepairAck0_Id : Art.PortId,
    pumpControlRepairAck1_Id : Art.PortId,
    pumpControlRepairAck2_Id : Art.PortId,
    pumpControlRepairAck3_Id : Art.PortId,
    levelRepairAck_Id : Art.PortId,
    steamRepairAck_Id : Art.PortId,
    dispatchTriggers : Option[ISZ[Art.PortId]],
    initialization_api: BoilerControl_i_Initialization_Api,
    operational_api: BoilerControl_i_Operational_Api) extends Bridge.EntryPoints {

    val dataInPortIds: ISZ[Art.PortId] = IS()

    val eventInPortIds: ISZ[Art.PortId] = IS(pumpOpen0_Id,
                                             pumpOpen1_Id,
                                             pumpOpen2_Id,
                                             pumpOpen3_Id,
                                             pumpFlow0_Id,
                                             pumpFlow1_Id,
                                             pumpFlow2_Id,
                                             pumpFlow3_Id,
                                             waterLevel_Id,
                                             steamRate_Id,
                                             stop_Id,
                                             boilerWaiting_Id,
                                             boilerReady_Id,
                                             waterMeterReady_Id,
                                             pumpControlReady0_Id,
                                             pumpControlReady1_Id,
                                             pumpControlReady2_Id,
                                             pumpControlReady3_Id,
                                             steamMeterReady_Id,
                                             pumpRepair0_Id,
                                             pumpRepair1_Id,
                                             pumpRepair2_Id,
                                             pumpRepair3_Id,
                                             pumpControlRepair0_Id,
                                             pumpControlRepair1_Id,
                                             pumpControlRepair2_Id,
                                             pumpControlRepair3_Id,
                                             levelRepair_Id,
                                             steamRepair_Id,
                                             pumpFailAck0_Id,
                                             pumpFailAck1_Id,
                                             pumpFailAck2_Id,
                                             pumpFailAck3_Id,
                                             pumpControlFailAck0_Id,
                                             pumpControlFailAck1_Id,
                                             pumpControlFailAck2_Id,
                                             pumpControlFailAck3_Id,
                                             levelFailAck_Id,
                                             steamFailAck_Id)

    val dataOutPortIds: ISZ[Art.PortId] = IS()

    val eventOutPortIds: ISZ[Art.PortId] = IS(opMode_Id,
                                              openPump0_Id,
                                              openPump1_Id,
                                              openPump2_Id,
                                              openPump3_Id,
                                              ready_Id,
                                              valve_Id,
                                              pumpFail0_Id,
                                              pumpFail1_Id,
                                              pumpFail2_Id,
                                              pumpFail3_Id,
                                              pumpControlFail0_Id,
                                              pumpControlFail1_Id,
                                              pumpControlFail2_Id,
                                              pumpControlFail3_Id,
                                              levelFail_Id,
                                              steamFail_Id,
                                              pumpRepairAck0_Id,
                                              pumpRepairAck1_Id,
                                              pumpRepairAck2_Id,
                                              pumpRepairAck3_Id,
                                              pumpControlRepairAck0_Id,
                                              pumpControlRepairAck1_Id,
                                              pumpControlRepairAck2_Id,
                                              pumpControlRepairAck3_Id,
                                              levelRepairAck_Id,
                                              steamRepairAck_Id)

    def initialise(): Unit = {
      BoilerControl_i_bcproc_control_EntryPoint_Companion.pre_initialise()

      // implement the following method in 'component':  def initialise(api: BoilerControl_i_Initialization_Api): Unit = {}
      component.initialise(initialization_api)

      BoilerControl_i_bcproc_control_EntryPoint_Companion.post_initialise()

      Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def compute(): Unit = {
      BoilerControl_i_bcproc_control_Injection_Service.pre_receiveInput()

      Art.receiveInput(eventInPortIds, dataInPortIds)

      BoilerControl_i_bcproc_control_EntryPoint_Companion.pre_compute()

      // implement the following in 'component':  def timeTriggered(api: BoilerControl_i_Operational_Api): Unit = {}
      component.timeTriggered(operational_api)

      BoilerControl_i_bcproc_control_EntryPoint_Companion.post_compute()

      Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def activate(): Unit = {
      // implement the following method in 'component':  def activate(api: BoilerControl_i_Operational_Api): Unit = {}
      component.activate(operational_api)
    }

    def deactivate(): Unit = {
      // implement the following method in 'component':  def deactivate(api: BoilerControl_i_Operational_Api): Unit = {}
      component.deactivate(operational_api)
    }

    def finalise(): Unit = {
      // implement the following method in 'component':  def finalise(api: BoilerControl_i_Operational_Api): Unit = {}
      component.finalise(operational_api)
    }

    def recover(): Unit = {
      // implement the following method in 'component':  def recover(api: BoilerControl_i_Operational_Api): Unit = {}
      component.recover(operational_api)
    }

    override
    def testInitialise(): Unit = {
      // implement the following method in 'component':  def initialise(api: BoilerControl_i_Initialization_Api): Unit = {}
      component.initialise(initialization_api)
      Art.releaseOutput(eventOutPortIds, dataOutPortIds)
    }

    override
    def testCompute(): Unit = {
      Art.receiveInput(eventInPortIds, dataInPortIds)

      // implement the following in 'component':  def timeTriggered(api: BoilerControl_i_Operational_Api): Unit = {}
      component.timeTriggered(operational_api)

      Art.releaseOutput(eventOutPortIds, dataOutPortIds)
    }
  }
}