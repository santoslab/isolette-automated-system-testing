// #Sireum
package bc.runtimemonitor

import org.sireum._
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object ModelInfo {
  val Boiler_i_bcproc_boiler_MI : Component =
    Component(
      name = "Boiler_i_bcproc_boiler",
      id = Arch.BoilerControlSystem_i_Instance_bcproc_boiler.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_Mode",
          id = 0,
          direction = StateDirection.In,
          slangType = "BoilerControl.OpMode.Type"),
        StateVariable(
          name = "In_ValveOpen",
          id = 1,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "Mode",
          id = 0,
          direction = StateDirection.Out,
          slangType = "BoilerControl.OpMode.Type"),
        StateVariable(
          name = "ValveOpen",
          id = 1,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        Port(
          name = "opMode",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_boiler.opMode.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "programReady",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_boiler.programReady.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "valve",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_boiler.valve.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "waiting",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_boiler.waiting.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ready",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_boiler.ready.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = "")))

  val PumpControl_i_bcproc_pumpControl0_MI : Component =
    Component(
      name = "PumpControl_i_bcproc_pumpControl0",
      id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl0.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_isPumpOpen",
          id = 0,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpFlow",
          id = 1,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_pumpNumber",
          id = 2,
          direction = StateDirection.In,
          slangType = "Base_Types.Integer"),
        StateVariable(
          name = "isPumpOpen",
          id = 0,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpFlow",
          id = 1,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "pumpNumber",
          id = 2,
          direction = StateDirection.Out,
          slangType = "Base_Types.Integer"),
        Port(
          name = "opMode",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl0.opMode.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "openPump",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl0.openPump.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpOpen",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl0.pumpOpen.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFlow",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl0.pumpFlow.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "programReady",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl0.programReady.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ready",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl0.ready.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = "")))

  val PumpControl_i_bcproc_pumpControl1_MI : Component =
    Component(
      name = "PumpControl_i_bcproc_pumpControl1",
      id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl1.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_isPumpOpen",
          id = 0,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpFlow",
          id = 1,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_pumpNumber",
          id = 2,
          direction = StateDirection.In,
          slangType = "Base_Types.Integer"),
        StateVariable(
          name = "isPumpOpen",
          id = 0,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpFlow",
          id = 1,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "pumpNumber",
          id = 2,
          direction = StateDirection.Out,
          slangType = "Base_Types.Integer"),
        Port(
          name = "opMode",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl1.opMode.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "openPump",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl1.openPump.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpOpen",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl1.pumpOpen.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFlow",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl1.pumpFlow.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "programReady",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl1.programReady.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ready",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl1.ready.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = "")))

  val PumpControl_i_bcproc_pumpControl2_MI : Component =
    Component(
      name = "PumpControl_i_bcproc_pumpControl2",
      id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl2.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_isPumpOpen",
          id = 0,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpFlow",
          id = 1,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_pumpNumber",
          id = 2,
          direction = StateDirection.In,
          slangType = "Base_Types.Integer"),
        StateVariable(
          name = "isPumpOpen",
          id = 0,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpFlow",
          id = 1,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "pumpNumber",
          id = 2,
          direction = StateDirection.Out,
          slangType = "Base_Types.Integer"),
        Port(
          name = "opMode",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl2.opMode.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "openPump",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl2.openPump.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpOpen",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl2.pumpOpen.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFlow",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl2.pumpFlow.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "programReady",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl2.programReady.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ready",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl2.ready.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = "")))

  val PumpControl_i_bcproc_pumpControl3_MI : Component =
    Component(
      name = "PumpControl_i_bcproc_pumpControl3",
      id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl3.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_isPumpOpen",
          id = 0,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpFlow",
          id = 1,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_pumpNumber",
          id = 2,
          direction = StateDirection.In,
          slangType = "Base_Types.Integer"),
        StateVariable(
          name = "isPumpOpen",
          id = 0,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpFlow",
          id = 1,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "pumpNumber",
          id = 2,
          direction = StateDirection.Out,
          slangType = "Base_Types.Integer"),
        Port(
          name = "opMode",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl3.opMode.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "openPump",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl3.openPump.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpOpen",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl3.pumpOpen.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFlow",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl3.pumpFlow.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "programReady",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl3.programReady.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ready",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_pumpControl3.ready.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = "")))

  val WaterMeter_i_bcproc_waterMeter_MI : Component =
    Component(
      name = "WaterMeter_i_bcproc_waterMeter",
      id = Arch.BoilerControlSystem_i_Instance_bcproc_waterMeter.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_volume",
          id = 0,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "volume",
          id = 0,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        Port(
          name = "opMode",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_waterMeter.opMode.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "level",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_waterMeter.level.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "programReady",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_waterMeter.programReady.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ready",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_waterMeter.ready.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = "")))

  val SteamMeter_i_bcproc_steamMeter_MI : Component =
    Component(
      name = "SteamMeter_i_bcproc_steamMeter",
      id = Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_computedRate",
          id = 0,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_volume",
          id = 1,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "computedRate",
          id = 0,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "volume",
          id = 1,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        Port(
          name = "opMode",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.opMode.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "rate",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.rate.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "programReady",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.programReady.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ready",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.ready.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = "")))

  val OperatorDesk_i_bcproc_desk_MI : Component =
    Component(
      name = "OperatorDesk_i_bcproc_desk",
      id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_isPumpBroken0",
          id = 0,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpBroken1",
          id = 1,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpBroken2",
          id = 2,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpBroken3",
          id = 3,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpControlBroken0",
          id = 4,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpControlBroken1",
          id = 5,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpControlBroken2",
          id = 6,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPumpControlBroken3",
          id = 7,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isLevelBroken",
          id = 8,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isSteamBroken",
          id = 9,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpBroken0",
          id = 0,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpBroken1",
          id = 1,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpBroken2",
          id = 2,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpBroken3",
          id = 3,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpControlBroken0",
          id = 4,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpControlBroken1",
          id = 5,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpControlBroken2",
          id = 6,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPumpControlBroken3",
          id = 7,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isLevelBroken",
          id = 8,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isSteamBroken",
          id = 9,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        Port(
          name = "opMode",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.opMode.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFail0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpFail0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFail1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpFail1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFail2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpFail2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFail3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpFail3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlFail0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlFail0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlFail1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlFail1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlFail2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlFail2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlFail3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlFail3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "levelFail",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.levelFail.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "steamFail",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.steamFail.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpRepairAck0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpRepairAck0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpRepairAck1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpRepairAck1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpRepairAck2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpRepairAck2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpRepairAck3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpRepairAck3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlRepairAck0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlRepairAck0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlRepairAck1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlRepairAck1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlRepairAck2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlRepairAck2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlRepairAck3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlRepairAck3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "levelRepairAck",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.levelRepairAck.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "steamRepairAck",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.steamRepairAck.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "stop",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.stop.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpRepair0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpRepair0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpRepair1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpRepair1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpRepair2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpRepair2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpRepair3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpRepair3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlRepair0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlRepair0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlRepair1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlRepair1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlRepair2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlRepair2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlRepair3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlRepair3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "levelRepair",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.levelRepair.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "steamRepair",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.steamRepair.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFailAck0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpFailAck0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFailAck1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpFailAck1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFailAck2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpFailAck2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFailAck3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpFailAck3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlFailAck0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlFailAck0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlFailAck1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlFailAck1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlFailAck2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlFailAck2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlFailAck3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.pumpControlFailAck3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "levelFailAck",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.levelFailAck.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "steamFailAck",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_desk.steamFailAck.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = "")))

  val BoilerControl_i_bcproc_control_MI : Component =
    Component(
      name = "BoilerControl_i_bcproc_control",
      id = Arch.BoilerControlSystem_i_Instance_bcproc_control.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_mode",
          id = 0,
          direction = StateDirection.In,
          slangType = "BoilerControl.OpMode.Type"),
        StateVariable(
          name = "In_C",
          id = 1,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_M1",
          id = 2,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_M2",
          id = 3,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_N1",
          id = 4,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_N2",
          id = 5,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_W",
          id = 6,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_U1",
          id = 7,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_U2",
          id = 8,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_q",
          id = 9,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_P",
          id = 10,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_v_steamRate",
          id = 11,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_hasBoilerSentWaiting",
          id = 12,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPump0Failing",
          id = 13,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPump1Failing",
          id = 14,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPump2Failing",
          id = 15,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isPump3Failing",
          id = 16,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isWaterMeterFailing",
          id = 17,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_isSteamMeterFailing",
          id = 18,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_p0",
          id = 19,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_p1",
          id = 20,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_p2",
          id = 21,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_p3",
          id = 22,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_qc1",
          id = 23,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_qc2",
          id = 24,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_qa1",
          id = 25,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_qa2",
          id = 26,
          direction = StateDirection.In,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "In_shouldUpdatePumps",
          id = 27,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "In_transmissionFailure",
          id = 28,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "mode",
          id = 0,
          direction = StateDirection.Out,
          slangType = "BoilerControl.OpMode.Type"),
        StateVariable(
          name = "C",
          id = 1,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "M1",
          id = 2,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "M2",
          id = 3,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "N1",
          id = 4,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "N2",
          id = 5,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "W",
          id = 6,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "U1",
          id = 7,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "U2",
          id = 8,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "q",
          id = 9,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "P",
          id = 10,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "v_steamRate",
          id = 11,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "hasBoilerSentWaiting",
          id = 12,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPump0Failing",
          id = 13,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPump1Failing",
          id = 14,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPump2Failing",
          id = 15,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isPump3Failing",
          id = 16,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isWaterMeterFailing",
          id = 17,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "isSteamMeterFailing",
          id = 18,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "p0",
          id = 19,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "p1",
          id = 20,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "p2",
          id = 21,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "p3",
          id = 22,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "qc1",
          id = 23,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "qc2",
          id = 24,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "qa1",
          id = 25,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "qa2",
          id = 26,
          direction = StateDirection.Out,
          slangType = "Base_Types.Float_32"),
        StateVariable(
          name = "shouldUpdatePumps",
          id = 27,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "transmissionFailure",
          id = 28,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        Port(
          name = "pumpOpen0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpOpen0.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpOpen1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpOpen1.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpOpen2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpOpen2.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpOpen3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpOpen3.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFlow0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFlow0.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFlow1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFlow1.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFlow2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFlow2.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFlow3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFlow3.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "waterLevel",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.waterLevel.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "steamRate",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.steamRate.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "opMode",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.opMode.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "openPump0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.openPump0.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "openPump1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.openPump1.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "openPump2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.openPump2.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "openPump3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.openPump3.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "stop",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.stop.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "boilerWaiting",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.boilerWaiting.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "boilerReady",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.boilerReady.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "waterMeterReady",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.waterMeterReady.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlReady0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlReady0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlReady1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlReady1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlReady2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlReady2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlReady3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlReady3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "steamMeterReady",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.steamMeterReady.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpRepair0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpRepair0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpRepair1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpRepair1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpRepair2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpRepair2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpRepair3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpRepair3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlRepair0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlRepair0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlRepair1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlRepair1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlRepair2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlRepair2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlRepair3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlRepair3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "levelRepair",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.levelRepair.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "steamRepair",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.steamRepair.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFailAck0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFailAck0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFailAck1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFailAck1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFailAck2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFailAck2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpFailAck3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFailAck3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlFailAck0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlFailAck0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlFailAck1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlFailAck1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlFailAck2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlFailAck2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "pumpControlFailAck3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlFailAck3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "levelFailAck",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.levelFailAck.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "steamFailAck",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.steamFailAck.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ready",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.ready.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "valve",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.valve.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFail0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFail0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFail1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFail1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFail2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFail2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpFail3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpFail3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlFail0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlFail0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlFail1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlFail1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlFail2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlFail2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlFail3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlFail3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "levelFail",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.levelFail.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "steamFail",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.steamFail.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpRepairAck0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpRepairAck0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpRepairAck1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpRepairAck1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpRepairAck2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpRepairAck2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpRepairAck3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpRepairAck3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlRepairAck0",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlRepairAck0.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlRepairAck1",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlRepairAck1.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlRepairAck2",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlRepairAck2.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "pumpControlRepairAck3",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.pumpControlRepairAck3.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "levelRepairAck",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.levelRepairAck.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "steamRepairAck",
          id = Arch.BoilerControlSystem_i_Instance_bcproc_control.steamRepairAck.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = "")))

  val modelInfo: ModelInfo =
    ModelInfo(ISZ(
     Boiler_i_bcproc_boiler_MI,
     PumpControl_i_bcproc_pumpControl0_MI,
     PumpControl_i_bcproc_pumpControl1_MI,
     PumpControl_i_bcproc_pumpControl2_MI,
     PumpControl_i_bcproc_pumpControl3_MI,
     WaterMeter_i_bcproc_waterMeter_MI,
     SteamMeter_i_bcproc_steamMeter_MI,
     OperatorDesk_i_bcproc_desk_MI,
     BoilerControl_i_bcproc_control_MI))
}

@datatype class ModelInfo(val components: ISZ[Component])

@datatype class Component(val name: String,
                          val id: Z,
                          val dispatchProtocol: iDispatchProtocol.Type,
                          val state: ISZ[StateElement])

@enum object iDispatchProtocol {
  "Sporadic"
  "Periodic"
}

@enum object StateDirection {
  "In"
  "Out"
}

@sig trait StateElement {
  def name: String

  def id: Z

  def slangType: String

  def direction: StateDirection.Type
}

@enum object PortKind {
  "Data"
  "Event"
  "EventData"
}

@datatype class Port(val name: String,
                     val id: Z,
                     val kind: PortKind.Type,
                     val direction: StateDirection.Type,
                     val slangType: String) extends StateElement

@datatype class StateVariable(val name: String,
                              val id: Z,
                              val direction: StateDirection.Type,
                              val slangType: String) extends StateElement
