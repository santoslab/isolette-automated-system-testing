// #Sireum

package bc.BoilerControl

import org.sireum._
import art._
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object OperatorDesk_i_bcproc_desk_EntryPoint_Companion {

  var preStateContainer_wL: Option[OperatorDesk_i_bcproc_desk_PreState_Container_PS] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      OperatorDesk_i_bcproc_desk_PostState_Container_PS(
        isLevelBroken = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isLevelBroken,
        isPumpBroken0 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken0,
        isPumpBroken1 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken1,
        isPumpBroken2 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken2,
        isPumpBroken3 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken3,
        isPumpControlBroken0 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken0,
        isPumpControlBroken1 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken1,
        isPumpControlBroken2 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken2,
        isPumpControlBroken3 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken3,
        isSteamBroken = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isSteamBroken,
        api_levelFailAck = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.levelFailAck_Id).asInstanceOf[Option[art.Empty]],
        api_levelRepair = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.levelRepair_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlFailAck0 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFailAck0_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlFailAck1 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFailAck1_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlFailAck2 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFailAck2_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlFailAck3 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFailAck3_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlRepair0 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepair0_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlRepair1 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepair1_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlRepair2 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepair2_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlRepair3 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepair3_Id).asInstanceOf[Option[art.Empty]],
        api_pumpFailAck0 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFailAck0_Id).asInstanceOf[Option[art.Empty]],
        api_pumpFailAck1 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFailAck1_Id).asInstanceOf[Option[art.Empty]],
        api_pumpFailAck2 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFailAck2_Id).asInstanceOf[Option[art.Empty]],
        api_pumpFailAck3 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFailAck3_Id).asInstanceOf[Option[art.Empty]],
        api_pumpRepair0 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepair0_Id).asInstanceOf[Option[art.Empty]],
        api_pumpRepair1 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepair1_Id).asInstanceOf[Option[art.Empty]],
        api_pumpRepair2 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepair2_Id).asInstanceOf[Option[art.Empty]],
        api_pumpRepair3 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepair3_Id).asInstanceOf[Option[art.Empty]],
        api_steamFailAck = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.steamFailAck_Id).asInstanceOf[Option[art.Empty]],
        api_steamRepair = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.steamRepair_Id).asInstanceOf[Option[art.Empty]],
        api_stop = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.stop_Id).asInstanceOf[Option[art.Empty]])

    // the rest can now be performed via a different thread
    bc.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.BoilerControlSystem_i_Instance_bcproc_desk.id, bc.runtimemonitor.ObservationKind.BoilerControlSystem_i_Instance_bcproc_desk_postInit, postStateContainer_wL)
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      OperatorDesk_i_bcproc_desk_PreState_Container_PS(
        In_isLevelBroken = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isLevelBroken, 
        In_isPumpBroken0 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken0, 
        In_isPumpBroken1 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken1, 
        In_isPumpBroken2 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken2, 
        In_isPumpBroken3 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken3, 
        In_isPumpControlBroken0 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken0, 
        In_isPumpControlBroken1 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken1, 
        In_isPumpControlBroken2 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken2, 
        In_isPumpControlBroken3 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken3, 
        In_isSteamBroken = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isSteamBroken, 
        api_levelFail = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.levelFail_Id).asInstanceOf[Option[art.Empty]], 
        api_levelRepairAck = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.levelRepairAck_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpControlFail0 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFail0_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpControlFail1 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFail1_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpControlFail2 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFail2_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpControlFail3 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFail3_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpControlRepairAck0 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepairAck0_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpControlRepairAck1 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepairAck1_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpControlRepairAck2 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepairAck2_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpControlRepairAck3 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepairAck3_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpFail0 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFail0_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpFail1 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFail1_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpFail2 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFail2_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpFail3 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFail3_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpRepairAck0 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepairAck0_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpRepairAck1 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepairAck1_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpRepairAck2 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepairAck2_Id).asInstanceOf[Option[art.Empty]], 
        api_pumpRepairAck3 = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepairAck3_Id).asInstanceOf[Option[art.Empty]], 
        api_steamFail = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.steamFail_Id).asInstanceOf[Option[art.Empty]], 
        api_steamRepairAck = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.steamRepairAck_Id).asInstanceOf[Option[art.Empty]], 
        api_opMode = 
          if (Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.opMode_Id).nonEmpty)
            Some(Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.opMode_Id).get.asInstanceOf[BoilerControl.OpMode_Payload].value)
          else None()))

    // the rest can now be performed via a different thread
    bc.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.BoilerControlSystem_i_Instance_bcproc_desk.id, bc.runtimemonitor.ObservationKind.BoilerControlSystem_i_Instance_bcproc_desk_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      OperatorDesk_i_bcproc_desk_PostState_Container_PS(
        isLevelBroken = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isLevelBroken,
        isPumpBroken0 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken0,
        isPumpBroken1 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken1,
        isPumpBroken2 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken2,
        isPumpBroken3 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpBroken3,
        isPumpControlBroken0 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken0,
        isPumpControlBroken1 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken1,
        isPumpControlBroken2 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken2,
        isPumpControlBroken3 = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isPumpControlBroken3,
        isSteamBroken = bc.BoilerControl.OperatorDesk_i_bcproc_desk.isSteamBroken,
        api_levelFailAck = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.levelFailAck_Id).asInstanceOf[Option[art.Empty]],
        api_levelRepair = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.levelRepair_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlFailAck0 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFailAck0_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlFailAck1 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFailAck1_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlFailAck2 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFailAck2_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlFailAck3 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlFailAck3_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlRepair0 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepair0_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlRepair1 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepair1_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlRepair2 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepair2_Id).asInstanceOf[Option[art.Empty]],
        api_pumpControlRepair3 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpControlRepair3_Id).asInstanceOf[Option[art.Empty]],
        api_pumpFailAck0 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFailAck0_Id).asInstanceOf[Option[art.Empty]],
        api_pumpFailAck1 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFailAck1_Id).asInstanceOf[Option[art.Empty]],
        api_pumpFailAck2 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFailAck2_Id).asInstanceOf[Option[art.Empty]],
        api_pumpFailAck3 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpFailAck3_Id).asInstanceOf[Option[art.Empty]],
        api_pumpRepair0 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepair0_Id).asInstanceOf[Option[art.Empty]],
        api_pumpRepair1 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepair1_Id).asInstanceOf[Option[art.Empty]],
        api_pumpRepair2 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepair2_Id).asInstanceOf[Option[art.Empty]],
        api_pumpRepair3 = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.pumpRepair3_Id).asInstanceOf[Option[art.Empty]],
        api_steamFailAck = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.steamFailAck_Id).asInstanceOf[Option[art.Empty]],
        api_steamRepair = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.steamRepair_Id).asInstanceOf[Option[art.Empty]],
        api_stop = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_desk.operational_api.stop_Id).asInstanceOf[Option[art.Empty]])

    // the rest can now be performed via a different thread
    bc.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.BoilerControlSystem_i_Instance_bcproc_desk.id, bc.runtimemonitor.ObservationKind.BoilerControlSystem_i_Instance_bcproc_desk_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)
  }
}