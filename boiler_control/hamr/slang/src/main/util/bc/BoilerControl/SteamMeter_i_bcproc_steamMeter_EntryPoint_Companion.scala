// #Sireum

package bc.BoilerControl

import org.sireum._
import art._
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object SteamMeter_i_bcproc_steamMeter_EntryPoint_Companion {

  var preStateContainer_wL: Option[SteamMeter_i_bcproc_steamMeter_PreState_Container_PS] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      SteamMeter_i_bcproc_steamMeter_PostState_Container_PS(
        computedRate = bc.BoilerControl.SteamMeter_i_bcproc_steamMeter.computedRate,
        volume = bc.BoilerControl.SteamMeter_i_bcproc_steamMeter.volume,
        api_ready = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.operational_api.ready_Id).asInstanceOf[Option[art.Empty]],
        api_rate = 
          if (Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.operational_api.rate_Id).nonEmpty)
            Some(Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.operational_api.rate_Id).get.asInstanceOf[Base_Types.Float_32_Payload].value)
          else None())

    // the rest can now be performed via a different thread
    bc.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.id, bc.runtimemonitor.ObservationKind.BoilerControlSystem_i_Instance_bcproc_steamMeter_postInit, postStateContainer_wL)
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      SteamMeter_i_bcproc_steamMeter_PreState_Container_PS(
        In_computedRate = bc.BoilerControl.SteamMeter_i_bcproc_steamMeter.computedRate, 
        In_volume = bc.BoilerControl.SteamMeter_i_bcproc_steamMeter.volume, 
        api_programReady = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.operational_api.programReady_Id).asInstanceOf[Option[art.Empty]], 
        api_opMode = 
          if (Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.operational_api.opMode_Id).nonEmpty)
            Some(Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.operational_api.opMode_Id).get.asInstanceOf[BoilerControl.OpMode_Payload].value)
          else None()))

    // the rest can now be performed via a different thread
    bc.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.id, bc.runtimemonitor.ObservationKind.BoilerControlSystem_i_Instance_bcproc_steamMeter_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      SteamMeter_i_bcproc_steamMeter_PostState_Container_PS(
        computedRate = bc.BoilerControl.SteamMeter_i_bcproc_steamMeter.computedRate,
        volume = bc.BoilerControl.SteamMeter_i_bcproc_steamMeter.volume,
        api_ready = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.operational_api.ready_Id).asInstanceOf[Option[art.Empty]],
        api_rate = 
          if (Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.operational_api.rate_Id).nonEmpty)
            Some(Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.operational_api.rate_Id).get.asInstanceOf[Base_Types.Float_32_Payload].value)
          else None())

    // the rest can now be performed via a different thread
    bc.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.BoilerControlSystem_i_Instance_bcproc_steamMeter.id, bc.runtimemonitor.ObservationKind.BoilerControlSystem_i_Instance_bcproc_steamMeter_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)
  }
}