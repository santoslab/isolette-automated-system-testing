// #Sireum

package bc.BoilerControl

import org.sireum._
import art._
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Boiler_i_bcproc_boiler_EntryPoint_Companion {

  var preStateContainer_wL: Option[Boiler_i_bcproc_boiler_PreState_Container_PS] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      Boiler_i_bcproc_boiler_PostState_Container_PS(
        Mode = bc.BoilerControl.Boiler_i_bcproc_boiler.Mode,
        ValveOpen = bc.BoilerControl.Boiler_i_bcproc_boiler.ValveOpen,
        api_ready = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.ready_Id).asInstanceOf[Option[art.Empty]],
        api_waiting = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.waiting_Id).asInstanceOf[Option[art.Empty]])

    // the rest can now be performed via a different thread
    bc.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.id, bc.runtimemonitor.ObservationKind.BoilerControlSystem_i_Instance_bcproc_boiler_postInit, postStateContainer_wL)
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      Boiler_i_bcproc_boiler_PreState_Container_PS(
        In_Mode = bc.BoilerControl.Boiler_i_bcproc_boiler.Mode, 
        In_ValveOpen = bc.BoilerControl.Boiler_i_bcproc_boiler.ValveOpen, 
        api_programReady = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.programReady_Id).asInstanceOf[Option[art.Empty]], 
        api_valve = Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.valve_Id).asInstanceOf[Option[art.Empty]], 
        api_opMode = 
          if (Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.opMode_Id).nonEmpty)
            Some(Art.observeInPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.opMode_Id).get.asInstanceOf[BoilerControl.OpMode_Payload].value)
          else None()))

    // the rest can now be performed via a different thread
    bc.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.id, bc.runtimemonitor.ObservationKind.BoilerControlSystem_i_Instance_bcproc_boiler_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      Boiler_i_bcproc_boiler_PostState_Container_PS(
        Mode = bc.BoilerControl.Boiler_i_bcproc_boiler.Mode,
        ValveOpen = bc.BoilerControl.Boiler_i_bcproc_boiler.ValveOpen,
        api_ready = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.ready_Id).asInstanceOf[Option[art.Empty]],
        api_waiting = Art.observeOutPortVariable(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.operational_api.waiting_Id).asInstanceOf[Option[art.Empty]])

    // the rest can now be performed via a different thread
    bc.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.BoilerControlSystem_i_Instance_bcproc_boiler.id, bc.runtimemonitor.ObservationKind.BoilerControlSystem_i_Instance_bcproc_boiler_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)
  }
}