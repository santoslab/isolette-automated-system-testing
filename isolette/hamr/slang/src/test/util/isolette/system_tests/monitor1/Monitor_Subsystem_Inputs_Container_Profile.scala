package isolette.system_tests.monitor1

import org.sireum._
import isolette._
import org.sireum.Random.Impl.Xoshiro256

// Do not edit this file as it will be overwritten if SystemTestArtifactGen is rerun

object Monitor_Subsystem_Inputs_Container_Profile {

  def freshRandomLib: RandomLib = {
    return RandomLib(Random.Gen64Impl(Xoshiro256.create))
  }

  def getDefaultProfile: Monitor_Subsystem_Inputs_Container_Profile = {
    return Monitor_Subsystem_Inputs_Container_Profile (
      name = "Default Monitor_Subsystem_Inputs_Container_Profile Profile",
      numTestVectorGenRetries = 100,

      lowerAlarmTempWStatus = freshRandomLib,
      upperAlarmTempWStatus = freshRandomLib,
      currentTempWStatus = freshRandomLib,
      monitor_mode = freshRandomLib,
      internalFailure = freshRandomLib
    )
  }
}

case class Monitor_Subsystem_Inputs_Container_Profile (
  var name: String,
  var numTestVectorGenRetries: Z,

  var lowerAlarmTempWStatus : RandomLib,
  var upperAlarmTempWStatus : RandomLib,
  var currentTempWStatus : RandomLib,
  var monitor_mode : RandomLib,
  var internalFailure : RandomLib) extends org.sireum.$internal.MutableMarker {

  def next(): Monitor_Subsystem_Inputs_Container = {
    return Monitor_Subsystem_Inputs_Container (
      lowerAlarmTempWStatus.nextIsolette_Data_ModelTempWstatus_impl(),
      upperAlarmTempWStatus.nextIsolette_Data_ModelTempWstatus_impl(),
      currentTempWStatus.nextIsolette_Data_ModelTempWstatus_impl(),
      monitor_mode.nextIsolette_Data_ModelMonitor_ModeType(),
      internalFailure.nextIsolette_Data_ModelFailure_Flag_impl()
    )
  }

  override def $clonable: Boolean = F

  override def $clonable_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $owned: Boolean = F

  override def $owned_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $clone: org.sireum.$internal.MutableMarker = this
}
