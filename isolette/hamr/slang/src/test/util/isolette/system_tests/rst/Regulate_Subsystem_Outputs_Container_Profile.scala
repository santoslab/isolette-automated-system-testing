package isolette.system_tests.rst

import org.sireum._
import isolette._
import org.sireum.Random.Impl.Xoshiro256

// Do not edit this file as it will be overwritten if SystemTestArtifactGen is rerun

object Regulate_Subsystem_Outputs_Container_Profile {

  def freshRandomLib: RandomLib = {
    return RandomLib(Random.Gen64Impl(Xoshiro256.create))
  }

  def getDefaultProfile: Regulate_Subsystem_Outputs_Container_Profile = {
    return Regulate_Subsystem_Outputs_Container_Profile (
      name = "Default Regulate_Subsystem_Outputs_Container_Profile Profile",
      numTestVectorGenRetries = 100,

      heat_control = freshRandomLib,
      display_temperature = freshRandomLib,
      regulator_status = freshRandomLib,
      mode = freshRandomLib
    )
  }
}

case class Regulate_Subsystem_Outputs_Container_Profile (
  var name: String,
  var numTestVectorGenRetries: Z,

  var heat_control : RandomLib,
  var display_temperature : RandomLib,
  var regulator_status : RandomLib,
  var mode : RandomLib) extends org.sireum.$internal.MutableMarker {

  def next(): Regulate_Subsystem_Outputs_Container = {
    return Regulate_Subsystem_Outputs_Container (
      heat_control.nextIsolette_Data_ModelOn_OffType(),
      display_temperature.nextIsolette_Data_ModelTemp_impl(),
      regulator_status.nextIsolette_Data_ModelStatusType(),
      mode.nextIsolette_Data_ModelRegulator_ModeType()
    )
  }

  override def $clonable: Boolean = F

  override def $clonable_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $owned: Boolean = F

  override def $owned_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $clone: org.sireum.$internal.MutableMarker = this
}
