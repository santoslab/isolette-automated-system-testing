package isolette.system_tests.rst

import org.sireum._
import isolette._
import org.sireum.Random.Impl.Xoshiro256

// Do not edit this file as it will be overwritten if SystemTestArtifactGen is rerun

object Regulate_Subsystem_Inputs_Container_Profile {

  def freshRandomLib: RandomLib = {
    return RandomLib(Random.Gen64Impl(Xoshiro256.create))
  }

  def getDefaultProfile: Regulate_Subsystem_Inputs_Container_Profile = {
    return Regulate_Subsystem_Inputs_Container_Profile (
      name = "Default Regulate_Subsystem_Inputs_Container_Profile Profile",
      numTestVectorGenRetries = 100,

      lowerDesiredTempWStatus = freshRandomLib,
      upperDesiredTempWStatus = freshRandomLib,
      currentTempWStatus = freshRandomLib,
      mode = freshRandomLib,
      internalFailure = freshRandomLib
    )
  }
}

case class Regulate_Subsystem_Inputs_Container_Profile (
  var name: String,
  var numTestVectorGenRetries: Z,

  var lowerDesiredTempWStatus : RandomLib,
  var upperDesiredTempWStatus : RandomLib,
  var currentTempWStatus : RandomLib,
  var mode : RandomLib,
  var internalFailure : RandomLib) extends org.sireum.$internal.MutableMarker {

  def next(): Regulate_Subsystem_Inputs_Container = {
    return Regulate_Subsystem_Inputs_Container (
      lowerDesiredTempWStatus.nextIsolette_Data_ModelTempWstatus_impl(),
      upperDesiredTempWStatus.nextIsolette_Data_ModelTempWstatus_impl(),
      currentTempWStatus.nextIsolette_Data_ModelTempWstatus_impl(),
      mode.nextIsolette_Data_ModelRegulator_ModeType(),
      internalFailure.nextIsolette_Data_ModelFailure_Flag_impl()
    )
  }

  override def $clonable: Boolean = F

  override def $clonable_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $owned: Boolean = F

  override def $owned_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $clone: org.sireum.$internal.MutableMarker = this
}
