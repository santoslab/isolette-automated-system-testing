package tc.system_tests

import org.sireum._
import tc._

// Do not edit this file as it will be overwritten if SystemTestArtifactGen is rerun

object TempControl_Outputs_Container_Profile {

  // a call to next may result in an AssertionError which is an indication that
  // SlangCheck was unable to satisfy a field's filter.  Consider using
  // nextH instead
  def next(profile: TempControl_Outputs_Container_Profile): TempControl_Outputs_Container = {
    return TempControl_Outputs_Container (
      fanCmd = profile.fanCmd.nextCoolingFanFanCmdType()
    )
  }

  // nextH will return None() if SlangCheck is unable to satisfy a field's filter
  def nextH(profile: TempControl_Outputs_Container_Profile): Option[TempControl_Outputs_Container] = {
    try {
      return Some(TempControl_Outputs_Container (
        fanCmd = profile.fanCmd.nextCoolingFanFanCmdType()))
    } catch {
      case e: AssertionError =>
        // SlangCheck was unable to satisfy a datatype's filter
        return None()
    }
  }

  def getDefaultProfile: TempControl_Outputs_Container_Profile = {
    return TempControl_Outputs_Container_Profile (
      name = "Default TempControl_Outputs_Container_Profile Profile",
      numTests = 100,
      numTestVectorGenRetries = 100,

      fanCmd = TempControl_Outputs_Container_Util.freshRandomLib
    )
  }
}

case class TempControl_Outputs_Container_Profile (
  var name: String,
  var numTests: Z,
  var numTestVectorGenRetries: Z,

  var fanCmd : RandomLib) extends org.sireum.$internal.MutableMarker {

  override def $clonable: Boolean = F

  override def $clonable_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $owned: Boolean = F

  override def $owned_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $clone: org.sireum.$internal.MutableMarker = this
}
